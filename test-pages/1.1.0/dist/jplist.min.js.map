{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/1.1.0/controls/base/groups/base-controls-group.js","webpack:///./src/1.1.0/controls/base/controls/base.control.js","webpack:///./src/1.1.0/controls/base/groups/sort/base-sort-controls-group.js","webpack:///./src/1.1.0/controls/base/groups/filter/base-path-filter-controls-group.js","webpack:///./src/1.1.0/controls/base/controls/dropdown/base-dropdown.control.js","webpack:///./src/1.1.0/controls/base/groups/filter/base-text-filter-controls-group.js","webpack:///./src/1.1.0/controls/base/controls/sort/base-sort.control.js","webpack:///./src/1.1.0/controls/base/groups/mixins/buttons.mixin.js","webpack:///./src/1.1.0/controls/base/controls/filter/base-path-filter.control.js","webpack:///./src/1.1.0/controls/base/groups/mixins/checkbox.mixin.js","webpack:///./src/1.1.0/controls/base/groups/mixins/radio-buttons.mixin.js","webpack:///./src/1.1.0/controls/base/groups/filter/base-range-filter-controls-group.js","webpack:///./src/1.1.0/index.js","webpack:///./src/1.1.0/jplist.js","webpack:///./src/1.1.0/content/content-manager.js","webpack:///./src/1.1.0/actions/sort/sort.action.js","webpack:///./src/1.1.0/actions/pagination/pagination.action.js","webpack:///./src/1.1.0/services/deep-links.service.js","webpack:///./src/1.1.0/services/storage.service.js","webpack:///./src/1.1.0/actions/filter/filter.action.js","webpack:///./src/1.1.0/controls/sort/hidden-sort/hidden-sort.control.js","webpack:///./src/1.1.0/controls/sort/buttons-sort/buttons-sort.control.js","webpack:///./src/1.1.0/controls/sort/radio-buttons-sort/radio-buttons-sort.control.js","webpack:///./src/1.1.0/controls/sort/checkbox-sort/checkbox-sort.control.js","webpack:///./src/1.1.0/controls/sort/select-sort/select-sort.control.js","webpack:///./src/1.1.0/controls/sort/dropdown-sort/dropdown-sort.control.js","webpack:///./src/1.1.0/controls/pagination/pagination.control.js","webpack:///./src/1.1.0/controls/base/groups/pagination/base-pagination-controls-group.js","webpack:///./src/1.1.0/controls/base/controls/pagination/base-pagination.control.js","webpack:///./src/1.1.0/controls/filter/text-filters/textbox-filter/textbox-filter.control.js","webpack:///./src/1.1.0/controls/base/controls/filter/base-text-filter.control.js","webpack:///./src/1.1.0/controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control.js","webpack:///./src/1.1.0/controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control.js","webpack:///./src/1.1.0/controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control.js","webpack:///./src/1.1.0/controls/filter/path-filters/select-filter/select-filter.control.js","webpack:///./src/1.1.0/controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control.js","webpack:///./src/1.1.0/controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control.js","webpack:///./src/1.1.0/controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control.js","webpack:///./src/1.1.0/controls/filter/path-filters/dropdown-filter/dropdown-filter.control.js","webpack:///./src/1.1.0/controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control.js","webpack:///./src/1.1.0/controls/base/controls/filter/base-range-filter.control.js","webpack:///./src/1.1.0/controls/filter/range-filters/slider-range-filter/slider-range-filter.control.js","webpack:///./src/1.1.0/controls/base/controls/slider/base-slider.control.js","webpack:///./src/1.1.0/controls/no-results/no-results.control.js","webpack:///./src/1.1.0/controls/layout/layout.control.js","webpack:///./src/1.1.0/controls/reset/reset.control.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BaseControlsGroup","group","controls","deepLinkParams","arguments","length","undefined","_classCallCheck","this","trim","toLowerCase","has","control","push","selectedJumpPath","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","jump","el","document","querySelector","elRect","getBoundingClientRect","width","height","getClientRects","prevEl","prevElRect","top","err","return","BaseControl","element","type","getAttribute","id","BaseSortControlsGroup","sortOptions","concat","getSortOptions","baseSortControl","BaseSortControl","BasePathFilterControlsGroup","basePathFilterControl","BasePathFilterControl","options","getPathFilterOptions","BaseDropdownControl","panels","querySelectorAll","openedClass","panel","initialContent","innerHTML","contents","handlePanelsClick","_this","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","addEventListener","e","atLeastOnePanelIsOpened","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","dropdownContent","classList","toggle","contains","add","remove","_iterator2","target","close","content","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","BaseTextFilterControlsGroup","getTextFilterOptions","baseTextFilterControl","BaseTextFilterControl","dl","map","text","filter","str","Array","from","Set","join","_possibleConstructorReturn","__proto__","getPrototypeOf","path","dataType","order","regex","dateTimeFormat","multipleSortsNumber","getMultipleSortsNumber","index","pathsNumber","attributes","attr","match","exec","nodeName","propIndex","Number","isInteger","ignoreRegex","isEqual","props","k","superclass","_superclass","_class","checkboxes","radios","_inherits","_createClass","_this2","baseButtonControl","selected","deepLinkParam","find","param","handleRadios","handleCheckboxes","preventDefault","forEach","cb","isEqualTo","window","jplist","refresh","checked","latestSelectedRadio","radio","getLastSelectedRadio","cbArr","radioArr","combined","isInverted","baseControl","BaseRangeFilterControlsGroup","baseRangeFilterControl","BaseRangeFilterControl","getRangeFilterOptions","CustomEvent","event","params","bubbles","cancelable","detail","evt","createEvent","initCustomEvent","Event","controlTypes","Map","HiddenSortControl","ButtonsSortControl","RadioButtonsSortControl","CheckboxSortControl","SelectSortControl","DropdownSortControl","PaginationControl","TextboxFilterControl","CheckboxTextFilterControl","RadioButtonsTextFilterControl","ButtonsTextFilterControl","SelectFilterControl","DropdownFilterControl","CheckboxPathFilterControl","RadioButtonsPathFilterControl","ButtonsPathFilterControl","ButtonsRangeFilter","RangeSliderFilter","NoResultsControl","DropdownControl","LayoutControl","ResetControl","jPList","init","resetControls","settings","assign","storage","storageName","cookiesExpiration","deepLinking","hashStart","ContentManager","splitByGroupAndName","body","elements","groups","findGroups","items","jplistIndex","groupName","apply","_step$value","_slicedToArray","groupControls","initialHTML","outerHTML","cGroupName","groupValueArr","baseControlsGroups","collectControlsOptions","itemsBlock","itemsNumber","fragment","getItemsFragment","SortAction","sort","filtered","pathFilterOptions","pathFilterOption","FilterAction","pathFilter","rangeFilterOptions","rangeFilterOption","rangeFilter","to","min","max","textFilterOptions","textFilterOption","textFilter","paginationOptions","paginationAction","PaginationAction","currentPage","itemsPerPage","range","bcg","setPaginationOptions","paginatedItems","slice","start","end","root","appendChild","sendStateEvent","updateDeepLink","getDeepLink","StorageService","set","getJumpPath","groupJumpEl","groupJumpElRect","clientTop","pageYOffset","scroll","stateEvent","jplistState","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","baseControlsGroup","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","dispatchEvent","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","getPaginationOptions","createDocumentFragment","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","item","deepLink","hashStr","replace","location","hash","href","indexOf","substring","history","replaceState","deeplink","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","keys","deepLinkParts","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","groupsMap","groupElements","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","groupElement","groupValue","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","controlInstance","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","arr","DeepLinksService","getUrlParams","deepLinkSavedInStorage","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","controlClass","controlGroup","addControl","res","findControls","controlsByGroupNames","findControlGroups","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_step18$value","sameNameControls","findSameNameControls","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","values","item1","item2","sortByIndex","sortHelper","optionsIndex","result","option","sortNumbers","sortDateTime","sortText","el1","el2","text1","textContent","text2","regexExpr","RegExp","localeCompare","number1","number2","parseFloat","isNaN","datetime1","datetime2","date1","date2","getDateFromString","Date","parse","getTime","dateTimeString","year","getDateWildcardValue","day","month","getMonthByWildcard","hour","minute","second","wildcard","datetimeString","regexValue","monthNumberOrName","monthIndex","months","findIndex","monthAliasesArray","monthAlias","pagesNumber","Math","ceil","prevPage","nextPage","halfRange","rangeStart","rangeEnd","parts","split","paramsMap","formattedHash","decodeURIComponent","currentGroupName","pair","getParam","groupValues","expiration","cValue","encodeURIComponent","exdate","cookie","setMinutes","getMinutes","toUTCString","isSupported","cookies","x","substr","y","formattedText","shouldBeAdded","elText","startsWith","endsWith","isFinite","itemElements","numbers","num","maxNumber","minNumber","isNumeric","atLeastOneNotSelectedCheckbox","checkbox","setAttribute","opt","_this3","_this4","dropdown","buttons","button","btnSortControl","setSelectedButton","getSelectedButton","deepLinkBtn","btn","btnValue","dropdownBtn","setPanelsContent","BasePaginationControlsGroup","basePaginationControl","restoreFromDeepLink","pageButtonsHolder","btnTemplate","firstButtons","lastButtons","prevButtons","nextButtons","bindEventHandler","pageButtonClick","itemsPerPageSelects","updateItemsPerPageSelect","itemsPerPageDD","initCustomDropdowns","selectChange","labels","label","template","selects","select","toString","dd","_loop2","selectedButton","_this5","firstChild","removeChild","_loop3","div","createElement","pageButton","selectedClass","setPageAttr","disabledClass","infos","html","info","pageNumber","page","isEnabled","eventName","func","_loop4","BasePaginationControl","textChanged","clearButtonID","clearBtn","getElementById","_text","includeValue","_checkbox2","default","_radioButtons2","_buttons2","selectFilterControl","btnPathFilterControl","Infinity","SliderRangeFilter","rangeSliderFilterControl","sliderEl","val1Elements","val2Elements","minElements","maxElements","orientation","slider","BaseSliderControl","value1","value2","round","setValues","handler1","handler2","controlOptions","isVertical","callback","left","dragging","render","resize","stop","sendCallback","pos1","getInnerValue","pos2","update","newStart","newEnd","position","getHandlerPos","abs","handler1ZIndex","getComputedStyle","defaultView","getPropertyValue","handler2ZIndex","style","stopPropagation","setZIndex","handler","rect","size","xy","lefttop","getPreviewValue","rangeHeight","point","touches","pageX","clientX","pageY","clientY","vector","sub","v1","v2","_get","display","classNames","selectedClassName","groupClassName","handleSelectedControls","handleClasses","resetAllGroups","getLatestSelectedControl","addClassToGroups","cn","selectedGroupClassName"],"mappings":"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","file":"jplist.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","/**\r\n * represents a group of controls with the same data-name and data-group attributes\r\n */\r\nclass BaseControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls, deepLinkParams = null){\r\n\r\n        this.group = (group || '').trim().toLowerCase();\r\n        this.name = (name || 'default').trim();\r\n        this.controls = controls || [];\r\n\r\n        this.deepLinkParams = [];\r\n\r\n        if(deepLinkParams && deepLinkParams.has(this.group)){\r\n\r\n            this.deepLinkParams = deepLinkParams.get(this.group) || [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     */\r\n    addControl(control){\r\n        if(!control || control.name !== this.name || control.group !== this.group) return;\r\n\r\n        this.controls.push(control);\r\n    }\r\n\r\n    /**\r\n     * by default control's deep link is empty\r\n     * @returns {string}\r\n     */\r\n    getDeepLink(){\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * if multiple control in the group have data-jump attribute -> select the upper one\r\n     * @return {string}\r\n     */\r\n    getJumpPath(){\r\n\r\n        let selectedJumpPath = '';\r\n\r\n        for(let control of this.controls){\r\n\r\n            if(!control.jump) continue;\r\n\r\n            //top is always the upper ))\r\n            if(control.jump === 'top'){\r\n               return 'top';\r\n            }\r\n\r\n            const el = document.querySelector(control.jump);\r\n\r\n            if(!el) continue;\r\n\r\n            const elRect = el.getBoundingClientRect();\r\n\r\n            //make sure element is not hidden or disconnected\r\n            if (!elRect.width && !elRect.height && !elRect.getClientRects().length) continue;\r\n\r\n            if(!selectedJumpPath){\r\n\r\n                //select the first data-jump as the default value\r\n                selectedJumpPath = control.jump;\r\n            }\r\n            else{\r\n\r\n                const prevEl = document.querySelector(selectedJumpPath);\r\n\r\n                if(!prevEl) continue;\r\n\r\n                const prevElRect = prevEl.getBoundingClientRect();\r\n\r\n                //const elTop = elRect.top + window.pageYOffset - document.clientTop;\r\n                //const elLeft = elRect.left + window.pageXOffset - document.clientLeft;\r\n                //const prevElementTop = prevElRect.top + window.pageYOffset - document.clientTop;\r\n\r\n                if(elRect.top < prevElRect.top){\r\n                    selectedJumpPath = control.jump;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return selectedJumpPath;\r\n    }\r\n\r\n}\r\n\r\nexport default BaseControlsGroup;","/**\r\n * jPList Base Control\r\n * Each jPList control should extend this base control.\r\n */\r\nclass BaseControl{\r\n\r\n    /**\r\n     * control type defined in data-jplist-control attribute;\r\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\r\n     * @param {HTMLElement} element\r\n     */\r\n    constructor(element){\r\n\r\n        if(element) {\r\n\r\n            this.element = element;\r\n\r\n            /**\r\n             * used to define appropriate class for the control\r\n             * @type {string} required\r\n             */\r\n            this.type = (element.getAttribute('data-jplist-control') || '').trim().toLowerCase();\r\n\r\n            /**\r\n             * used to define the elements group that is influenced by this control\r\n             * @type {string=} optional\r\n             */\r\n            this.group = (element.getAttribute('data-group') || '').trim().toLowerCase();\r\n\r\n            /**\r\n             * control name\r\n             * @type {string} optional\r\n             */\r\n            this.name = (element.getAttribute('data-name') || element.getAttribute('name') || 'default').trim();\r\n\r\n            /**\r\n             * deep link parameter name\r\n             * @type {string} optional\r\n             */\r\n            this.id = (element.getAttribute('data-id') || '').trim().toLowerCase();\r\n\r\n            /**\r\n             * jump to an element after the action;\r\n             * and CSS selector or \"top\" keyword\r\n             * @type {string} optional\r\n             */\r\n            this.jump = (element.getAttribute('data-jump') || '').trim();\r\n        }\r\n    }\r\n}\r\n\r\nexport default BaseControl;","import BaseControlsGroup from '../base-controls-group';\r\nimport BaseSortControl from '../../controls/sort/base-sort.control';\r\n\r\n/**\r\n * represents a group of sort controls with the same data-name and data-group attributes\r\n */\r\nclass BaseSortControlsGroup extends BaseControlsGroup{\r\n\r\n    /**\r\n     * get sort options from all controls in the group\r\n     * @return {Array.<object>} sortOptions\r\n     */\r\n    getSortOptions(){\r\n\r\n        let sortOptions = [];\r\n\r\n        for(let control of this.controls){\r\n            sortOptions = sortOptions.concat(control.getSortOptions());\r\n        }\r\n\r\n        return sortOptions;\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     * @return {BaseSortControl|null}\r\n     */\r\n    addControl(control){\r\n\r\n        if(control.name !== this.name || control.group !== this.group){\r\n            return null;\r\n        }\r\n\r\n        const baseSortControl = new BaseSortControl(control.element);\r\n\r\n        this.controls.push(baseSortControl);\r\n\r\n        return baseSortControl;\r\n    }\r\n}\r\n\r\nexport default BaseSortControlsGroup;\r\n","import BaseControlsGroup from '../base-controls-group';\r\nimport BasePathFilterControl from '../../controls/filter/base-path-filter.control';\r\n\r\n/**\r\n * represents a group of path filter controls with the same data-name and data-group attributes\r\n */\r\nclass BasePathFilterControlsGroup extends BaseControlsGroup{\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     * @return {BasePathFilterControl|null}\r\n     */\r\n    addControl(control){\r\n\r\n        if(control.name !== this.name || control.group !== this.group){\r\n            return null;\r\n        }\r\n\r\n        const basePathFilterControl = new BasePathFilterControl(control.element);\r\n\r\n        this.controls.push(basePathFilterControl);\r\n\r\n        return basePathFilterControl;\r\n    }\r\n\r\n    /**\r\n     * get path filter options from all controls in the group\r\n     * @return {Array.<object>} path filer options\r\n     */\r\n    getPathFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        for(let control of this.controls){\r\n            options = options.concat(control.getPathFilterOptions());\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n}\r\n\r\nexport default BasePathFilterControlsGroup;\r\n","import './base-dropdown.control.css';\r\n\r\n/**\r\n * base dropdown control\r\n */\r\nclass BaseDropdownControl{\r\n\r\n\r\n    /**\r\n     * control type defined in data-jplist-control attribute;\r\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\r\n     * @param {HTMLElement} element\r\n     */\r\n    constructor(element){\r\n\r\n        if(element) {\r\n\r\n            this.element = element;\r\n\r\n            if(!this.element) return;\r\n\r\n            //dropdown panel elements defined by data-type=\"panel\" data attribute; can be multiple;\r\n            this.panels = this.element.querySelectorAll('[data-type=\"panel\"]');\r\n            this.element.openedClass = (this.element.getAttribute('data-opened-class') || 'jplist-dd-opened').trim();\r\n\r\n            //keep panels initial html\r\n            for(let panel of this.panels){\r\n                panel.initialContent = panel.innerHTML;\r\n                panel.element = element;\r\n            }\r\n\r\n            //dropdown content elements defined by data-type=\"content\" data attribute; can be multiple;\r\n            this.contents = this.element.querySelectorAll('[data-type=\"content\"]');\r\n\r\n            //handle panels onclick event\r\n            this.handlePanelsClick();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handle panels onclick event\r\n     */\r\n    handlePanelsClick(){\r\n\r\n        if(!this.panels || this.panels.length <= 0) return;\r\n\r\n        for(let panel of this.panels){\r\n\r\n            /**\r\n             * on panel click\r\n             */\r\n            panel.addEventListener('click', e => {\r\n\r\n                //e.stopPropagation();\r\n\r\n                let atLeastOnePanelIsOpened = false;\r\n\r\n                for(let dropdownContent of this.contents){\r\n\r\n                    dropdownContent.classList.toggle(panel.element.openedClass);\r\n\r\n                    if(dropdownContent.classList.contains(panel.element.openedClass)){\r\n                        atLeastOnePanelIsOpened = true;\r\n                    }\r\n                }\r\n\r\n                if(atLeastOnePanelIsOpened){\r\n                    panel.classList.add(panel.element.openedClass);\r\n                    panel.element.classList.add(panel.element.openedClass);\r\n                }\r\n                else{\r\n                    panel.classList.remove(panel.element.openedClass);\r\n                    panel.element.classList.remove(panel.element.openedClass);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * close dropdowns on body click\r\n         */\r\n        document.addEventListener('click', e => {\r\n\r\n            if (!this.element.contains(e.target)) { // or use: event.target.closest(selector) === null\r\n\r\n                this.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * set panels content\r\n     * @param {string} content\r\n     */\r\n    setPanelsContent(content){\r\n\r\n        for(let panel of this.panels){\r\n            panel.innerHTML = content;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * restore panels content\r\n     */\r\n    restorePanelsContent(){\r\n\r\n        for(let panel of this.panels){\r\n\r\n            if(panel.initialContent) {\r\n                panel.innerHTML = panel.initialContent;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close dropdown\r\n     */\r\n    close(){\r\n        for(let dropdownContent of this.contents){\r\n\r\n            dropdownContent.classList.remove(this.panels[0].element.openedClass);\r\n        }\r\n\r\n        for(let panel of this.panels){\r\n            panel.classList.remove(panel.element.openedClass);\r\n            panel.element.classList.remove(panel.element.openedClass);\r\n        }\r\n    }\r\n}\r\n\r\nexport default BaseDropdownControl;","import BaseControlsGroup from '../base-controls-group';\r\nimport BaseTextFilterControl from '../../controls/filter/base-text-filter.control';\r\n\r\n/**\r\n * represents a group of text filter controls with the same data-name and data-group attributes\r\n */\r\nclass BaseTextFilterControlsGroup extends BaseControlsGroup{\r\n\r\n    /**\r\n     * get text filter options from all controls in the group\r\n     * @return {Array.<object>} text filter options\r\n     */\r\n    getTextFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        for(let control of this.controls){\r\n            options = options.concat(control.getTextFilterOptions());\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     * @return {BaseTextFilterControl|null}\r\n     */\r\n    addControl(control){\r\n\r\n        if(control.name !== this.name || control.group !== this.group){\r\n            return null;\r\n        }\r\n\r\n        const baseTextFilterControl = new BaseTextFilterControl(control.element);\r\n\r\n        this.controls.push(baseTextFilterControl);\r\n\r\n        return baseTextFilterControl;\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n\r\n        const dl = this.controls.map(control => control.id && control.text.trim() !== '' ? (control.id + '=' + control.text.trim()) : '').filter(str => str !== '');\r\n\r\n        const unique = Array.from(new Set(dl));\r\n        return unique.join('&');\r\n    }\r\n}\r\n\r\nexport default BaseTextFilterControlsGroup;\r\n","import BaseControl from '../base.control';\r\n\r\n/**\r\n * base sort control\r\n */\r\nclass BaseSortControl extends BaseControl{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {HTMLElement} element\r\n     */\r\n    constructor(element){\r\n        super(element);\r\n\r\n        if(element){\r\n\r\n            /**\r\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\r\n             * @type {string}\r\n             */\r\n            this.path = (element.getAttribute('data-path') || '').trim();\r\n\r\n            /**\r\n             * optional text (default), number or datetime\r\n             * @type {string}\r\n             */\r\n            this.dataType = (element.getAttribute('data-type') || 'text').trim().toLowerCase();\r\n\r\n            /**\r\n             * optional sort order: asc (default) or desc\r\n             * @type {string}\r\n             */\r\n            this.order = (element.getAttribute('data-order') || 'asc').trim().toLowerCase();\r\n\r\n            /**\r\n             * optional ignore regex - used to ignore characters before sort\r\n             * @type {string}\r\n             */\r\n            this.regex = element.getAttribute('data-regex') || '';\r\n\r\n            /**\r\n             * optional datetime format - datetime structure using wilcards {year}|{month}|{day}|{hour}|{min}|{sec}, for example: {month}/{day}/{year}\r\n             * @type {string}\r\n             */\r\n            this.dateTimeFormat = (element.getAttribute('data-date-format') || '').trim().toLowerCase();\r\n\r\n            /**\r\n             * this property indicates the number of data attribute groups [{data-path, data-order, ...}, {data-path-1, data-order-1,...}, ...]\r\n             * only data-path attribute is required;\r\n             * if multipleSortsNum > 0 => multiple sort\r\n             * @type {number}\r\n             */\r\n            this.multipleSortsNumber = this.getMultipleSortsNumber(element);\r\n\r\n            for(let index=1; index <= this.multipleSortsNumber; index++){\r\n                this['path' + index] = (element.getAttribute('data-path-' + index) || '').trim();\r\n                this['dataType' + index] = (element.getAttribute('data-type-' + index) || 'text').trim().toLowerCase();\r\n                this['order' + index] = (element.getAttribute('data-order-' + index) || 'asc').trim().toLowerCase();\r\n                this['regex' + index] = element.getAttribute('data-regex-' + index) || '';\r\n                this['dateTimeFormat' + index] = (element.getAttribute('data-date-format-' + index) || '').trim().toLowerCase();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * multiple sort is defined by another sets of data attributes like {data-path-1, data-order-1,...}, {data-path-2, data-order-2,...} etc\r\n     * this method counts the number of such sets (= the number of attributes data-path-1, data-path-2, ...)\r\n     * @param {HTMLElement} element\r\n     * @return {number}\r\n     */\r\n    getMultipleSortsNumber(element){\r\n\r\n        let pathsNumber = 0;\r\n\r\n        for(let attr of element.attributes){\r\n\r\n            let match = null;\r\n            const regex = /^data-path-([0-9]+)$/g;\r\n\r\n            while (match = regex.exec(attr.nodeName)) {\r\n\r\n                const propIndex = Number(match[1]);\r\n\r\n                if(!Number.isInteger(propIndex)) continue;\r\n                pathsNumber++;\r\n            }\r\n        }\r\n\r\n        return pathsNumber;\r\n    }\r\n\r\n    /**\r\n     * get sort options used in SortAction.sort method\r\n     * @return {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\r\n     */\r\n    getSortOptions(){\r\n\r\n        const options = [];\r\n\r\n        //initial path is required\r\n        if(this.path){\r\n\r\n            options.push({\r\n                path: this.path,\r\n                dataType: this.dataType,\r\n                order: this.order,\r\n                ignoreRegex: this.ignoreRegex,\r\n                dateTimeFormat: this.dateTimeFormat\r\n            });\r\n\r\n            for(let index = 1; index <= this.multipleSortsNumber; index++){\r\n\r\n                options.push({\r\n                    path: this['path' + index],\r\n                    dataType: this['dataType' + index],\r\n                    order: this['order' + index],\r\n                    ignoreRegex: this['ignoreRegex' + index],\r\n                    dateTimeFormat: this['dateTimeFormat' + index]\r\n                });\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * check if current base sort control has the same properties like the specified base sort control\r\n     * @param {BaseSortControl} baseSortControl\r\n     * @return {boolean}\r\n     */\r\n    isEqualTo(baseSortControl){\r\n\r\n        let isEqual = true;\r\n\r\n        const props = ['path', 'dataType', 'order', 'regex', 'dateTimeFormat'];\r\n\r\n        for(let i=0; i<props.length; i++){\r\n\r\n            isEqual = isEqual && this[props[i]] === baseSortControl[props[i]];\r\n        }\r\n\r\n        isEqual = isEqual && this.multipleSortsNumber === baseSortControl.multipleSortsNumber;\r\n\r\n        for(let i=1; i <= this.multipleSortsNumber; i++){\r\n\r\n            for(let k=0; k<props.length; k++){\r\n\r\n                isEqual = isEqual && this[props[k] + i] === baseSortControl[props[k] + i];\r\n            }\r\n        }\r\n\r\n        return isEqual;\r\n    }\r\n}\r\n\r\nexport default BaseSortControl;\r\n","const SELECTED_CLASS = 'jplist-selected';\r\n\r\n/**\r\n * buttons mixin\r\n * used for multiple inheritance\r\n * usage example:\r\n * class ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup)\r\n * @param {class} superclass\r\n * @return {class}\r\n */\r\nconst ButtonsMixin = superclass => class extends superclass {\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n\r\n        this.checkboxes = [];\r\n        this.radios = [];\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BasePathFilterControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const baseButtonControl = super.addControl(control);\r\n\r\n        //get additional control properties\r\n        baseButtonControl.selected = baseButtonControl.element.getAttribute('data-selected') === 'true';\r\n        baseButtonControl.mode = baseButtonControl.element.getAttribute('data-mode') || 'radio';\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(baseButtonControl.id){\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseButtonControl.id);\r\n\r\n            if(deepLinkParam){\r\n                baseButtonControl.selected = deepLinkParam.value === '1';\r\n            }\r\n        }\r\n\r\n        if(baseButtonControl.mode === 'radio'){\r\n\r\n            this.radios.push(baseButtonControl);\r\n            this.handleRadios();\r\n        }\r\n\r\n        if(baseButtonControl.mode === 'checkbox'){\r\n\r\n            this.checkboxes.push(baseButtonControl);\r\n            this.handleCheckboxes();\r\n        }\r\n\r\n        /**\r\n         * on control click -> change the selected control\r\n         */\r\n        baseButtonControl.element.addEventListener('click', e => {\r\n\r\n            e.preventDefault();\r\n\r\n            if(baseButtonControl.mode === 'checkbox'){\r\n\r\n                baseButtonControl.selected = !baseButtonControl.selected;\r\n\r\n                this.checkboxes.forEach(cb => {\r\n\r\n                    if(cb.isEqualTo(baseButtonControl)){\r\n                        cb.selected = baseButtonControl.selected;\r\n                    }\r\n                });\r\n\r\n                this.handleCheckboxes();\r\n            }\r\n\r\n            if(baseButtonControl.mode === 'radio'){\r\n\r\n                for (let radio of this.radios) {\r\n                    radio.selected = false;\r\n                }\r\n\r\n                baseButtonControl.selected = true;\r\n\r\n                this.handleRadios();\r\n            }\r\n\r\n            if(window.jplist) {\r\n\r\n                window.jplist.refresh(this.group);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle checkbox mode controls\r\n     */\r\n    handleCheckboxes(){\r\n\r\n        for(let cb of this.checkboxes){\r\n\r\n            if(cb.selected){\r\n                cb.element.classList.add(SELECTED_CLASS);\r\n            }\r\n            else{\r\n                cb.element.classList.remove(SELECTED_CLASS);\r\n            }\r\n\r\n            cb.element.checked = cb.selected;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the latest selected radio\r\n     * @return {BasePathFilterControl} latestSelectedRadio\r\n     */\r\n    getLastSelectedRadio(){\r\n\r\n        let latestSelectedRadio = null;\r\n\r\n        //find the latest selected radio\r\n        for (let radio of this.radios) {\r\n\r\n            if (radio.selected) {\r\n                latestSelectedRadio = radio;\r\n            }\r\n        }\r\n\r\n        return latestSelectedRadio;\r\n    }\r\n\r\n    /**\r\n     * handle radio buttons\r\n     */\r\n    handleRadios(){\r\n\r\n        if(this.radios.length > 0) {\r\n\r\n            let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n            //remove selected from all radios\r\n            for (let radio of this.radios) {\r\n\r\n                radio.selected = false;\r\n                radio.element.classList.remove(SELECTED_CLASS);\r\n            }\r\n\r\n            if(latestSelectedRadio) {\r\n\r\n                this.radios.forEach(radio => {\r\n\r\n                    if(radio.isEqualTo(latestSelectedRadio)){\r\n                        radio.selected = true;\r\n                        radio.element.checked = true;\r\n                        radio.element.classList.add(SELECTED_CLASS);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n        const cbArr = this.checkboxes.map(cb => {\r\n\r\n            if(cb.id){\r\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\r\n            }\r\n            else{\r\n                return '';\r\n            }\r\n\r\n        }).filter(str => str !== '');\r\n\r\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\r\n\r\n        const combined = cbArr.concat(radioArr);\r\n        const unique = Array.from(new Set(combined));\r\n        return unique.join('&');\r\n    }\r\n};\r\n\r\nexport default ButtonsMixin;","import BaseControl from '../base.control';\r\n\r\n/**\r\n * base path filter control\r\n */\r\nclass BasePathFilterControl extends BaseControl{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {HTMLElement} element\r\n     */\r\n    constructor(element){\r\n        super(element);\r\n\r\n        if(element){\r\n\r\n            /**\r\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\r\n             * @type {string}\r\n             */\r\n            this.path = (element.getAttribute('data-path') || '').trim();\r\n\r\n            /**\r\n             * defines if path is inverted; if true, the path filter returns all items that DON'T contain the specified path\r\n             * @type {string}\r\n             */\r\n            this.isInverted = (element.getAttribute('data-inverted') || '').toLowerCase().trim() === 'true';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get path filter options used in FilterAction.pathFilter method\r\n     * @return {Array.<{object}>} options\r\n     */\r\n    getPathFilterOptions(){\r\n\r\n        return {\r\n            path: this.path,\r\n            isInverted: this.isInverted\r\n        };\r\n    }\r\n\r\n    /**\r\n     * check if current control has the same properties like the specified control\r\n     * @param {BasePathFilterControl} control\r\n     * @return {boolean}\r\n     */\r\n    isEqualTo(control){\r\n        return this.path === control.path && this.isInverted === control.isInverted;\r\n    }\r\n}\r\n\r\nexport default BasePathFilterControl;","const SELECTED_CLASS = 'jplist-selected';\r\n\r\n/**\r\n * checkbox mixin\r\n * used for multiple inheritance\r\n * usage example:\r\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\r\n * @param {class} superclass\r\n * @return {class}\r\n */\r\nconst CheckboxMixin = superclass => class extends superclass {\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n\r\n        this.checkboxes = [];\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BasePathFilterControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const baseControl = super.addControl(control);\r\n\r\n        //get additional control properties\r\n        baseControl.selected = baseControl.element.checked;\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(baseControl.id){\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\r\n\r\n            if(deepLinkParam){\r\n                baseControl.selected = deepLinkParam.value === '1';\r\n            }\r\n        }\r\n\r\n        this.checkboxes.push(baseControl);\r\n        this.handleCheckboxes();\r\n\r\n        /**\r\n         * on control change -> update the selected control\r\n         */\r\n        baseControl.element.addEventListener('change', e => {\r\n\r\n            e.preventDefault();\r\n\r\n            baseControl.selected = !baseControl.selected;\r\n\r\n            this.checkboxes.forEach(cb => {\r\n\r\n                if(cb.isEqualTo(baseControl)){\r\n                    cb.selected = baseControl.selected;\r\n                }\r\n            });\r\n\r\n            this.handleCheckboxes();\r\n\r\n            if(window.jplist) {\r\n\r\n                window.jplist.refresh(this.group);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle checkbox mode controls\r\n     */\r\n    handleCheckboxes(){\r\n\r\n        for(let cb of this.checkboxes){\r\n\r\n            if(cb.selected){\r\n                cb.element.classList.add(SELECTED_CLASS);\r\n            }\r\n            else{\r\n                cb.element.classList.remove(SELECTED_CLASS);\r\n            }\r\n\r\n            cb.element.checked = cb.selected;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n        const cbArr = this.checkboxes.map(cb => {\r\n\r\n            if(cb.id){\r\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\r\n            }\r\n            else{\r\n                return '';\r\n            }\r\n\r\n        }).filter(str => str !== '');\r\n        const unique = Array.from(new Set(cbArr));\r\n        return unique.join('&');\r\n    }\r\n};\r\n\r\nexport default CheckboxMixin;","const SELECTED_CLASS = 'jplist-selected';\r\n\r\n/**\r\n * radio buttons mixin\r\n * used for multiple inheritance\r\n * usage example:\r\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\r\n * @param {class} superclass\r\n * @return {class}\r\n */\r\nconst RadioButtonsMixin = superclass => class extends superclass {\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n\r\n        this.radios = [];\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BasePathFilterControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const baseControl = super.addControl(control);\r\n\r\n        //get additional control properties\r\n        baseControl.selected = baseControl.element.checked;\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(baseControl.id){\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\r\n\r\n            if(deepLinkParam){\r\n                baseControl.selected = deepLinkParam.value === '1';\r\n            }\r\n        }\r\n\r\n        this.radios.push(baseControl);\r\n        this.handleRadios();\r\n\r\n        /**\r\n         * on control change -> update the selected control\r\n         */\r\n        baseControl.element.addEventListener('change', e => {\r\n\r\n            e.preventDefault();\r\n\r\n            for (let radio of this.radios) {\r\n                radio.selected = false;\r\n            }\r\n\r\n            baseControl.selected = true;\r\n\r\n            this.handleRadios();\r\n\r\n            if(window.jplist) {\r\n\r\n                window.jplist.refresh(this.group);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get the latest selected radio\r\n     * @return {BasePathFilterControl} latestSelectedRadio\r\n     */\r\n    getLastSelectedRadio(){\r\n\r\n        let latestSelectedRadio = null;\r\n\r\n        //find the latest selected radio\r\n        for (let radio of this.radios) {\r\n\r\n            if (radio.selected) {\r\n                latestSelectedRadio = radio;\r\n            }\r\n        }\r\n\r\n        return latestSelectedRadio;\r\n    }\r\n\r\n    /**\r\n     * handle radio buttons\r\n     */\r\n    handleRadios(){\r\n\r\n        if(this.radios.length > 0) {\r\n\r\n            let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n            //remove selected from all radios\r\n            for (let radio of this.radios) {\r\n\r\n                radio.selected = false;\r\n                radio.element.classList.remove(SELECTED_CLASS);\r\n            }\r\n\r\n            if(latestSelectedRadio) {\r\n\r\n                this.radios.forEach(radio => {\r\n\r\n                    if(radio.isEqualTo(latestSelectedRadio)){\r\n                        radio.selected = true;\r\n                        radio.element.checked = true;\r\n                        radio.element.classList.add(SELECTED_CLASS);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\r\n        const unique = Array.from(new Set(radioArr));\r\n        return unique.join('&');\r\n    }\r\n};\r\n\r\nexport default RadioButtonsMixin;","import BaseControlsGroup from '../base-controls-group';\r\nimport BaseRangeFilterControl from '../../controls/filter/base-range-filter.control';\r\n\r\n/**\r\n * represents a group of range filter controls with the same data-name and data-group attributes\r\n */\r\nclass BaseRangeFilterControlsGroup extends BaseControlsGroup{\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     * @return {BaseRangeFilterControl|null}\r\n     */\r\n    addControl(control){\r\n\r\n        if(control.name !== this.name || control.group !== this.group){\r\n            return null;\r\n        }\r\n\r\n        const baseRangeFilterControl = new BaseRangeFilterControl(control.element);\r\n\r\n        this.controls.push(baseRangeFilterControl);\r\n\r\n        return baseRangeFilterControl;\r\n    }\r\n\r\n    /**\r\n     * get range filter options from all controls in the group\r\n     * @return {Array.<object>} range filer options\r\n     */\r\n    getRangeFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        for(let control of this.controls){\r\n            options = options.concat(control.getRangeFilterOptions());\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n}\r\n\r\nexport default BaseRangeFilterControlsGroup;\r\n","/*\r\n\r\n           |----\r\n           |  /\r\n           |  \\\r\n           |----\r\n           |\r\n          /*\\\r\n         // \\\\\r\n        //   \\\\\r\n       //=====\\\\\r\n      //       \\\\\r\n----| |=========| |----\r\n \\  | |         | |  /\r\n /  | |    []   | |  \\\r\n----| |         | |----\r\n    | |    []   | |\r\n   /=\\|         |/=\\\r\n  //=\\\\    []   //=\\\\\r\n //===\\\\       //===\\\\\r\n//=====\\\\     //=====\\\\\r\n||=====||=====||=====||\r\n-----------------------\r\n|||||||||||||||||||||||\r\n-----------------------\r\n||       *****       ||\r\n||      |||||||      ||\r\n||     ||  |  ||     ||\r\n||    ||   |   ||    ||\r\n||    ||  (|)  ||    ||\r\n||   ||    |    ||   ||\r\n||   ||    |    ||   ||\r\n**===================**/\r\n\r\nimport jPList from './jplist';\r\n\r\n//sort\r\nimport HiddenSortControl from './controls/sort/hidden-sort/hidden-sort.control';\r\nimport ButtonsSortControl from './controls/sort/buttons-sort/buttons-sort.control';\r\nimport RadioButtonsSortControl from './controls/sort/radio-buttons-sort/radio-buttons-sort.control';\r\nimport CheckboxSortControl from './controls/sort/checkbox-sort/checkbox-sort.control';\r\nimport SelectSortControl from './controls/sort/select-sort/select-sort.control';\r\nimport DropdownSortControl from './controls/sort/dropdown-sort/dropdown-sort.control';\r\n\r\n//pagination\r\nimport PaginationControl from './controls/pagination/pagination.control';\r\n\r\n//text filter\r\nimport TextboxFilterControl from './controls/filter/text-filters/textbox-filter/textbox-filter.control';\r\nimport CheckboxTextFilterControl from './controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control';\r\nimport RadioButtonsTextFilterControl from './controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control';\r\nimport ButtonsTextFilterControl from './controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control';\r\n\r\n//path filter\r\nimport SelectFilterControl from './controls/filter/path-filters/select-filter/select-filter.control';\r\nimport CheckboxPathFilterControl from './controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control';\r\nimport RadioButtonsPathFilterControl from './controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control';\r\nimport ButtonsPathFilterControl from './controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control';\r\nimport DropdownFilterControl from './controls/filter/path-filters/dropdown-filter/dropdown-filter.control';\r\n\r\n//range filter\r\nimport ButtonsRangeFilter from './controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control';\r\nimport RangeSliderFilter from './controls/filter/range-filters/slider-range-filter/slider-range-filter.control';\r\n\r\n//other\r\nimport NoResultsControl from './controls/no-results/no-results.control';\r\nimport DropdownControl from './controls/base/controls/dropdown/base-dropdown.control';\r\nimport LayoutControl from './controls/layout/layout.control';\r\nimport ResetControl from './controls/reset/reset.control';\r\n\r\n(() => {\r\n    'use strict';\r\n\r\n    //custom events polyfill for IE 10+\r\n    //https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\r\n    if (typeof window.CustomEvent !== 'function' ){\r\n\r\n        const CustomEvent = (event, params) => {\r\n            params = params || { bubbles: false, cancelable: false, detail: undefined };\r\n            var evt = document.createEvent( 'CustomEvent' );\r\n            evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\r\n            return evt;\r\n        };\r\n\r\n        CustomEvent.prototype = window.Event.prototype;\r\n        window.CustomEvent = CustomEvent;\r\n    }\r\n\r\n    /**\r\n     * global jplist function, one per page\r\n     */\r\n    window.jplist = window.jplist || {};\r\n\r\n    /**\r\n     * registered control types\r\n     * @type {Map}\r\n     */\r\n    window.jplist.controlTypes = window.jplist.controlTypes || new Map([\r\n        ['hidden-sort', HiddenSortControl],\r\n        ['sort-buttons', ButtonsSortControl],\r\n        ['radio-buttons-sort', RadioButtonsSortControl],\r\n        ['checkbox-sort', CheckboxSortControl],\r\n        ['select-sort', SelectSortControl],\r\n        ['dropdown-sort', DropdownSortControl],\r\n\r\n        ['pagination', PaginationControl],\r\n\r\n        ['textbox-filter', TextboxFilterControl],\r\n        ['checkbox-text-filter', CheckboxTextFilterControl],\r\n        ['radio-buttons-text-filter', RadioButtonsTextFilterControl],\r\n        ['buttons-text-filter', ButtonsTextFilterControl],\r\n\r\n        ['select-filter', SelectFilterControl],\r\n        ['dropdown-filter', DropdownFilterControl],\r\n        ['checkbox-path-filter', CheckboxPathFilterControl],\r\n        ['radio-buttons-path-filter', RadioButtonsPathFilterControl],\r\n        ['buttons-path-filter', ButtonsPathFilterControl],\r\n\r\n        ['buttons-range-filter', ButtonsRangeFilter],\r\n        ['slider-range-filter', RangeSliderFilter],\r\n\r\n        ['no-results', NoResultsControl],\r\n        ['dropdown', DropdownControl],\r\n        ['layout', LayoutControl],\r\n        ['reset', ResetControl]\r\n    ]);\r\n\r\n    let jplist = new jPList();\r\n\r\n    /**\r\n     * external api\r\n     */\r\n    window.jplist.init = jplist.init.bind(jplist);\r\n    window.jplist.refresh = jplist.refresh.bind(jplist);\r\n    window.jplist.resetControls = jplist.resetControls.bind(jplist);\r\n\r\n})();","import ContentManager from './content/content-manager';\r\n\r\n/**\r\n * the main jPList class\r\n */\r\nexport default class jPList{\r\n\r\n    /**\r\n     * API: initialize jPList controls + elements from outside\r\n     * @param {Object} options\r\n     */\r\n    init(options){\r\n\r\n        this.settings = Object.assign({}, {\r\n\r\n            //storage\r\n            storage: '', //'', 'localStorage', 'sessionStorage', 'cookies'\r\n            storageName: 'jplist',\r\n            cookiesExpiration: -1, //cookies expiration in minutes (-1 = cookie expires when browser is closed)\r\n\r\n            //deep links\r\n            deepLinking: false,\r\n            hashStart: '#' //the start of the hash part, for example it may be '#!key='\r\n\r\n        }, options);\r\n\r\n        //find all controls split by data-group and data-name\r\n        this.controls = ContentManager.splitByGroupAndName(this.settings, document.body);\r\n\r\n        //find all jplist groups\r\n        this.elements = document.querySelectorAll('[data-jplist-group]');\r\n\r\n        //get from each group the data about its root and items;\r\n        //the received structure is: Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>}>]\r\n        this.groups = ContentManager.findGroups(this.elements);\r\n\r\n        let items = [...document.querySelectorAll('[data-jplist-item]')];\r\n\r\n        //set jPList index for every element\r\n        //it's used to return to the default browser sorting if needed\r\n        for(let jplistIndex = 0; jplistIndex < items.length; jplistIndex++){\r\n\r\n            items[jplistIndex].jplistIndex = jplistIndex;\r\n        }\r\n\r\n        //first refresh\r\n        this.refresh('');\r\n    }\r\n\r\n    /**\r\n     * API: apply controls on content\r\n     * @param {string=} groupName - optional group name\r\n     */\r\n    refresh(groupName = ''){\r\n        ContentManager.apply(this.settings, this.controls, this.groups, groupName);\r\n    }\r\n\r\n    /**\r\n     * API: reset all jplist controls and apply them on content\r\n     */\r\n    resetControls(groupName = ''){\r\n\r\n        if(this.controls) {\r\n\r\n            //this.controls is a Map: [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\r\n            for (let [groupName, groupControls] of this.controls) {\r\n\r\n                for (let group of groupControls) {\r\n\r\n                    for(let control of group.controls){\r\n\r\n                        if (!control.element || !control.element.initialHTML) continue;\r\n\r\n                        control.element.outerHTML = control.element.initialHTML;\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //find all controls split by data-group and data-name\r\n        this.controls = ContentManager.splitByGroupAndName(this.settings, document.body);\r\n\r\n        this.refresh(groupName);\r\n    }\r\n\r\n}","import SortAction from '../actions/sort/sort.action';\r\nimport PaginationAction from '../actions/pagination/pagination.action';\r\nimport BaseControl from '../controls/base/controls/base.control';\r\nimport DeepLinksService from '../services/deep-links.service';\r\nimport StorageService from '../services/storage.service';\r\nimport FilterAction from '../actions/filter/filter.action';\r\n\r\n/**\r\n * content manager\r\n */\r\nclass ContentManager{\r\n\r\n    /**\r\n     * apply controls on the content groups\r\n     * @param {Object} settings\r\n     * @param {Map} controls - controls split by data-group and data-name: [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\r\n     * @param {Map} groups - [groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\r\n     * @param {string=} groupName - optional group name; if group name is empty or not provided -> refresh all groups\r\n     */\r\n    static apply(settings, controls, groups, groupName = ''){\r\n\r\n        if(!controls || !groups) return;\r\n\r\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\r\n        for(let [cGroupName, groupValueArr] of groups){\r\n\r\n            if((groupName && groupName === cGroupName) || !groupName){\r\n\r\n                //get controls of this group;\r\n                //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\r\n                const baseControlsGroups = controls.get(cGroupName);\r\n\r\n                //collect sort, pagination and filter options from all controls with the same group name\r\n                const options = ContentManager.collectControlsOptions(baseControlsGroups);\r\n\r\n                //there can be more than one block of items with the same group name\r\n                //each itemsBlock has structure: {root: HTMLElement, items: Array.<HTMLElement>}\r\n                for(let itemsBlock of groupValueArr){\r\n\r\n                    let itemsNumber = itemsBlock.items.length;\r\n\r\n                    //hide all elements moving them to the document fragment\r\n                    let fragment = ContentManager.getItemsFragment(itemsBlock.items);\r\n\r\n                    if(options.sortOptions && options.sortOptions.length > 0) {\r\n\r\n                        //sort the items of the group using sort options of all controls\r\n                        SortAction.sort(itemsBlock.items, options.sortOptions);\r\n                        fragment = ContentManager.getItemsFragment(itemsBlock.items);\r\n                    }\r\n\r\n                    let filtered = itemsBlock.items;\r\n\r\n                    if(options.pathFilterOptions){\r\n\r\n                        for(let pathFilterOption of options.pathFilterOptions){\r\n\r\n                            filtered = FilterAction.pathFilter(filtered, pathFilterOption.path, pathFilterOption.isInverted);\r\n                            itemsNumber = filtered.length;\r\n                            fragment = ContentManager.getItemsFragment(filtered);\r\n                        }\r\n                    }\r\n\r\n                    if(options.rangeFilterOptions){\r\n\r\n                        for(let rangeFilterOption of options.rangeFilterOptions){\r\n\r\n                            filtered = FilterAction.rangeFilter(filtered,\r\n                                rangeFilterOption.path,\r\n                                rangeFilterOption.from,\r\n                                rangeFilterOption.to,\r\n                                rangeFilterOption.min,\r\n                                rangeFilterOption.max);\r\n\r\n                            itemsNumber = filtered.length;\r\n                            fragment = ContentManager.getItemsFragment(filtered);\r\n                        }\r\n                    }\r\n\r\n                    if(options.textFilterOptions){\r\n\r\n                        for(let textFilterOption of options.textFilterOptions){\r\n\r\n                            filtered = FilterAction.textFilter(\r\n                                filtered,\r\n                                textFilterOption.text,\r\n                                textFilterOption.path,\r\n                                textFilterOption.mode,\r\n                                textFilterOption.ignoreRegex);\r\n\r\n                            itemsNumber = filtered.length;\r\n                            fragment = ContentManager.getItemsFragment(filtered);\r\n                        }\r\n                    }\r\n\r\n                    if(options.paginationOptions){\r\n\r\n                        const paginationAction = new PaginationAction(\r\n                            options.paginationOptions.currentPage,\r\n                            options.paginationOptions.itemsPerPage,\r\n                            filtered.length,\r\n                            options.paginationOptions.range\r\n                        );\r\n\r\n                        //setPaginationOptions applies all computed properties of PaginationAction class to the latest pagination control\r\n                        if(baseControlsGroups.length > 0){\r\n\r\n                            for(let bcg of baseControlsGroups){\r\n                                if(bcg.setPaginationOptions){\r\n                                    bcg.setPaginationOptions(paginationAction);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        const paginatedItems = filtered.slice(paginationAction.start, paginationAction.end);\r\n                        itemsNumber = paginatedItems.length;\r\n                        fragment = ContentManager.getItemsFragment(paginatedItems);\r\n                    }\r\n\r\n                    //return to HTML only relevant items\r\n                    itemsBlock.root.appendChild(fragment);\r\n\r\n                    //dispatch the event with different data about state of controls and items\r\n                    ContentManager.sendStateEvent(options, itemsNumber, baseControlsGroups);\r\n                }\r\n\r\n                //if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\r\n                ContentManager.jump(baseControlsGroups);\r\n            }\r\n\r\n        }\r\n\r\n        if(settings.deepLinking) {\r\n\r\n            //update deep link if it's enabled\r\n            ContentManager.updateDeepLink(ContentManager.getDeepLink(controls, groups), settings.hashStart);\r\n        }\r\n        else{\r\n            if(settings.storage){\r\n\r\n                //update storage if it's enabled\r\n                StorageService.set(ContentManager.getDeepLink(controls, groups), settings.storage, settings.storageName, settings.cookiesExpiration);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\r\n     * data-jump=\"any CSS selector or 'top' keyword\"\r\n     * examples: data-jump=\"header\"\r\n     *           data-jump=\".top-bar\"\r\n     *           data-jump=\"#main\"\r\n     *           data-jump=\"top\"\r\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups - [BaseControlsGroup1, BaseControlsGroup2, ...]\r\n     */\r\n    static jump(baseControlsGroups){\r\n\r\n        if(!baseControlsGroups || baseControlsGroups.length <= 0) return;\r\n\r\n        //-1 means no scroll\r\n        let top = -1;\r\n\r\n        //if multiple control in the group have data-jump attribute -> select the upper one\r\n        for(let group of baseControlsGroups) {\r\n\r\n            const path = group.getJumpPath();\r\n\r\n            if(!path) continue;\r\n\r\n            //top is always the upper ))\r\n            if(path === 'top'){\r\n                top = 0;\r\n                break;\r\n            }\r\n\r\n            const groupJumpEl = document.querySelector(path);\r\n\r\n            if(!groupJumpEl) continue;\r\n\r\n            const groupJumpElRect = groupJumpEl.getBoundingClientRect();\r\n\r\n            //make sure element is not hidden or disconnected\r\n            if (!groupJumpEl.width && !groupJumpEl.height && !groupJumpEl.getClientRects().length) continue;\r\n\r\n            const clientTop = document.clientTop || document.body.clientTop || 0;\r\n\r\n            if(top < 0){\r\n\r\n                //select the first jump path as the default value\r\n                top = groupJumpElRect.top + window.pageYOffset - clientTop;\r\n            }\r\n            else{\r\n                if(groupJumpElRect.top + window.pageYOffset - clientTop < top){\r\n                    top = groupJumpElRect.top + window.pageYOffset - clientTop;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(top >= 0){\r\n            window.scroll(0, top);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * send jPList general event with different data about state of controls and items\r\n     * @param {object} options\r\n     * @param {number} itemsNumber\r\n     * @param {BaseControlsGroup} baseControlsGroups\r\n     */\r\n    static sendStateEvent(options, itemsNumber, baseControlsGroups){\r\n\r\n        if(!baseControlsGroups) return;\r\n\r\n        const stateEvent = new CustomEvent('jplist.state');\r\n\r\n        stateEvent.jplistState = {\r\n            options: options,\r\n            itemsNumber: itemsNumber\r\n        };\r\n\r\n        for(let baseControlsGroup of baseControlsGroups){\r\n\r\n            for(let control of baseControlsGroup.controls){\r\n\r\n                control.element.dispatchEvent(stateEvent);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * collect sort, pagination and filter options from all controls with the same group name\r\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups\r\n     * @return {object} sort, pagination and filter objects\r\n     */\r\n    static collectControlsOptions(baseControlsGroups){\r\n\r\n        const options = {\r\n\r\n            //there can be multiple sort options\r\n            sortOptions: [],\r\n\r\n            //there should be only one pagination options object;\r\n            //in case of multiple -> get the latest\r\n            paginationOptions: null,\r\n\r\n            //there can be multiple filter options\r\n            textFilterOptions: [],\r\n            pathFilterOptions: [],\r\n            rangeFilterOptions: []\r\n        };\r\n\r\n        if(!baseControlsGroups) return options;\r\n\r\n        for(let baseControlsGroup of baseControlsGroups){\r\n\r\n            //get sort options only from sort controls\r\n            if(baseControlsGroup.getSortOptions) {\r\n\r\n                //add base control group sort options\r\n                options.sortOptions = options.sortOptions.concat(baseControlsGroup.getSortOptions());\r\n            }\r\n\r\n            //get text filter options only from text filter controls\r\n            if(baseControlsGroup.getTextFilterOptions) {\r\n\r\n                //add base control group sort options\r\n                options.textFilterOptions = options.textFilterOptions.concat(baseControlsGroup.getTextFilterOptions());\r\n            }\r\n\r\n            //get path filter options only from text filter controls\r\n            if(baseControlsGroup.getPathFilterOptions) {\r\n\r\n                //add base control group sort options\r\n                options.pathFilterOptions = options.pathFilterOptions.concat(baseControlsGroup.getPathFilterOptions());\r\n            }\r\n\r\n            //get range filter options only from range filter controls\r\n            if(baseControlsGroup.getRangeFilterOptions) {\r\n\r\n                //add base control group sort options\r\n                options.rangeFilterOptions = options.rangeFilterOptions.concat(baseControlsGroup.getRangeFilterOptions());\r\n            }\r\n\r\n            if(baseControlsGroup.getPaginationOptions) {\r\n                options.paginationOptions = baseControlsGroup.getPaginationOptions();\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * get document fragment with the specified items\r\n     * @param {Array.<HTMLElement>} items\r\n     * @return {DocumentFragment}\r\n     */\r\n    static getItemsFragment(items){\r\n\r\n        const fragment = document.createDocumentFragment();\r\n\r\n        for(let item of items){\r\n            fragment.appendChild(item);\r\n        }\r\n\r\n        return fragment;\r\n    }\r\n\r\n    /**\r\n     * update deep link -> replace it in URL\r\n     * @param {string} deepLink\r\n     * @param {string} hashStart\r\n     */\r\n    static updateDeepLink(deepLink, hashStart = '#'){\r\n\r\n        let hashStr = deepLink.replace(hashStart, '').trim();\r\n\r\n        if(hashStr === ''){\r\n            hashStr = hashStart;\r\n        }\r\n        else{\r\n            hashStr = hashStart + hashStr;\r\n        }\r\n\r\n        if(window.location.hash !== hashStr){\r\n\r\n            const index = window.location.href.indexOf(hashStart);\r\n            let href;\r\n\r\n            if(index === -1){\r\n                href = window.location.href + hashStr;\r\n            }\r\n            else{\r\n                href = window.location.href.substring(0, index) + hashStr;\r\n            }\r\n\r\n            if('replaceState' in window.history){\r\n                window.history.replaceState('', '', href);\r\n            }\r\n            else{\r\n                window.location.replace(href);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update deep link URL according to the current controls states\r\n     * @return {string} deep link\r\n     */\r\n    static getDeepLink(controls, groups){\r\n\r\n        let deeplink = [];\r\n\r\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\r\n        for(let cGroupName of groups.keys()){\r\n\r\n            //get controls of this group;\r\n            //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\r\n            const baseControlsGroups = controls.get(cGroupName);\r\n\r\n            const deepLinkParts = [];\r\n            for(let baseControlsGroup of baseControlsGroups){\r\n\r\n                const dl = baseControlsGroup.getDeepLink();\r\n\r\n                if(dl){\r\n                    deepLinkParts.push(dl);\r\n                }\r\n            }\r\n\r\n            if(deepLinkParts.length > 0){\r\n                deeplink.push('group=' + cGroupName);\r\n                deeplink = deeplink.concat(deepLinkParts);\r\n            }\r\n        }\r\n\r\n        return deeplink.join('&');\r\n    }\r\n\r\n    /**\r\n     * find all groups of elements that should be sorted, filtered, etc.\r\n     * each group defined by data-jplist-group attribute;\r\n     * each element in the group defined by data-jplist-item attribute;\r\n     * @param {HTMLCollection} groups\r\n     * @return {Map} Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\r\n     */\r\n    static findGroups(groups){\r\n\r\n        const groupsMap = new Map();\r\n\r\n        if(!groups){\r\n            return groupsMap;\r\n        }\r\n\r\n        //get all items with data attribute data-jplist-group\r\n        const groupElements = [...groups];\r\n\r\n        for(let groupElement of groupElements){\r\n\r\n            const groupName = groupElement.getAttribute('data-jplist-group');\r\n\r\n            let groupValue = [];\r\n\r\n            if(groupsMap.has(groupName)){\r\n                groupValue = groupsMap.get(groupName);\r\n            }\r\n\r\n            groupValue.push({\r\n\r\n                /**\r\n                 * the root element of the group\r\n                 */\r\n                root: groupElement,\r\n\r\n                /**\r\n                 * all group elements\r\n                 */\r\n                items: [...groupElement.querySelectorAll('[data-jplist-item]')],\r\n\r\n                /**\r\n                 * this fragment used as a container for invisible items\r\n                 */\r\n                fragment: document.createDocumentFragment()\r\n            });\r\n\r\n            groupsMap.set(groupName, groupValue);\r\n        }\r\n\r\n        return groupsMap;\r\n    }\r\n\r\n    /**\r\n     * find all controls defined on page by data-jplist-control attribute;\r\n     * control classes should be registered in window.jplist.controlTypes before using this method:\r\n     * window.jplist.controlTypes = new Map([\r\n     *      ['hidden-sort', HiddenSortControl],\r\n     *      ...\r\n     * ]);\r\n     * @param {HTMLElement} root\r\n     * @return {Array.<BaseControl>}\r\n     */\r\n    static findControls(root){\r\n\r\n        if(!root) return [];\r\n\r\n        const controls = [];\r\n\r\n        //find all control\r\n        const elements = root.querySelectorAll('[data-jplist-control]');\r\n\r\n        if(elements) {\r\n\r\n            for(let element of elements){\r\n\r\n                const controlType = element.getAttribute('data-jplist-control');\r\n\r\n                if(!controlType) continue;\r\n\r\n                element.initialHTML = element.outerHTML;\r\n\r\n                const controlInstance = new BaseControl(element);\r\n                controls.push(controlInstance);\r\n            }\r\n        }\r\n\r\n        return controls;\r\n    }\r\n\r\n    /**\r\n     * split control by their data-group property\r\n     * @param {Array.<BaseControl>} controls\r\n     * @return {Map} [[groupName, controls array], [...], ...]\r\n     */\r\n    static findControlGroups(controls){\r\n\r\n        const map = new Map();\r\n\r\n        if(controls) {\r\n\r\n            for (let control of controls) {\r\n\r\n                let arr = [];\r\n\r\n                if (map.has(control.group)) {\r\n                    arr = map.get(control.group);\r\n                }\r\n\r\n                arr.push(control);\r\n\r\n                map.set(control.group, arr);\r\n            }\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * find controls with the same name\r\n     * @param {object} settings\r\n     * @param {Array.<BaseControl>} controls\r\n     * @return {Map} [[name, BaseControlsGroup], [...]]\r\n     */\r\n    static findSameNameControls(settings, controls){\r\n\r\n        const map = new Map();\r\n\r\n        if(controls){\r\n\r\n            let deepLinkParams = null;\r\n\r\n            if(settings.deepLinking){\r\n                deepLinkParams = DeepLinksService.getUrlParams(window.location.hash, settings.hashStart);\r\n            }\r\n            else{\r\n                if(settings.storage){\r\n\r\n                    const deepLinkSavedInStorage = StorageService.get(settings.storage, settings.storageName);\r\n                    deepLinkParams = DeepLinksService.getUrlParams(deepLinkSavedInStorage, '');\r\n                }\r\n            }\r\n\r\n            for(let control of controls){\r\n\r\n                //control with not defined type should be ignored\r\n                if(!control.type || !window.jplist.controlTypes.has(control.type)) continue;\r\n\r\n                //check if data-type class defined in window.jplist.controlTypes;\r\n                //it should be defined like this:\r\n                //window.jplist.controlTypes = window.jplist.controlTypes || new Map([\r\n                //    ['hidden-sort', HiddenSortControl],\r\n                //    ...\r\n                //]);\r\n                const controlClass = window.jplist.controlTypes.get(control.type);\r\n\r\n                if(controlClass){\r\n\r\n                    let controlGroup = null;\r\n\r\n                    if (map.has(control.name)) {\r\n                        controlGroup = map.get(control.name);\r\n                    }\r\n                    else{\r\n                        controlGroup = new controlClass(control.group, control.name, [], deepLinkParams);\r\n                    }\r\n\r\n                    controlGroup.addControl(control);\r\n\r\n                    map.set(control.name, controlGroup);\r\n                }\r\n            }\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * initialize controls and split them by group and name\r\n     * @param {object} settings\r\n     * @param {HTMLElement} root\r\n     * @return {Map} [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\r\n     */\r\n    static splitByGroupAndName(settings, root){\r\n\r\n        const res = new Map();\r\n\r\n        if(!root) return res;\r\n\r\n        //find all controls: received {Array.<BaseControl>}\r\n        const controls = ContentManager.findControls(root);\r\n\r\n        //split controls by their data-group attributes;\r\n        //the received structure is map: [[groupName, controls array], [...], ...]\r\n        const controlsByGroupNames = ContentManager.findControlGroups(controls);\r\n\r\n        for(let [groupName, groupControls] of controlsByGroupNames){\r\n\r\n            //received {Map} - [[name, BaseControlsGroup], [...]]\r\n            const sameNameControls = ContentManager.findSameNameControls(settings, groupControls);\r\n\r\n            let arr = [];\r\n\r\n            for(let baseControlsGroup of sameNameControls.values()){\r\n                arr.push(baseControlsGroup);\r\n            }\r\n\r\n            res.set(groupName, arr);\r\n        }\r\n\r\n        return res;\r\n    }\r\n}\r\n\r\nexport default ContentManager;","/**\r\n * sort action\r\n */\r\nclass SortAction{\r\n\r\n    /**\r\n     * general multiple sort\r\n     * @param {Array.<HTMLElement>} items\r\n     * @param {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\r\n     * if path = 'default' - the original sort should be kept\r\n     * @return {Array.<HTMLElement>} sorted items\r\n     */\r\n    static sort(items, options){\r\n\r\n        if(!options || options.length <= 0){\r\n\r\n            /**\r\n             * if no options - return to the default browser sort order\r\n             */\r\n            items.sort((item1, item2) => {\r\n                return SortAction.sortByIndex(item1, item2);\r\n            });\r\n\r\n            return items;\r\n        }\r\n\r\n        items.sort((item1, item2) => {\r\n\r\n            /**\r\n             * start recursive helper\r\n             */\r\n            return SortAction.sortHelper(item1, item2, options, 0);\r\n        });\r\n\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * recursive sort helper\r\n     * @param {HTMLElement} item1\r\n     * @param {HTMLElement} item2\r\n     * @param {Array.<Object>} options - structure: {path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}\r\n     * @param {number} optionsIndex\r\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\r\n     */\r\n    static sortHelper(item1, item2, options, optionsIndex){\r\n\r\n        if(!options || options.length <= 0 || optionsIndex >= options.length){\r\n            return 0;\r\n        }\r\n\r\n        let result = 0;\r\n\r\n        const option = options[optionsIndex];\r\n\r\n        if(option.path !== 'default'){\r\n\r\n            switch(option.dataType){\r\n\r\n                case 'number': {\r\n                    result = SortAction.sortNumbers(item1, item2, option.path, option.order);\r\n                    break;\r\n                }\r\n\r\n                case 'datetime': {\r\n                    result = SortAction.sortDateTime(item1, item2, option.path, option.order, option.dateTimeFormat);\r\n                    break;\r\n                }\r\n\r\n                default: {\r\n                    result = SortAction.sortText(item1, item2, option.path, option.order, option.ignoreRegex);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            result = SortAction.sortByIndex(item1, item2);\r\n        }\r\n\r\n        if(result === 0 && optionsIndex + 1 < options.length){\r\n\r\n            //get next result recursive\r\n            result = SortAction.sortHelper(item1, item2, options, optionsIndex + 1);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * sort texts\r\n     * @param {HTMLElement} item1\r\n     * @param {HTMLElement} item2\r\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\r\n     * empty path means the whole element; path shouldn't have 'default' value\r\n     * @param {string=} order - asc or desc\r\n     * @param {string=} ignoreRegex - optional regex that defines charaters that should be ignored before the sorting\r\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\r\n     */\r\n    static sortText(item1, item2, path = '', order = 'asc', ignoreRegex = ''){\r\n\r\n        if(!item1 || !item2){\r\n            return 0;\r\n        }\r\n\r\n        //find elements with the content to sort\r\n        const el1 = path ? item1.querySelector(path) : item1;\r\n        const el2 = path ? item2.querySelector(path) : item2;\r\n\r\n        if(!el1 || !el2){\r\n            return 0;\r\n        }\r\n\r\n        let text1 = el1.textContent.trim().toLowerCase();\r\n        let text2 = el2.textContent.trim().toLowerCase();\r\n\r\n        if(ignoreRegex){\r\n\r\n            //regex expression that is used to remove irrelevant characters\r\n            const regexExpr = new RegExp(ignoreRegex, 'ig');\r\n            text1 = text1.replace(regexExpr, '').trim();\r\n            text2 = text2.replace(regexExpr, '').trim();\r\n        }\r\n\r\n        if(text1 === text2){\r\n            return 0;\r\n        }\r\n\r\n        if(!order){\r\n            order = 'asc';\r\n        }\r\n\r\n        //compare languages other than English\r\n        if(''.localeCompare){\r\n\r\n            if (order === 'asc') {\r\n                return text1.localeCompare(text2);\r\n            }\r\n            else {\r\n                return text2.localeCompare(text1);\r\n            }\r\n        }\r\n        else{\r\n            if (order === 'asc') {\r\n                return text1 > text2 ? 1 : -1;\r\n            }\r\n            else {\r\n                return text1 < text2 ? 1 : -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sort numbers\r\n     * @param {HTMLElement} item1\r\n     * @param {HTMLElement} item2\r\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\r\n     * empty path means the whole element; path shouldn't have 'default' value\r\n     * @param {string=} order - asc or desc\r\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\r\n     */\r\n    static sortNumbers(item1, item2, path = '', order = 'asc'){\r\n\r\n        if(!item1 || !item2){\r\n            return 0;\r\n        }\r\n\r\n        //find elements with the content to sort\r\n        const el1 = path ? item1.querySelector(path) : item1;\r\n        const el2 = path ? item2.querySelector(path) : item2;\r\n\r\n        if(!el1 || !el2){\r\n            return 0;\r\n        }\r\n\r\n        let number1 = el1.textContent.trim().toLowerCase();\r\n        let number2 = el2.textContent.trim().toLowerCase();\r\n\r\n        //remove other characters\r\n        number1 = parseFloat(number1.replace(/[^-0-9.]+/g,''));\r\n        number2 = parseFloat(number2.replace(/[^-0-9.]+/g,''));\r\n\r\n        if(isNaN(number1) || isNaN(number2)){\r\n\r\n            if(isNaN(number1) && isNaN(number2)){\r\n                return 0;\r\n            }\r\n            else {\r\n                return isNaN(number1) ? 1 : -1;\r\n            }\r\n        }\r\n\r\n        if(number1 === number2){\r\n            return 0;\r\n        }\r\n\r\n        if(!order){\r\n            order = 'asc';\r\n        }\r\n\r\n        if(order === 'asc'){\r\n            return number1 - number2;\r\n        }\r\n        else{\r\n            return number2 - number1;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * sort by initial element index\r\n     * @param {HTMLElement} item1\r\n     * @param {HTMLElement} item2\r\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\r\n     */\r\n    static sortByIndex(item1, item2){\r\n\r\n        if(!item1 || !item2){\r\n            return 0;\r\n        }\r\n\r\n        let number1 = Number(item1.jplistIndex);\r\n        let number2 = Number(item2.jplistIndex);\r\n\r\n        if(isNaN(number1) || isNaN(number2)){\r\n            return 0;\r\n        }\r\n\r\n        return number1 - number2;\r\n    }\r\n\r\n    // ---------------- DATE TIME ------------------------\r\n\r\n    /**\r\n     * month name that can be used in date time strings\r\n     * from 0 for January to 11 for December\r\n     * @returns {Array.<Array.<string>>}\r\n     */\r\n    static get months() {\r\n\r\n        return [\r\n            ['january', 'jan', 'jan.'],\r\n            ['february', 'feb', 'feb.'],\r\n            ['march', 'mar', 'mar.'],\r\n            ['april', 'apr', 'apr.'],\r\n            ['may'],\r\n            ['june', 'jun.'],\r\n            ['july', 'jul', 'jul.'],\r\n            ['august', 'aug', 'aug.'],\r\n            ['september', 'sep', 'sep.'],\r\n            ['october', 'oct', 'oct.'],\r\n            ['november', 'nov', 'nov.'],\r\n            ['december', 'dec', 'dec.']\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * sort datetime\r\n     * @param {HTMLElement} item1\r\n     * @param {HTMLElement} item2\r\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\r\n     * empty path means the whole element; path shouldn't have 'default' value;\r\n     * @param {string=} order - asc or desc\r\n     * @param {string=} dateTimeFormat - for example, {month}/{day}/{year}\r\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\r\n     */\r\n    static sortDateTime(item1, item2, path = '', order = 'asc', dateTimeFormat = ''){\r\n\r\n        if(!item1 || !item2){\r\n            return 0;\r\n        }\r\n\r\n        //find elements with the content to sort\r\n        const el1 = path ? item1.querySelector(path) : item1;\r\n        const el2 = path ? item2.querySelector(path) : item2;\r\n\r\n        if(!el1 || !el2){\r\n            return 0;\r\n        }\r\n\r\n        let datetime1 = el1.textContent.trim().toLowerCase();\r\n        let datetime2 = el2.textContent.trim().toLowerCase();\r\n\r\n        let date1;\r\n        let date2;\r\n\r\n        dateTimeFormat = dateTimeFormat.trim();\r\n\r\n        if(!dateTimeFormat){\r\n\r\n            date1 = new Date(Date.parse(datetime1));\r\n            date2 = new Date(Date.parse(datetime2));\r\n        }\r\n        else{\r\n            date1 = SortAction.getDateFromString(datetime1, dateTimeFormat);\r\n            date2 = SortAction.getDateFromString(datetime2, dateTimeFormat);\r\n        }\r\n\r\n        if(date1.getTime() === date2.getTime()){\r\n            return 0;\r\n        }\r\n\r\n        if(!order){\r\n            order = 'asc';\r\n        }\r\n\r\n        if(order === 'asc'){\r\n            return date1.getTime() > date2.getTime() ? 1 : -1;\r\n        }\r\n        else{\r\n            return date1.getTime() < date2.getTime() ? 1 : -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get date time from string that contains wildcards like {year}, {month}, {day}, {hour}, {min}, {sec}\r\n     * @param {string} dateTimeString - for example, 01/12/2017\r\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year}\r\n     * @return {Date}\r\n     */\r\n    static getDateFromString(dateTimeString, dateTimeFormat){\r\n\r\n        //remove special characters\r\n        dateTimeFormat = dateTimeFormat.replace(/\\./g, '\\\\.');\r\n        dateTimeFormat = dateTimeFormat.replace(/\\(/g, '\\\\(');\r\n        dateTimeFormat = dateTimeFormat.replace(/\\)/g, '\\\\)');\r\n        dateTimeFormat = dateTimeFormat.replace(/\\[/g, '\\\\[');\r\n        dateTimeFormat = dateTimeFormat.replace(/\\]/g, '\\\\]');\r\n\r\n        //get year\r\n        let year = SortAction.getDateWildcardValue(dateTimeFormat, '{year}', dateTimeString);\r\n        year = Number(year) || 1900;\r\n\r\n        //get day\r\n        let day = SortAction.getDateWildcardValue(dateTimeFormat, '{day}', dateTimeString);\r\n        day = Number(day) || 1;\r\n\r\n        //get month: integer value representing the month, beginning with 0 for January to 11 for December\r\n        let month = SortAction.getDateWildcardValue(dateTimeFormat, '{month}', dateTimeString);\r\n        month = SortAction.getMonthByWildcard(month);\r\n        if(month === -1){\r\n            month = 0;\r\n        }\r\n\r\n        //get hour: (0-23)\r\n        let hour = SortAction.getDateWildcardValue(dateTimeFormat, '{hour}', dateTimeString);\r\n        hour = Number(hour) || 0;\r\n\r\n        //get minute: (0-59)\r\n        let minute = SortAction.getDateWildcardValue(dateTimeFormat, '{min}', dateTimeString);\r\n        minute = Number(minute) || 0;\r\n\r\n        //get second: (0-59)\r\n        let second = SortAction.getDateWildcardValue(dateTimeFormat, '{sec}', dateTimeString);\r\n        second = Number(second) || 0;\r\n\r\n        return new Date(year, month, day, hour, minute, second);\r\n    }\r\n\r\n    /**\r\n     * get datetime format section/item\r\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year} or any other string with wildcards; dateTimeFormat should not contain special characters like . ( ) [ ]\r\n     * @param {string} wildcard - {year}|{month}|{day}|{hour}|{min}|{sec}\r\n     * @param {string} datetimeString - for example, 01/15/2017\r\n     * @return {string|null} - returns the specified wildcard value, for example 2017 for {year} wildcard\r\n     */\r\n    static getDateWildcardValue(dateTimeFormat, wildcard, datetimeString){\r\n\r\n        let result = null;\r\n\r\n        //replace the specified wildcard with the (.*)\r\n        //for example, for wildcard=year the string can be: '{month}/{day}/{year}' => '{month}/{day}/(.*)'\r\n        let replacedFormat = dateTimeFormat.replace(wildcard, '(.*)');\r\n\r\n        //replace all other wildcard with .*\r\n        //for example above it will be: '.*/.*/(.*)'\r\n        const regexValue = replacedFormat.replace(/{year}|{month}|{day}|{hour}|{min}|{sec}/g, '.*');\r\n\r\n        //for example, run '.*/.*/(.*)' regex on 01/15/2017\r\n        const regex = new RegExp(regexValue, 'g');\r\n        const match = regex.exec(datetimeString);\r\n\r\n        //we get the wildcard value from the given string: 2017 in the example above\r\n        if(match && match.length > 1){\r\n            result = match[1];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * get month number by string\r\n     * @param {string} monthNumberOrName - month number or name from date time string\r\n     * @return {number} from 0 for January to 11 for December; -1 if not found;\r\n     */\r\n    static getMonthByWildcard(monthNumberOrName){\r\n\r\n        monthNumberOrName = monthNumberOrName ? monthNumberOrName.trim().toLowerCase() : '';\r\n\r\n        let monthIndex = Number(monthNumberOrName);\r\n\r\n        if(!isNaN(monthIndex)){\r\n\r\n            if(monthIndex - 1 < 0){\r\n                return -1;\r\n            }\r\n            else {\r\n                return monthIndex - 1;\r\n            }\r\n        }\r\n\r\n        //find month index by value\r\n        return SortAction.months.findIndex((monthAliasesArray) => {\r\n\r\n            return monthAliasesArray.find(monthAlias => {\r\n                return monthAlias.trim() === monthNumberOrName;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default SortAction;","/**\r\n * pagination\r\n */\r\nclass PaginationAction{\r\n\r\n    /**\r\n     * Pagination\r\n     * @constructor\r\n     * @param {number} currentPage\r\n     * @param {number} itemsPerPage\r\n     * @param {number} itemsNumber\r\n     * @param {number} range\r\n     */\r\n    constructor(currentPage, itemsPerPage, itemsNumber, range){\r\n\r\n        this.itemsNumber = Number(itemsNumber) || 0;\r\n        this.itemsPerPage = Number.isInteger(itemsPerPage) ? Number(itemsPerPage) : this.itemsNumber;\r\n\r\n        if(this.itemsPerPage === 0){\r\n            this.itemsPerPage = itemsNumber;\r\n        }\r\n\r\n        this.pagesNumber = this.itemsPerPage === 0 ? 0 : Math.ceil(this.itemsNumber/this.itemsPerPage);\r\n\r\n        //validate current page\r\n        this.currentPage = Number(currentPage) || 0;\r\n\r\n        if(this.currentPage > this.pagesNumber - 1){\r\n            this.currentPage = 0;\r\n        }\r\n\r\n        this.start = this.currentPage * this.itemsPerPage;\r\n        this.end = this.start + this.itemsPerPage;\r\n\r\n        //validate the end\r\n        if(this.end > this.itemsNumber){\r\n            this.end = this.itemsNumber;\r\n        }\r\n\r\n        this.prevPage = this.currentPage <= 0 ? 0 : this.currentPage - 1;\r\n        this.nextPage = this.pagesNumber === 0 ? 0 : (this.currentPage >= this.pagesNumber - 1 ? this.pagesNumber - 1 : this.currentPage + 1);\r\n\r\n        this.range = Number(range) || 10;\r\n\r\n        const halfRange = Math.ceil((this.range - 1) / 2);\r\n        this.rangeStart = this.currentPage - halfRange;\r\n        this.rangeEnd = Math.min(this.rangeStart + this.range - 1, this.pagesNumber - 1);\r\n\r\n        if(this.rangeStart <= 0){\r\n            this.rangeStart = 0;\r\n            this.rangeEnd = Math.min(this.range - 1, this.pagesNumber - 1);\r\n        }\r\n\r\n        if(this.rangeEnd >= this.pagesNumber - 1){\r\n            this.rangeStart = Math.max(this.pagesNumber - this.range, 0);\r\n            this.rangeEnd = this.pagesNumber - 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport default PaginationAction;","class DeepLinksService{\r\n\r\n    /**\r\n     * take param1=val1 and return an object of the structure { key: param1, value: val1 }\r\n     * @param param {string}\r\n     * @return {object|null}\r\n     */\r\n    static getParam(param){\r\n\r\n        if(!param) return null;\r\n\r\n        const parts = param.split('=');\r\n\r\n        if(parts.length < 2) return null;\r\n\r\n        return {\r\n            key: parts[0].trim().toLowerCase(),\r\n            value: parts[1].trim().toLowerCase()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * get deep link parameters from URL\r\n     * @param {string} hash - window.location.hash value\r\n     * @param {string=} hashStart - optional value of hash start; by default it's '#', but can be changed for example to be '#!'\r\n     * @return {Map} params - structure: [groupName, [{key, value}, ...]], ...\r\n     *\r\n     * URL structure example:\r\n     * https://www.example.com?param1=val1&param2=val2#group=gr1&param1=val1&param2=val2&group=gr2&param1=val1&param2=val2...\r\n     */\r\n    static getUrlParams(hash, hashStart = '#'){\r\n\r\n        const paramsMap = new Map();\r\n\r\n        if(!hash) return paramsMap;\r\n\r\n        const formattedHash = window.decodeURIComponent(hash.replace(hashStart, '')).trim().toLowerCase();\r\n\r\n        if(!formattedHash) return paramsMap;\r\n\r\n        const params = formattedHash.split('&');\r\n\r\n        let currentGroupName = '';\r\n\r\n        for(let pair of params){\r\n\r\n            const param = DeepLinksService.getParam(pair);\r\n\r\n            if(!param) continue;\r\n\r\n            if(param.key === 'group'){\r\n\r\n                currentGroupName = param.value;\r\n\r\n                //insert group name if doesn't exist\r\n                if(!paramsMap.has(param.value)){\r\n\r\n                    paramsMap.set(param.value, []);\r\n                }\r\n            }\r\n            else{\r\n                const groupValues = paramsMap.get(currentGroupName);\r\n\r\n                if(groupValues){\r\n                    groupValues.push(param);\r\n                }\r\n\r\n                paramsMap.set(currentGroupName, groupValues);\r\n            }\r\n        }\r\n\r\n        return paramsMap;\r\n    }\r\n}\r\n\r\nexport default DeepLinksService;","/**\r\n * local storage, session storage, cookies\r\n */\r\nclass StorageService{\r\n\r\n    /**\r\n     * is storage supported?\r\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\r\n     * @return {boolean}\r\n     */\r\n    static isSupported(storage){\r\n\r\n        if(storage === 'cookies') return true;\r\n\r\n        try{\r\n            return storage in window && window[storage] !== null;\r\n        }\r\n        catch(e){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * save to the storage\r\n     * @param {string} deepLink\r\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\r\n     * @param {string} key - storage key\r\n     * @param {number} expiration - cookie expiration in minutes (-1 = cookies expire when browser is closed)\r\n     */\r\n    static set(deepLink, storage, key, expiration = -1){\r\n\r\n        if(storage === 'cookies'){\r\n\r\n            const cValue = encodeURIComponent(deepLink);\r\n            const exdate = new Date();\r\n\r\n            expiration = Number(expiration) || -1;\r\n\r\n            if(expiration === -1){\r\n                document.cookie = name + '=' + cValue + ';path=/;';\r\n            }\r\n            else{\r\n                exdate.setMinutes(exdate.getMinutes() + expiration);\r\n                document.cookie = name + '=' + cValue + ';path=/; expires=' + exdate.toUTCString();\r\n            }\r\n        }\r\n        else{\r\n            if(StorageService.isSupported(storage)) {\r\n\r\n                //save json in storage\r\n                window[storage][key] = deepLink;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get from storage\r\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\r\n     * @param {string} key - storage key\r\n     * @return {string} deepLink\r\n     */\r\n    static get(storage, key){\r\n\r\n        let deepLink = '';\r\n\r\n        if(storage === 'cookies'){\r\n\r\n            //get document cookie\r\n            const cookies = document.cookie.split(';');\r\n\r\n            for (let i=0; i<cookies.length; i++){\r\n\r\n                let x = cookies[i].substr(0,cookies[i].indexOf('='));\r\n                let y = cookies[i].substr(cookies[i].indexOf('=') + 1);\r\n                x = x.replace(/^\\s+|\\s+$/g, '');\r\n\r\n                if(x === key){\r\n                    deepLink = decodeURIComponent(y);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if(StorageService.isSupported(storage)) {\r\n                deepLink = window[storage][key] || '';\r\n            }\r\n        }\r\n\r\n        return deepLink;\r\n    }\r\n\r\n}\r\n\r\nexport default StorageService;","/**\r\n * filter action\r\n */\r\nclass FilterAction{\r\n\r\n    /**\r\n     * text filter\r\n     * this filter returns all items that contains the specified text in the given path\r\n     * @param {Array.<HTMLElement>} items\r\n     * @param {string} text\r\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\r\n     * @param {string=} mode - contains (default), startsWith, endsWith, equal\r\n     * @param {string=} ignoreRegex - optional regex that defines what characters should be ignored\r\n     * @return {Array.<HTMLElement>} filtered items\r\n     */\r\n    static textFilter(items, text, path='', mode = 'contains', ignoreRegex = ''){\r\n\r\n        const filtered = [];\r\n\r\n        if(!items) return [];\r\n\r\n        if(path === 'default') return items;\r\n\r\n        const formattedText = text.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\r\n\r\n        for(let item of items){\r\n\r\n            const elements = path ? item.querySelectorAll(path) : [item];\r\n\r\n            if(!elements) continue;\r\n\r\n            let shouldBeAdded = false;\r\n\r\n            for(let el of elements){\r\n\r\n                const elText = el.textContent.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\r\n\r\n                switch(mode){\r\n\r\n                    case 'startsWith':{\r\n\r\n                        if(elText.startsWith(formattedText)){\r\n                            shouldBeAdded = true;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n\r\n                    case 'endsWith':{\r\n\r\n                        if(elText.endsWith(formattedText)){\r\n                            shouldBeAdded = true;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n\r\n                    case 'equal':{\r\n\r\n                        if(elText === formattedText){\r\n                            shouldBeAdded = true;\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                    default:{\r\n\r\n                        //contains\r\n                        if(elText.indexOf(formattedText) !== -1){\r\n                            shouldBeAdded = true;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if(shouldBeAdded) break;\r\n            }\r\n\r\n            if(shouldBeAdded){\r\n                filtered.push(item);\r\n            }\r\n        }\r\n\r\n        return filtered;\r\n    }\r\n\r\n    /**\r\n     * path filter\r\n     * only items with the given path are returned\r\n     * @param {Array.<HTMLElement>} items\r\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\r\n     * @param {boolean} isInverted - if true, return all items that DON'T contain the specified path\r\n     * @return {Array.<HTMLElement>} filtered items\r\n     */\r\n    static pathFilter(items, path='', isInverted = false){\r\n\r\n        const filtered = [];\r\n\r\n        if(!items) return [];\r\n\r\n        if(path === 'default' || !path) return items;\r\n\r\n        for(let item of items){\r\n\r\n            const el = item.querySelector(path);\r\n\r\n            if(el && !isInverted || !el && isInverted){\r\n                filtered.push(item);\r\n            }\r\n        }\r\n\r\n        return filtered;\r\n    }\r\n\r\n    /**\r\n     * check if n is a number\r\n     * @param {*} n\r\n     * @returns {boolean}\r\n     */\r\n    static isNumeric(n)\r\n    {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n\r\n    /**\r\n     * range filter\r\n     * return only elements that satisfy the following condition:\r\n     * all numbers in the element's content are in the following range: min <= from <= (all numbers in the element) <= to <= max\r\n     * @param {Array.<HTMLElement>} items\r\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\r\n     * @param {number} from\r\n     * @param {number} to\r\n     * @param {number=} min\r\n     * @param {number=} max\r\n     * @return {Array.<HTMLElement>} filtered items\r\n     */\r\n    static rangeFilter(items, path='', from, to, min = from, max = to){\r\n\r\n        const filtered = [];\r\n\r\n        if(!items) return [];\r\n\r\n        if(path === 'default') return items;\r\n\r\n        from = Math.max(from, min);\r\n        to = Math.min(to, max);\r\n\r\n        for(let item of items){\r\n\r\n            const itemElements = path ? item.querySelectorAll(path) : [item];\r\n\r\n            if(!itemElements) continue;\r\n\r\n            //find all numbers within the element\r\n            const numbers = [];\r\n\r\n            for(let el of itemElements){\r\n\r\n                const num = Number(el.textContent.trim().replace(/[^-0-9.]+/g,''));\r\n\r\n                if(!isNaN(num)){\r\n                    numbers.push(num);\r\n                }\r\n            }\r\n\r\n            if(numbers.length > 0){\r\n\r\n                //find max and min number of all found within the element numbers\r\n                const maxNumber = Math.max.apply(Math, numbers);\r\n                const minNumber = Math.min.apply(Math, numbers);\r\n\r\n                let shouldBeAdded = true;\r\n\r\n                if(FilterAction.isNumeric(from) && from > minNumber){\r\n                    shouldBeAdded = false;\r\n                }\r\n\r\n                if(FilterAction.isNumeric(to) && maxNumber > to){\r\n                    shouldBeAdded = false;\r\n                }\r\n\r\n                if(shouldBeAdded){\r\n                    filtered.push(item);\r\n                }\r\n            }\r\n        }\r\n\r\n        return filtered;\r\n    }\r\n}\r\n\r\nexport default FilterAction;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\r\n\r\n/**\r\n * hidden sort jPList control\r\n *\r\n * HTML structure:\r\n * ----------------\r\n * <div\r\n *      style=\"display: none\"\r\n *      data-jplist-control=\"hidden-sort\"\r\n *      data-group=\"group1\"\r\n *      data-path=\".title\"\r\n *      data-type=\"number\"> <!-- possible values: text, number, datetime -->\r\n * </div>\r\n *\r\n * Usage in JS:\r\n * -------------\r\n * import HiddenSort from './controls/sort/hidden-sort.control';\r\n * let control = document.getElementById('my-hidden-sort-control');\r\n * const hiddenSort = new HiddenSort(control);\r\n * console.log(hiddenSort.type);\r\n */\r\nclass HiddenSortControl extends BaseSortControlsGroup{}\r\n\r\nexport default HiddenSortControl;\r\n","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\r\n\r\nconst SELECTED_CLASS = 'jplist-selected';\r\n\r\n/**\r\n * sort buttons jPList control\r\n *\r\n * Usage:\r\n * <button\r\n *  data-jplist-control=\"sort-buttons\"\r\n *  data-path=\".title\"          <!-- required -->\r\n *  data-group=\"group1\"         <!-- required -->\r\n *  data-order=\"asc\"            <!-- optional, asc (default) / desc -->\r\n *  data-type=\"text\"            <!-- optional, text (default) / number / datetime -->\r\n *  data-name=\"sort1\"           <!-- required for radio mode -->\r\n *  data-selected=\"true\"        <!-- optional, true / false (default) -->\r\n *  data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\r\n *  data-regex=\"\"               <!-- optional -->\r\n *  data-id=\"deep-link-name1\"   <!-- optional, used as deep link url and storage parameter -->\r\n *  data-mode=\"radio\">          <!-- optional, radio (default) / checkbox -->\r\n *  Sort by title asc\r\n * </button>\r\n *\r\n * Optional deep link: #deepLinkName1=1&deepLinkName2=1\r\n * selected value - 1\r\n * non selected - should not appear in deep link or any value !== 1\r\n */\r\nclass ButtonsSortControl extends BaseSortControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n\r\n        this.checkboxes = [];\r\n        this.radios = [];\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseSortControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const baseSortControl = super.addControl(control);\r\n\r\n        //get additional control properties\r\n        baseSortControl.selected = baseSortControl.element.getAttribute('data-selected') === 'true';\r\n        baseSortControl.mode = baseSortControl.element.getAttribute('data-mode') || 'radio';\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(baseSortControl.id){\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\r\n\r\n            if(deepLinkParam){\r\n                baseSortControl.selected = deepLinkParam.value === '1';\r\n            }\r\n        }\r\n\r\n        if(baseSortControl.mode === 'radio'){\r\n\r\n            this.radios.push(baseSortControl);\r\n            this.handleRadios();\r\n        }\r\n\r\n        if(baseSortControl.mode === 'checkbox'){\r\n\r\n            this.checkboxes.push(baseSortControl);\r\n            this.handleCheckboxes();\r\n        }\r\n\r\n        /**\r\n         * on control click -> change the selected control\r\n         */\r\n        baseSortControl.element.addEventListener('click', e => {\r\n\r\n            e.preventDefault();\r\n\r\n            if(baseSortControl.mode === 'checkbox'){\r\n\r\n                baseSortControl.selected = !baseSortControl.selected;\r\n\r\n                this.checkboxes.forEach(cb => {\r\n\r\n                    if(cb.isEqualTo(baseSortControl)){\r\n                        cb.selected = baseSortControl.selected;\r\n                    }\r\n                });\r\n\r\n                this.handleCheckboxes();\r\n            }\r\n\r\n            if(baseSortControl.mode === 'radio'){\r\n\r\n                for (let radio of this.radios) {\r\n                    radio.selected = false;\r\n                }\r\n\r\n                baseSortControl.selected = true;\r\n\r\n                this.handleRadios();\r\n            }\r\n\r\n            if(window.jplist) {\r\n\r\n                window.jplist.refresh(this.group);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle checkbox mode controls\r\n     */\r\n    handleCheckboxes(){\r\n\r\n        for(let cb of this.checkboxes){\r\n\r\n            if(cb.selected){\r\n                cb.element.classList.add(SELECTED_CLASS);\r\n            }\r\n            else{\r\n                cb.element.classList.remove(SELECTED_CLASS);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the latest selected radio\r\n     * @return {BaseSortControl} latestSelectedRadio\r\n     */\r\n    getLastSelectedRadio(){\r\n\r\n        let latestSelectedRadio = null;\r\n\r\n        //find the latest selected radio\r\n        for (let radio of this.radios) {\r\n\r\n            if (radio.selected) {\r\n                latestSelectedRadio = radio;\r\n            }\r\n        }\r\n\r\n        return latestSelectedRadio;\r\n    }\r\n\r\n    /**\r\n     * handle radio mode controls\r\n     */\r\n    handleRadios(){\r\n\r\n        if(this.radios.length > 0) {\r\n\r\n            let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n            //remove selected from all radios\r\n            for (let radio of this.radios) {\r\n\r\n                radio.selected = false;\r\n                radio.element.classList.remove(SELECTED_CLASS);\r\n            }\r\n\r\n            if(latestSelectedRadio) {\r\n\r\n                this.radios.forEach(radio => {\r\n\r\n                    if(radio.isEqualTo(latestSelectedRadio)){\r\n                        radio.selected = true;\r\n                        radio.element.checked = true;\r\n                        radio.element.classList.add(SELECTED_CLASS);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get sort options from all controls in the group\r\n     * @return {Array.<object>} sortOptions\r\n     */\r\n    getSortOptions(){\r\n\r\n        let sortOptions = [];\r\n\r\n        let atLeastOneNotSelectedCheckbox = false;\r\n\r\n        //add all selected checkboxes\r\n        for(let checkbox of this.checkboxes){\r\n\r\n            if(checkbox.selected) {\r\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\r\n            }\r\n            else{\r\n                atLeastOneNotSelectedCheckbox = true;\r\n            }\r\n        }\r\n\r\n        if(atLeastOneNotSelectedCheckbox){\r\n            sortOptions = sortOptions.concat([\r\n                {\r\n                    path: 'default'\r\n                }\r\n            ]);\r\n        }\r\n\r\n        //get options from the latest selected radio if exists\r\n        let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n        if(latestSelectedRadio){\r\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\r\n        }\r\n\r\n        return sortOptions;\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n        const cbArr = this.checkboxes.map(cb => cb.id && cb.selected ? cb.id + '=1' : '').filter(str => str !== '');\r\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\r\n        const combined = cbArr.concat(radioArr);\r\n        const unique = Array.from(new Set(combined));\r\n        return unique.join('&');\r\n    }\r\n}\r\n\r\nexport default ButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\r\n\r\nconst SELECTED_CLASS = 'jplist-selected';\r\n\r\n/**\r\n * radio buttons sort control\r\n *\r\n * Usage:\r\n * <label>\r\n *  <input\r\n *      type=\"radio\"\r\n *      data-jplist-control=\"radio-buttons-sort\"\r\n *      data-path=\".title\"           <!-- required -->\r\n *      data-group=\"group1\"          <!-- required -->\r\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\r\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\r\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\r\n *      data-regex=\"\"                <!-- optional -->\r\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\r\n *      name=\"sort1\"\r\n *      checked>\r\n *          Sort by title asc\r\n *  </input>\r\n * </label>\r\n *\r\n * Optional deep link: #deepLinkName1=1\r\n * selected value - 1\r\n * non selected - should not appear in deep link\r\n */\r\nclass RadioButtonsSortControl extends BaseSortControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n        this.radios = [];\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseSortControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const baseSortControl = super.addControl(control);\r\n\r\n        //get additional control properties\r\n        baseSortControl.selected = baseSortControl.element.checked;\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(baseSortControl.id){\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\r\n\r\n            if(deepLinkParam){\r\n                baseSortControl.selected = deepLinkParam.value === '1';\r\n            }\r\n        }\r\n\r\n        this.radios.push(baseSortControl);\r\n        this.handleRadios();\r\n\r\n        /**\r\n         * on control change -> update the selected control\r\n         */\r\n        baseSortControl.element.addEventListener('change', e => {\r\n\r\n            e.preventDefault();\r\n\r\n            for (let radio of this.radios) {\r\n                radio.selected = false;\r\n            }\r\n\r\n            baseSortControl.selected = true;\r\n\r\n            this.handleRadios();\r\n\r\n            if(window.jplist) {\r\n\r\n                window.jplist.refresh(this.group);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get the latest selected radio\r\n     * @return {BaseSortControl} latestSelectedRadio\r\n     */\r\n    getLastSelectedRadio(){\r\n\r\n        let latestSelectedRadio = null;\r\n\r\n        //find the latest selected radio\r\n        for (let radio of this.radios) {\r\n\r\n            if (radio.selected) {\r\n                latestSelectedRadio = radio;\r\n            }\r\n        }\r\n\r\n        return latestSelectedRadio;\r\n    }\r\n\r\n    /**\r\n     * handle radio mode controls\r\n     */\r\n    handleRadios(){\r\n\r\n        if(this.radios.length > 0) {\r\n\r\n            let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n            //remove selected from all radios\r\n            for (let radio of this.radios) {\r\n\r\n                radio.selected = false;\r\n                radio.element.classList.remove(SELECTED_CLASS);\r\n            }\r\n\r\n            if(latestSelectedRadio) {\r\n\r\n                this.radios.forEach(radio => {\r\n\r\n                    if(radio.isEqualTo(latestSelectedRadio)){\r\n\r\n                        radio.selected = true;\r\n                        radio.element.checked = true;\r\n                        radio.element.classList.add(SELECTED_CLASS);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get sort options from all controls in the group\r\n     * @return {Array.<object>} sortOptions\r\n     */\r\n    getSortOptions(){\r\n\r\n        let sortOptions = [];\r\n\r\n        //get options from the latest selected radio if exists\r\n        let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n        if(latestSelectedRadio){\r\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\r\n        }\r\n\r\n        return sortOptions;\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\r\n        const unique = Array.from(new Set(radioArr));\r\n        return unique.join('&');\r\n    }\r\n}\r\n\r\nexport default RadioButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\r\n\r\nconst SELECTED_CLASS = 'jplist-selected';\r\n\r\n/**\r\n * checkbox sort control\r\n *\r\n * Usage:\r\n * <label>\r\n *  <input\r\n *      type=\"checkbox\"\r\n *      data-jplist-control=\"checkbox-sort\"\r\n *      data-path=\".title\"           <!-- required -->\r\n *      data-group=\"group1\"          <!-- required -->\r\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\r\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\r\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\r\n *      data-regex=\"\"                <!-- optional -->\r\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\r\n *      checked>\r\n *          Sort by title asc\r\n *  </input>\r\n * </label>\r\n * Optional deep link: #deepLinkName1=1\r\n * selected value - 1\r\n * non selected - 0\r\n */\r\nclass CheckboxSortControl extends BaseSortControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n\r\n        this.checkboxes = [];\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseSortControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const baseSortControl = super.addControl(control);\r\n\r\n        //get additional control properties\r\n        baseSortControl.selected = baseSortControl.element.checked;\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(baseSortControl.id){\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\r\n\r\n            if(deepLinkParam){\r\n                baseSortControl.selected = deepLinkParam.value === '1';\r\n            }\r\n        }\r\n\r\n        this.checkboxes.push(baseSortControl);\r\n        this.handleCheckboxes();\r\n\r\n        /**\r\n         * on control change -> update the selected control\r\n         */\r\n        baseSortControl.element.addEventListener('change', e => {\r\n\r\n            e.preventDefault();\r\n\r\n            baseSortControl.selected = !baseSortControl.selected;\r\n\r\n            this.checkboxes.forEach(cb => {\r\n\r\n                if(cb.isEqualTo(baseSortControl)){\r\n                    cb.selected = baseSortControl.selected;\r\n                }\r\n            });\r\n\r\n            this.handleCheckboxes();\r\n\r\n            if(window.jplist) {\r\n\r\n                window.jplist.refresh(this.group);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle checkbox mode controls\r\n     */\r\n    handleCheckboxes(){\r\n\r\n        for(let cb of this.checkboxes){\r\n\r\n            if(cb.selected){\r\n                cb.element.classList.add(SELECTED_CLASS);\r\n            }\r\n            else{\r\n                cb.element.classList.remove(SELECTED_CLASS);\r\n            }\r\n\r\n            cb.element.checked = cb.selected;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get sort options from all controls in the group\r\n     * @return {Array.<object>} sortOptions\r\n     */\r\n    getSortOptions(){\r\n\r\n        let sortOptions = [];\r\n\r\n        let atLeastOneNotSelectedCheckbox = false;\r\n\r\n        //add all selected checkboxes\r\n        for(let checkbox of this.checkboxes){\r\n\r\n            if(checkbox.selected) {\r\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\r\n            }\r\n            else{\r\n                atLeastOneNotSelectedCheckbox = true;\r\n            }\r\n        }\r\n\r\n        //any number of non selected checkboxes -> 1 default option\r\n        if(atLeastOneNotSelectedCheckbox){\r\n            sortOptions = sortOptions.concat([\r\n                {\r\n                    path: 'default'\r\n                }\r\n            ]);\r\n        }\r\n\r\n        return sortOptions;\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n        const cbArr = this.checkboxes.map(cb => {\r\n\r\n            if(cb.id){\r\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\r\n            }\r\n            else{\r\n                return '';\r\n            }\r\n\r\n        }).filter(str => str !== '');\r\n\r\n        const unique = Array.from(new Set(cbArr));\r\n        return unique.join('&');\r\n    }\r\n}\r\n\r\nexport default CheckboxSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\r\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\r\n\r\n/**\r\n * select sort control\r\n *  <select\r\n *        data-jplist-control=\"select-sort\"\r\n *        data-group=\"group1\"\r\n *        data-name=\"name1\"\r\n *        data-id=\"deep-link-name1\">  <!-- optional, used as deep link url and storage parameter -->\r\n *\r\n *        <option\r\n *          data-path=\"default\"\r\n *          value=\"0\"\r\n *          selected>Sort by</option>\r\n *\r\n *        <option\r\n *          value=\"1\"\r\n *          data-path=\".title\"\r\n *          data-order=\"asc\"\r\n *          data-type=\"text\">Title A-Z</option>\r\n *\r\n *        <option\r\n *          value=\"2\"\r\n *          data-path=\".title\"\r\n *          data-order=\"desc\"\r\n *          data-type=\"text\">Title Z-A</option>\r\n *    </select>\r\n *\r\n *    option may have the following attributes:\r\n *    ------------------------------------------\r\n *    data-path - required CSS path selector\r\n *    data-order - optional, asc (default) / desc\r\n *    data-type=\"text\" - optional, text (default) / number / datetime\r\n *    data-datetime-format=\"{month}/{day}/{year}\" - optional datetime format\r\n *    data-regex -  optional ignore regex\r\n */\r\nclass SelectSortControl extends BaseSortControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n\r\n        this.options = [];\r\n        this.selected = '';\r\n        this.id = '';\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseSortControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const baseSortControl = super.addControl(control);\r\n\r\n        let options = baseSortControl.element.querySelectorAll('option');\r\n\r\n        for(let option of options){\r\n\r\n            option.setAttribute('data-name', this.name);\r\n            option.setAttribute('data-group', this.group);\r\n\r\n            if(!this.options.find(opt => opt.element.value === option.value)){\r\n                this.options.push(new BaseSortControl(option));\r\n            }\r\n        }\r\n\r\n        this.selected = baseSortControl.element.value;\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(baseSortControl.id){\r\n\r\n            this.id = baseSortControl.id;\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\r\n\r\n            if(deepLinkParam){\r\n                baseSortControl.element.value = deepLinkParam.value;\r\n                this.selected = deepLinkParam.value;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * on control change -> update the selected control\r\n         */\r\n        baseSortControl.element.addEventListener('change', e => {\r\n\r\n            e.preventDefault();\r\n\r\n            this.selected = e.target.value;\r\n\r\n            for(let select of this.controls){\r\n                select.element.value = this.selected;\r\n            }\r\n\r\n            if(window.jplist) {\r\n\r\n                window.jplist.refresh(this.group);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get sort options from all controls in the group\r\n     * @return {Array.<object>} sortOptions\r\n     */\r\n    getSortOptions(){\r\n\r\n        let selected = this.options.find(opt => opt.element.value === this.selected);\r\n\r\n        if(selected){\r\n            return selected.getSortOptions();\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n\r\n        let selected = this.options.find(opt => opt.element.value === this.selected);\r\n\r\n        if(this.id){\r\n            return this.id + '=' + selected.element.value;\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n\r\nexport default SelectSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\r\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\r\nimport BaseDropdownControl from '../../base/controls/dropdown/base-dropdown.control';\r\n\r\n/**\r\n * dropdown sort control\r\n */\r\nclass DropdownSortControl extends BaseSortControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n        this.selected = null;\r\n        this.id = '';\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseSortControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        //a dropdown has the following custom properties:\r\n        //  -- dropdown - custom dropdown behaviour, styles, classes\r\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\r\n        const baseSortControl = super.addControl(control);\r\n\r\n        //generate dropdown instance for the given control;\r\n        //this instance adds dropdown classes, styles and behaviour\r\n        baseSortControl.dropdown = new BaseDropdownControl(control.element);\r\n        baseSortControl.buttons = [];\r\n\r\n        //each button inside dropdown is a separate sort control that defined by data-path attribute;\r\n        //they are stored in baseSortControl.buttons array\r\n        let buttons = baseSortControl.element.querySelectorAll('[data-path]');\r\n\r\n        for(let button of buttons){\r\n\r\n            //all buttons inherits data-name and data-group attributes of the root dropdown\r\n            button.setAttribute('data-name', this.name);\r\n            button.setAttribute('data-group', this.group);\r\n\r\n            let btnSortControl = new BaseSortControl(button);\r\n\r\n            //save newly created button in the baseSortControl.buttons array\r\n            baseSortControl.buttons.push(btnSortControl);\r\n\r\n            /**\r\n             * on control button click -> update the selected control\r\n             */\r\n            btnSortControl.element.addEventListener('click', e => {\r\n\r\n                e.preventDefault();\r\n\r\n                //clicked button should be the selected one\r\n                this.selected = btnSortControl;\r\n\r\n                this.setSelectedButton(baseSortControl);\r\n\r\n                for(let control of this.controls){\r\n                    if(control.dropdown){\r\n                        control.dropdown.close();\r\n                    }\r\n                }\r\n\r\n                if(window.jplist) {\r\n\r\n                    window.jplist.refresh(this.group);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.selected = DropdownSortControl.getSelectedButton(baseSortControl.buttons);\r\n        this.setSelectedButton(baseSortControl);\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(baseSortControl.id){\r\n\r\n            this.id = baseSortControl.id;\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\r\n\r\n            if(deepLinkParam){\r\n\r\n                const deepLinkBtn = baseSortControl.buttons.find(btn => {\r\n\r\n                    const btnValue = btn.element.getAttribute('data-value');\r\n                    return (deepLinkParam.value === btnValue) ? btn : null;\r\n                });\r\n\r\n                if(deepLinkBtn) {\r\n                    this.selected = deepLinkBtn;\r\n                    this.setSelectedButton(baseSortControl);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get sort options from all controls in the group\r\n     * @return {Array.<object>} sortOptions\r\n     */\r\n    getSortOptions(){\r\n\r\n        if(this.selected){\r\n            return this.selected.getSortOptions();\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n\r\n        if(this.id && this.selected){\r\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * get selected button that has data-selected=\"true\" data attribute;\r\n     * if there is no data-selected attribute -> take the first button\r\n     * @param {Array.<BaseSortControl>} buttons\r\n     * @return {BaseSortControl|null}\r\n     */\r\n    static getSelectedButton(buttons){\r\n\r\n        if(buttons.length <= 0) return null;\r\n\r\n        for(let button of buttons){\r\n            if(button.element.getAttribute('data-selected') === 'true'){\r\n                return button;\r\n            }\r\n        }\r\n\r\n        return buttons[0];\r\n    }\r\n\r\n    /**\r\n     * set selected button\r\n     * @param {BaseSortControl} baseSortControl\r\n     */\r\n    setSelectedButton(baseSortControl){\r\n\r\n        for(let control of this.controls){\r\n\r\n            if(!control.dropdown) continue;\r\n\r\n            //verify that dropdown has such button\r\n            const dropdownBtn = baseSortControl.buttons.find(btn => this.selected.isEqualTo(btn));\r\n\r\n            if(dropdownBtn){\r\n\r\n                //update dropdown panels value\r\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default DropdownSortControl;","import BasePaginationControlsGroup from '../base/groups/pagination/base-pagination-controls-group';\r\nimport BaseDropdownControl from '../base/controls/dropdown/base-dropdown.control';\r\n\r\n/**\r\n * pagination control\r\n */\r\nclass PaginationControl extends BasePaginationControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.currentPage = 0;\r\n        this.itemsPerPage = 0;\r\n        this.range = 0;\r\n        this.id = '';\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BasePaginationControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const basePaginationControl = super.addControl(control);\r\n\r\n        //update properties - we take them from the latest pagination control in the group\r\n        this.currentPage = basePaginationControl.currentPage;\r\n        this.itemsPerPage = Number(basePaginationControl.itemsPerPage) || 0;\r\n        this.range = basePaginationControl.range;\r\n\r\n        //restore control state from the deep link value if needed\r\n        this.restoreFromDeepLink(basePaginationControl);\r\n\r\n        //this template is used for generating pagination buttons\r\n        basePaginationControl.pageButtonsHolder = basePaginationControl.element.querySelector('[data-type=\"pages\"]');\r\n\r\n        if(basePaginationControl.pageButtonsHolder){\r\n            basePaginationControl.btnTemplate = basePaginationControl.pageButtonsHolder.innerHTML;\r\n        }\r\n\r\n        //first, last, next and prev button\r\n        basePaginationControl.firstButtons = basePaginationControl.element.querySelectorAll('[data-type=\"first\"]');\r\n        basePaginationControl.lastButtons = basePaginationControl.element.querySelectorAll('[data-type=\"last\"]');\r\n        basePaginationControl.prevButtons = basePaginationControl.element.querySelectorAll('[data-type=\"prev\"]');\r\n        basePaginationControl.nextButtons = basePaginationControl.element.querySelectorAll('[data-type=\"next\"]');\r\n\r\n        //event handlers\r\n        PaginationControl.bindEventHandler(basePaginationControl.firstButtons, 'click', this.pageButtonClick.bind(this));\r\n        PaginationControl.bindEventHandler(basePaginationControl.lastButtons, 'click', this.pageButtonClick.bind(this));\r\n        PaginationControl.bindEventHandler(basePaginationControl.prevButtons, 'click', this.pageButtonClick.bind(this));\r\n        PaginationControl.bindEventHandler(basePaginationControl.nextButtons, 'click', this.pageButtonClick.bind(this));\r\n\r\n        //items per page select\r\n        basePaginationControl.itemsPerPageSelects = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page\"]'));\r\n        this.updateItemsPerPageSelect(basePaginationControl.itemsPerPageSelects);\r\n\r\n        //items per page custom dropdowns\r\n        basePaginationControl.itemsPerPageDD = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page-dd\"]'));\r\n        this.initCustomDropdowns(basePaginationControl.itemsPerPageDD);\r\n\r\n        PaginationControl.bindEventHandler(basePaginationControl.itemsPerPageSelects, 'change', this.selectChange.bind(this));\r\n\r\n        //information labels\r\n        basePaginationControl.labels = basePaginationControl.element.querySelectorAll('[data-type=\"info\"]');\r\n\r\n        if(basePaginationControl.labels) {\r\n            for (let label of basePaginationControl.labels) {\r\n                label.template = label.innerHTML;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update items per page value of select group\r\n     * @param {Array.<HTMLElement>} selects\r\n     */\r\n    updateItemsPerPageSelect(selects){\r\n\r\n        for(let select of selects){\r\n\r\n            const option = Array.from(select.options).find(option => option.value === this.itemsPerPage.toString());\r\n\r\n            if(option) {\r\n                select.value = Number(this.itemsPerPage) || 0;\r\n            }\r\n            else{\r\n                select.value = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * init custom dropdowns\r\n     * @param {HTMLCollection} itemsPerPageDD\r\n     */\r\n    initCustomDropdowns(itemsPerPageDD){\r\n\r\n        if(!itemsPerPageDD || itemsPerPageDD.length <=0) return;\r\n\r\n        for(let dd of itemsPerPageDD){\r\n\r\n            //create dropdown instance for each dd HTML structure;\r\n            //this instance adds dropdown classes, styles and behaviour\r\n            dd.dropdown = new BaseDropdownControl(dd);\r\n\r\n            //all dropdown buttons are keeps as buttons property\r\n            dd.buttons = Array.from(dd.querySelectorAll('[data-value]'));\r\n\r\n            for(let button of dd.buttons){\r\n\r\n                button.addEventListener('click', (e) => {\r\n\r\n                    e.preventDefault();\r\n\r\n                    this.itemsPerPage = Number(button.getAttribute('data-value')) || 0;\r\n\r\n                    //set selected button in all dropdowns for the current this.itemsPerPage value\r\n                    this.setSelectedButton();\r\n\r\n                    dd.dropdown.close();\r\n\r\n                    if(window.jplist) {\r\n\r\n                        window.jplist.refresh(this.group);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        //set selected button in all dropdowns for the current this.itemsPerPage value\r\n        this.setSelectedButton();\r\n    }\r\n\r\n    // --------------------- BUTTONS ---------------------\r\n\r\n    /**\r\n     * set selected button in all dropdowns for the current this.itemsPerPage value\r\n     */\r\n    setSelectedButton(){\r\n\r\n        for(let control of this.controls){\r\n\r\n            if(!control.itemsPerPageDD) continue;\r\n\r\n            for(let dd of control.itemsPerPageDD){\r\n\r\n                if(!dd.buttons) continue;\r\n\r\n                let selectedButton = dd.buttons.find(button => {\r\n\r\n                    const btnValue = Number(button.getAttribute('data-value')) || 0;\r\n                    return btnValue === this.itemsPerPage;\r\n                });\r\n\r\n                if(!selectedButton){\r\n\r\n                    selectedButton = dd.buttons.find(button => {\r\n                        const btnValue = Number(button.getAttribute('data-value')) || 0;\r\n                        return btnValue === 0;\r\n                    });\r\n                }\r\n\r\n                if(selectedButton){\r\n\r\n                    dd.dropdown.setPanelsContent(selectedButton.textContent);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // --------------------- OPTIONS ---------------------\r\n\r\n    /**\r\n     * there can be only 1 pagination options object;\r\n     * in case of multiple -> get the latest\r\n     * @return {object} pagination options\r\n     */\r\n    getPaginationOptions(){\r\n\r\n        return {\r\n            itemsPerPage: this.itemsPerPage,\r\n            currentPage: this.currentPage,\r\n            range: this.range\r\n        };\r\n    }\r\n\r\n    /**\r\n     * update controls according to the pagination options calculated using PaginationAction class;\r\n     * @param {PaginationAction} paginationOptions\r\n     */\r\n    setPaginationOptions(paginationOptions){\r\n\r\n        if(!paginationOptions) return;\r\n\r\n        //update properties\r\n        this.currentPage = paginationOptions.currentPage;\r\n        this.itemsPerPage = paginationOptions.itemsPerPage;\r\n\r\n        for(let control of this.controls){\r\n\r\n            if(!control.btnTemplate || !control.pageButtonsHolder) continue;\r\n\r\n            //remove all old buttons\r\n            while (control.pageButtonsHolder.firstChild) {\r\n                control.pageButtonsHolder.removeChild(control.pageButtonsHolder.firstChild);\r\n            }\r\n\r\n            //generate new buttons\r\n            for (let i = paginationOptions.rangeStart; i <= paginationOptions.rangeEnd; i++) {\r\n\r\n                //update button text macros and button attributes\r\n                const div = document.createElement('div');\r\n                div.innerHTML = control.btnTemplate.replace(new RegExp('{pageNumber}', 'g'), (i+1)).trim();\r\n                const pageButton = div.firstChild;\r\n\r\n                let btn = pageButton.querySelector('[data-type=\"page\"]');\r\n                if(!btn){\r\n                    btn = pageButton;\r\n                }\r\n\r\n                btn.setAttribute('data-page', i.toString());\r\n\r\n                if(i === this.currentPage){\r\n\r\n                    btn.classList.add(control.selectedClass);\r\n                    btn.setAttribute('data-selected', 'true');\r\n                }\r\n\r\n                //on page button click event handler\r\n                btn.addEventListener('click', (e) => { this.pageButtonClick(e, btn); });\r\n\r\n                //add button to the buttons holder\r\n                control.pageButtonsHolder.appendChild(pageButton);\r\n            }\r\n\r\n            //update data-page attribute of first, last, prev and next buttons\r\n            PaginationControl.setPageAttr(control.firstButtons, 0, this.currentPage !== 0, control.disabledClass);\r\n\r\n            PaginationControl.setPageAttr(control.lastButtons,\r\n                paginationOptions.pagesNumber - 1,\r\n                this.currentPage !== paginationOptions.pagesNumber - 1,\r\n                control.disabledClass);\r\n\r\n            PaginationControl.setPageAttr(control.prevButtons,\r\n                paginationOptions.prevPage,\r\n                this.currentPage !== 0,\r\n                control.disabledClass);\r\n\r\n            PaginationControl.setPageAttr(control.nextButtons,\r\n                paginationOptions.nextPage,\r\n                this.currentPage !== paginationOptions.pagesNumber - 1,\r\n                control.disabledClass);\r\n\r\n            const infos = [\r\n                {key: '{pageNumber}', value: paginationOptions.currentPage + 1},\r\n                {key: '{pagesNumber}', value: paginationOptions.pagesNumber},\r\n                {key: '{startItem}', value: paginationOptions.start + 1},\r\n                {key: '{endItem}', value: paginationOptions.end},\r\n                {key: '{itemsNumber}', value: paginationOptions.itemsNumber}\r\n            ];\r\n\r\n            //update information labels\r\n            if(control.labels) {\r\n                for (let label of control.labels) {\r\n\r\n                    if(!label.template) continue;\r\n\r\n                    let html = label.template;\r\n\r\n                    for(let info of infos){\r\n                        html = html.replace(new RegExp(info.key, 'g'), info.value);\r\n                    }\r\n\r\n                    label.innerHTML = html;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // --------------------- EVENT HANDLERS ---------------------\r\n\r\n    /**\r\n     * page, first, last, prev and next button onclick handler\r\n     * @param {HTMLElement} btn\r\n     */\r\n    pageButtonClick(e, btn){\r\n\r\n        if(e) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        const pageNumber = btn ? btn.getAttribute('data-page') : e.target.getAttribute('data-page');\r\n        this.currentPage = Number(pageNumber) || 0;\r\n\r\n        if(window.jplist) {\r\n\r\n            window.jplist.refresh(this.group);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * on items per page select change\r\n     */\r\n    selectChange(e){\r\n\r\n        e.preventDefault();\r\n\r\n        const itemsPerPage = Number(e.target.value);\r\n\r\n        if(!isNaN(itemsPerPage)){\r\n\r\n            this.itemsPerPage = itemsPerPage;\r\n\r\n            //update the selected values of all controls\r\n            for(let control of this.controls){\r\n                this.updateItemsPerPageSelect(control.itemsPerPageSelects);\r\n            }\r\n        }\r\n\r\n        if(window.jplist) {\r\n\r\n            window.jplist.refresh(this.group);\r\n        }\r\n    }\r\n\r\n    // --------------------- DEEP LINK ---------------------\r\n\r\n    /**\r\n     * restore control state from the deep link value\r\n     * @param {BasePaginationControl} basePaginationControl\r\n     */\r\n    restoreFromDeepLink(basePaginationControl){\r\n\r\n        if(basePaginationControl.id){\r\n\r\n            this.id = basePaginationControl.id;\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePaginationControl.id);\r\n\r\n            if(deepLinkParam){\r\n\r\n                const parts = deepLinkParam.value.split('-');\r\n\r\n                if(parts.length !== 2) return;\r\n\r\n                const currentPage = Number(parts[0]);\r\n                const itemsPerPage = Number(parts[1]);\r\n\r\n                if(isNaN(currentPage) || isNaN(itemsPerPage)) return;\r\n\r\n                this.currentPage = currentPage;\r\n                this.itemsPerPage = itemsPerPage;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * by default control's deep link is empty\r\n     * @returns {string}\r\n     */\r\n    getDeepLink(){\r\n\r\n        if(this.id){\r\n            return this.id + '=' + this.currentPage + '-' + this.itemsPerPage;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    // --------------------- HELPERS ---------------------\r\n\r\n    /**\r\n     * update page button attributes and styles of the elements collection\r\n     * @param {HTMLCollection} items\r\n     * @param {number} page\r\n     * @param {boolean} isEnabled\r\n     * @param {string} disabledClass\r\n     */\r\n    static setPageAttr(items, page, isEnabled, disabledClass){\r\n\r\n        if(!items) return;\r\n\r\n        for(let item of items){\r\n            item.setAttribute('data-page', page);\r\n\r\n            if(isEnabled){\r\n                item.classList.remove(disabledClass);\r\n            }\r\n            else{\r\n                item.classList.add(disabledClass);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * bind event handler to the items collection\r\n     * @param {HTMLCollection} items\r\n     * @param {string} eventName\r\n     * @param {Function} func\r\n     */\r\n    static bindEventHandler(items, eventName, func){\r\n\r\n        if(!items) return;\r\n\r\n        for(let item of items){\r\n            item.addEventListener(eventName, (e) => {func(e, item); });\r\n        }\r\n    }\r\n}\r\n\r\nexport default PaginationControl;","import BaseControlsGroup from '../base-controls-group';\r\nimport BasePaginationControl from '../../controls/pagination/base-pagination.control';\r\n\r\n/**\r\n * represents a group of pagination controls with the same data-name and data-group attributes\r\n */\r\nclass BasePaginationControlsGroup extends BaseControlsGroup{\r\n\r\n    /**\r\n     * there can be only 1 pagination options object;\r\n     * in case of multiple -> get the latest\r\n     * @return {object|null} pagination options\r\n     */\r\n    getPaginationOptions(){\r\n\r\n        if(this.controls.length > 0){\r\n            return this.controls[this.controls.length - 1].getPaginationOptions();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * update controls according to the pagination options calculated using PaginationAction class;\r\n     * @param {PaginationAction} paginationOptions\r\n     */\r\n    setPaginationOptions(paginationOptions){}\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     * @return {BasePaginationControl|null}\r\n     */\r\n    addControl(control){\r\n\r\n        if(control.name !== this.name || control.group !== this.group){\r\n            return null;\r\n        }\r\n\r\n        const basePaginationControl = new BasePaginationControl(control.element);\r\n\r\n        this.controls.push(basePaginationControl);\r\n\r\n        return basePaginationControl;\r\n    }\r\n}\r\n\r\nexport default BasePaginationControlsGroup;\r\n","import BaseControl from '../base.control';\r\n\r\n/**\r\n * base pagination control\r\n */\r\nclass BasePaginationControl extends BaseControl{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {HTMLElement} element\r\n     */\r\n    constructor(element){\r\n        super(element);\r\n\r\n        if(element){\r\n\r\n            /**\r\n             * optional, 10 by default\r\n             * the max number of items per page\r\n             */\r\n            this.itemsPerPage = Number(element.getAttribute('data-items-per-page')) || 10;\r\n\r\n            /**\r\n             * optional, 0 by default\r\n             * the initial page\r\n             */\r\n            this.currentPage = Number(element.getAttribute('data-current-page')) || 0;\r\n\r\n            /**\r\n             * optional, 10 by default\r\n             * max number of visible pagination button\r\n             */\r\n            this.range = Number(element.getAttribute('data-range')) || 10;\r\n\r\n            /**\r\n             * CSS class that is used on disabled pagination buttons\r\n             * @type {string|string}\r\n             */\r\n            this.disabledClass = (element.getAttribute('data-disabled-class') || 'jplist-disabled').trim();\r\n\r\n            /**\r\n             * CSS class that is used on selected pagination buttons\r\n             * @type {string|string}\r\n             */\r\n            this.selectedClass = (element.getAttribute('data-selected-class') || 'jplist-selected').trim();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get pagination options\r\n     * @return {object} options\r\n     */\r\n    getPaginationOptions(){\r\n\r\n        return {\r\n            itemsPerPage: this.itemsPerPage,\r\n            currentPage: this.currentPage,\r\n            range: this.range\r\n        };\r\n    }\r\n}\r\n\r\nexport default BasePaginationControl;\r\n","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\r\n\r\n/**\r\n * text box filter control\r\n */\r\nclass TextboxFilterControl extends BaseTextFilterControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseTextFilterControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const baseTextFilterControl = super.addControl(control);\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(baseTextFilterControl.id){\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseTextFilterControl.id);\r\n\r\n            if(deepLinkParam){\r\n                baseTextFilterControl.text = deepLinkParam.value;\r\n                baseTextFilterControl.element.value = deepLinkParam.value;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * on control event\r\n         */\r\n        baseTextFilterControl.element.addEventListener('keyup', e => {\r\n\r\n            e.preventDefault();\r\n\r\n            baseTextFilterControl.text = e.target.value;\r\n\r\n            this.textChanged(baseTextFilterControl);\r\n        });\r\n\r\n        //handle clear button\r\n        baseTextFilterControl.clearButtonID = (baseTextFilterControl.element.getAttribute('data-clear-btn-id') || '').trim();\r\n\r\n        if(baseTextFilterControl.clearButtonID){\r\n\r\n            const clearBtn = document.getElementById(baseTextFilterControl.clearButtonID);\r\n\r\n            if(clearBtn){\r\n\r\n                /**\r\n                 * on clear button click\r\n                 */\r\n                clearBtn.addEventListener('click', e => {\r\n\r\n                    e.preventDefault();\r\n\r\n                    baseTextFilterControl.text = '';\r\n\r\n                    this.textChanged(baseTextFilterControl);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * on text change\r\n     */\r\n    textChanged(baseTextFilterControl){\r\n\r\n        this.controls.forEach(control => {\r\n\r\n            if(control.isEqualTo(baseTextFilterControl, false)){\r\n\r\n                control.element.value = baseTextFilterControl.text;\r\n                control.text = baseTextFilterControl.text;\r\n            }\r\n        });\r\n\r\n        if(window.jplist) {\r\n\r\n            window.jplist.refresh(this.group);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TextboxFilterControl;","import BaseControl from '../base.control';\r\n\r\n/**\r\n * base text filter control\r\n */\r\nclass BaseTextFilterControl extends BaseControl{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {HTMLElement} element\r\n     */\r\n    constructor(element){\r\n        super(element);\r\n\r\n        if(element){\r\n\r\n            /**\r\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\r\n             * @type {string}\r\n             */\r\n            this.path = (element.getAttribute('data-path') || '').trim();\r\n\r\n            /**\r\n             * text value items filter by\r\n             * @type {string}\r\n             */\r\n            this._text = (element.getAttribute('data-text') || element.value || '').trim();\r\n\r\n            /**\r\n             * filter mode - contains (default), startsWith, endsWith, equal\r\n             * @type {string}\r\n             */\r\n            this.mode = (element.getAttribute('data-mode') || 'contains').trim();\r\n\r\n            /**\r\n             * optional ignore regex - used to ignore characters before sort\r\n             * @type {string}\r\n             */\r\n            this.regex = element.getAttribute('data-regex') || '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * text setter\r\n     * @param {string} value\r\n     */\r\n    set text(value){\r\n\r\n        this._text = (value || '').trim();\r\n    }\r\n\r\n    /**\r\n     * text getter\r\n     * @return {string}\r\n     */\r\n    get text(){\r\n\r\n        return this._text;\r\n    }\r\n\r\n\r\n    /**\r\n     * get text filter options used in FilterAction.textFilter method\r\n     * @return {Array.<{object}>} options\r\n     */\r\n    getTextFilterOptions(){\r\n\r\n        return {\r\n            path: this.path,\r\n            text: this.text,\r\n            mode: this.mode,\r\n            ignoreRegex: this.regex\r\n        };\r\n    }\r\n\r\n    /**\r\n     * check if current control has the same properties like the specified control;\r\n     * the values could be different\r\n     * @param {BaseTextFilterControl} control\r\n     * @param {boolean} includeValue\r\n     * @return {boolean}\r\n     */\r\n    isEqualTo(control, includeValue = true){\r\n\r\n        let isEqual = this.path === control.path &&\r\n            this.mode === control.mode &&\r\n            this.regex === control.regex;\r\n\r\n        if(includeValue){\r\n            isEqual = isEqual && this.text === control.text;\r\n        }\r\n\r\n        return isEqual;\r\n    }\r\n}\r\n\r\nexport default BaseTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\r\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\r\n\r\n/**\r\n * checkbox text filter control\r\n */\r\nclass CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup){\r\n\r\n    /**\r\n     * get text filter options from all controls in the group\r\n     * @return {Array.<object>} path filter options\r\n     */\r\n    getTextFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        //add all selected checkboxes\r\n        for(let checkbox of this.checkboxes){\r\n\r\n            if(checkbox.selected) {\r\n                options = options.concat(checkbox.getTextFilterOptions());\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n}\r\n\r\nexport default CheckboxTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\r\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\r\n\r\n/**\r\n * radio buttons text filter control\r\n */\r\nclass RadioButtonsTextFilterControl extends RadioButtonsMixin(BaseTextFilterControlsGroup){\r\n\r\n    /**\r\n     * get text filter options from all controls in the group\r\n     * @return {Array.<object>} path filter options\r\n     */\r\n    getTextFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        //get options from the latest selected radio if exists\r\n        let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n        if(latestSelectedRadio){\r\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\r\n        }\r\n\r\n        return options;\r\n    }\r\n}\r\n\r\nexport default RadioButtonsTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\r\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\r\n\r\n/**\r\n * buttons text filter control\r\n */\r\nclass ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup){\r\n\r\n    /**\r\n     * get text filter options from all controls in the group\r\n     * @return {Array.<object>} text filter options\r\n     */\r\n    getTextFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        //get options from the latest selected radio if exists\r\n        let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n        if(latestSelectedRadio){\r\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\r\n        }\r\n\r\n        //add all selected checkboxes\r\n        for(let checkbox of this.checkboxes){\r\n\r\n            if(checkbox.selected) {\r\n                options = options.concat(checkbox.getTextFilterOptions());\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n}\r\n\r\nexport default ButtonsTextFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\r\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\r\n\r\n/**\r\n * select filter control\r\n */\r\nclass SelectFilterControl extends BasePathFilterControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n\r\n        this.options = [];\r\n        this.selected = '';\r\n        this.id = '';\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BasePathFilterControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const selectFilterControl = super.addControl(control);\r\n\r\n        let options = selectFilterControl.element.querySelectorAll('option');\r\n\r\n        for(let option of options){\r\n\r\n            option.setAttribute('data-name', this.name);\r\n            option.setAttribute('data-group', this.group);\r\n\r\n            if(!this.options.find(opt => opt.element.value === option.value)){\r\n                this.options.push(new BasePathFilterControl(option));\r\n            }\r\n        }\r\n\r\n        this.selected = selectFilterControl.element.value;\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(selectFilterControl.id){\r\n\r\n            this.id = selectFilterControl.id;\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === selectFilterControl.id);\r\n\r\n            if(deepLinkParam){\r\n                selectFilterControl.element.value = deepLinkParam.value;\r\n                this.selected = deepLinkParam.value;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * on control event\r\n         */\r\n        selectFilterControl.element.addEventListener('change', e => {\r\n\r\n            e.preventDefault();\r\n\r\n            this.selected = e.target.value;\r\n\r\n            for(let select of this.controls){\r\n                select.element.value = this.selected;\r\n            }\r\n\r\n            if(window.jplist) {\r\n\r\n                window.jplist.refresh(this.group);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get path filter options from all controls in the group\r\n     * @return {Array.<object>} sortOptions\r\n     */\r\n    getPathFilterOptions(){\r\n\r\n        let selected = this.options.find(opt => opt.element.value === this.selected);\r\n\r\n        if(selected){\r\n            return [selected.getPathFilterOptions()];\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n\r\n        let selected = this.options.find(opt => opt.element.value === this.selected);\r\n\r\n        if(this.id){\r\n            return this.id + '=' + selected.element.value;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n}\r\n\r\nexport default SelectFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\r\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\r\n\r\n/**\r\n * checkbox path filter control\r\n */\r\nclass CheckboxPathFilterControl extends CheckboxMixin(BasePathFilterControlsGroup){\r\n\r\n    /**\r\n     * get path filter options from all controls in the group\r\n     * @return {Array.<object>} path filter options\r\n     */\r\n    getPathFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        //add all selected checkboxes\r\n        for(let checkbox of this.checkboxes){\r\n\r\n            if(checkbox.selected) {\r\n                options = options.concat(checkbox.getPathFilterOptions());\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n}\r\n\r\nexport default CheckboxPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\r\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\r\n\r\n/**\r\n * radio buttons path filter control\r\n */\r\nclass RadioButtonsPathFilterControl extends RadioButtonsMixin(BasePathFilterControlsGroup){\r\n\r\n    /**\r\n     * get path filter options from all controls in the group\r\n     * @return {Array.<object>} path filter options\r\n     */\r\n    getPathFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        //get options from the latest selected radio if exists\r\n        let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n        if(latestSelectedRadio){\r\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\r\n        }\r\n\r\n        return options;\r\n    }\r\n}\r\n\r\nexport default RadioButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\r\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\r\n\r\n/**\r\n * buttons path filter control\r\n */\r\nclass ButtonsPathFilterControl extends ButtonsMixin(BasePathFilterControlsGroup){\r\n\r\n    /**\r\n     * get path filter options from all controls in the group\r\n     * @return {Array.<object>} path filter options\r\n     */\r\n    getPathFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        //get options from the latest selected radio if exists\r\n        let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n        if(latestSelectedRadio){\r\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\r\n        }\r\n\r\n        //add all selected checkboxes\r\n        for(let checkbox of this.checkboxes){\r\n\r\n            if(checkbox.selected) {\r\n                options = options.concat(checkbox.getPathFilterOptions());\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n}\r\n\r\nexport default ButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\r\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\r\nimport BaseDropdownControl from '../../../base/controls/dropdown/base-dropdown.control';\r\n\r\n/**\r\n * dropdown filter control\r\n */\r\nclass DropdownFilterControl extends BasePathFilterControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n        this.selected = '';\r\n        this.id = '';\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BasePathFilterControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        //a dropdown has the following custom properties:\r\n        //  -- dropdown - custom dropdown behaviour, styles, classes\r\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\r\n        const basePathFilterControl = super.addControl(control);\r\n\r\n        //generate dropdown instance for the given control;\r\n        //this instance adds dropdown classes, styles and behaviour\r\n        basePathFilterControl.dropdown = new BaseDropdownControl(control.element);\r\n        basePathFilterControl.buttons = [];\r\n\r\n        //each button inside dropdown is a separate path filter control that defined by data-path attribute;\r\n        //they are stored in basePathFilterControl.buttons array\r\n        let buttons = basePathFilterControl.element.querySelectorAll('[data-path]');\r\n\r\n        for(let button of buttons){\r\n\r\n            button.setAttribute('data-name', this.name);\r\n            button.setAttribute('data-group', this.group);\r\n\r\n            let btnPathFilterControl = new BasePathFilterControl(button);\r\n\r\n            //save newly created button in the basePathFilterControl.buttons array\r\n            basePathFilterControl.buttons.push(btnPathFilterControl);\r\n\r\n            /**\r\n             * on control button click -> update the selected control\r\n             */\r\n            btnPathFilterControl.element.addEventListener('click', e => {\r\n\r\n                e.preventDefault();\r\n\r\n                //clicked button should be the selected one\r\n                this.selected = btnPathFilterControl;\r\n\r\n                this.setSelectedButton(basePathFilterControl);\r\n\r\n                if(window.jplist) {\r\n\r\n                    window.jplist.refresh(this.group);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.selected = DropdownFilterControl.getSelectedButton(basePathFilterControl.buttons);\r\n        this.setSelectedButton(basePathFilterControl);\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(basePathFilterControl.id){\r\n\r\n            this.id = basePathFilterControl.id;\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePathFilterControl.id);\r\n\r\n            if(deepLinkParam){\r\n\r\n                const deepLinkBtn = basePathFilterControl.buttons.find(btn => {\r\n\r\n                    const btnValue = btn.element.getAttribute('data-value');\r\n                    return (deepLinkParam.value === btnValue) ? btn : null;\r\n                });\r\n\r\n                if(deepLinkBtn) {\r\n                    this.selected = deepLinkBtn;\r\n                    this.setSelectedButton(basePathFilterControl);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get path filter options from all controls in the group\r\n     * @return {Array.<object>} pathFilterOptions\r\n     */\r\n    getPathFilterOptions(){\r\n\r\n        if(this.selected){\r\n            return [this.selected.getPathFilterOptions()];\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n\r\n        if(this.id && this.selected){\r\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * get selected button that has data-selected=\"true\" data attribute;\r\n     * if there is no data-selected attribute -> take the first button\r\n     * @param {Array.<BasePathFilterControl>} buttons\r\n     * @return {BasePathFilterControl|null}\r\n     */\r\n    static getSelectedButton(buttons){\r\n\r\n        if(buttons.length <= 0) return null;\r\n\r\n        for(let button of buttons){\r\n            if(button.element.getAttribute('data-selected') === 'true'){\r\n                return button;\r\n            }\r\n        }\r\n\r\n        return buttons[0];\r\n    }\r\n\r\n    /**\r\n     * set selected button\r\n     * @param {BasePathFilterControl} basePathFilterControl\r\n     */\r\n    setSelectedButton(basePathFilterControl){\r\n\r\n        for(let control of this.controls){\r\n\r\n            if(!control.dropdown) continue;\r\n\r\n            //verify that dropdown has such button\r\n            const dropdownBtn = basePathFilterControl.buttons.find(btn => this.selected.isEqualTo(btn));\r\n\r\n            if(dropdownBtn){\r\n\r\n                //update dropdown panels value\r\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\r\n            }\r\n\r\n            control.dropdown.close();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default DropdownFilterControl;","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\r\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\r\n\r\n/**\r\n * buttons range filter\r\n */\r\nclass ButtonsRangeFilter extends ButtonsMixin(BaseRangeFilterControlsGroup){\r\n\r\n    /**\r\n     * get range filter options from all controls in the group\r\n     * @return {Array.<object>} path filter options\r\n     */\r\n    getRangeFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        //get options from the latest selected radio if exists\r\n        let latestSelectedRadio = this.getLastSelectedRadio();\r\n\r\n        if(latestSelectedRadio){\r\n            options = options.concat(latestSelectedRadio.getRangeFilterOptions());\r\n        }\r\n\r\n        //add all selected checkboxes\r\n        for(let checkbox of this.checkboxes){\r\n\r\n            if(checkbox.selected) {\r\n                options = options.concat(checkbox.getRangeFilterOptions());\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n}\r\n\r\nexport default ButtonsRangeFilter;","import BaseControl from '../base.control';\r\n\r\n/**\r\n * base range filter control\r\n */\r\nclass BaseRangeFilterControl extends BaseControl{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {HTMLElement} element\r\n     */\r\n    constructor(element){\r\n        super(element);\r\n\r\n        if(element){\r\n\r\n            /**\r\n             * css selector or 'default' for the browser initial list; if path is empty -> the whole element\r\n             * @type {string}\r\n             */\r\n            this.path = (element.getAttribute('data-path') || '').trim();\r\n\r\n            /**\r\n             * min <= from <= (all numbers in the element) <= to <= max\r\n             * @type {number}\r\n             */\r\n            const from = element.getAttribute('data-from');\r\n\r\n            this.from = from === null ? -Infinity : Number(from);\r\n\r\n            if(isNaN(this.from)){\r\n                this.from = -Infinity;\r\n            }\r\n\r\n            /**\r\n             * min <= from <= (all numbers in the element) <= to <= max\r\n             * @type {number}\r\n             */\r\n            const to = element.getAttribute('data-to');\r\n            this.to = to === null ? Infinity : Number(to);\r\n\r\n            if(isNaN(this.to)){\r\n                this.to = Infinity;\r\n            }\r\n\r\n            /**\r\n             * min <= from <= (all numbers in the element) <= to <= max\r\n             * @type {number}\r\n             */\r\n            const min = element.getAttribute('data-min');\r\n            this.min = min === null ? this.from : Number(min);\r\n\r\n            if(isNaN(this.min)){\r\n                this.min = this.from;\r\n            }\r\n\r\n            /**\r\n             * min <= from <= (all numbers in the element) <= to <= max\r\n             * @type {number}\r\n             */\r\n            const max = element.getAttribute('data-max');\r\n            this.max = max === null ? this.to : Number(max);\r\n\r\n            if(isNaN(this.max)){\r\n                this.max = this.to;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get range filter options used in FilterAction.rangeFilter method\r\n     * @return {Array.<{object}>} options\r\n     */\r\n    getRangeFilterOptions(){\r\n\r\n        return {\r\n            path: this.path,\r\n            min: this.min,\r\n            from: this.from,\r\n            to: this.to,\r\n            max: this.max\r\n        };\r\n    }\r\n\r\n    /**\r\n     * check if current control has the same properties like the specified control\r\n     * @param {BaseRangeFilterControl} control\r\n     * @return {boolean}\r\n     */\r\n    isEqualTo(control){\r\n        return this.path === control.path &&\r\n                this.from === control.from &&\r\n                this.to === control.to &&\r\n                this.min === control.min &&\r\n                this.max === control.max;\r\n    }\r\n}\r\n\r\nexport default BaseRangeFilterControl;","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\r\nimport BaseSliderControl from '../../../base/controls/slider/base-slider.control';\r\n\r\n/**\r\n * range slider filter\r\n */\r\nclass SliderRangeFilter extends BaseRangeFilterControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     */\r\n    addControl(control){\r\n\r\n        const rangeSliderFilterControl = super.addControl(control);\r\n\r\n        const sliderEl = control.element.querySelector('[data-type=\"slider\"]');\r\n        rangeSliderFilterControl.val1Elements = control.element.querySelectorAll('[data-type=\"value-1\"]');\r\n        rangeSliderFilterControl.val2Elements = control.element.querySelectorAll('[data-type=\"value-2\"]');\r\n        rangeSliderFilterControl.minElements = control.element.querySelectorAll('[data-type=\"min\"]');\r\n        rangeSliderFilterControl.maxElements = control.element.querySelectorAll('[data-type=\"max\"]');\r\n\r\n        if(!sliderEl) return;\r\n\r\n        //control properties\r\n        const orientation = control.element.getAttribute('data-orientation') || 'horizontal'; //'vertical'\r\n\r\n        for(let el of rangeSliderFilterControl.minElements){\r\n            el.textContent = rangeSliderFilterControl.min;\r\n        }\r\n\r\n        for(let el of rangeSliderFilterControl.maxElements){\r\n            el.textContent = rangeSliderFilterControl.max;\r\n        }\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(rangeSliderFilterControl.id){\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === rangeSliderFilterControl.id);\r\n\r\n            if(deepLinkParam && deepLinkParam.value){\r\n                const parts = deepLinkParam.value.split('_');\r\n\r\n                if(parts.length === 2){\r\n\r\n                    rangeSliderFilterControl.from = Number(parts[0]) || 0;\r\n                    rangeSliderFilterControl.to = Number(parts[1]) || 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        rangeSliderFilterControl.slider = new BaseSliderControl(\r\n            sliderEl,\r\n            orientation === 'vertical',\r\n            rangeSliderFilterControl.min,\r\n            rangeSliderFilterControl.from,\r\n            rangeSliderFilterControl.to,\r\n            rangeSliderFilterControl.max,\r\n            (value1, value2) => {\r\n\r\n                for(let el of rangeSliderFilterControl.val1Elements){\r\n                    el.textContent = Math.round(value1);\r\n                }\r\n\r\n                for(let el of rangeSliderFilterControl.val2Elements){\r\n                    el.textContent = Math.round(value2);\r\n                }\r\n\r\n                for(let control of this.controls){\r\n\r\n                    if(!control.slider) continue;\r\n\r\n                    control.slider.setValues(value1, value2, false);\r\n                }\r\n\r\n                if(window.jplist) {\r\n\r\n                    window.jplist.refresh(this.group);\r\n                }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get range filter options from all controls in the group\r\n     * @return {Array.<object>} path filter options\r\n     */\r\n    getRangeFilterOptions(){\r\n\r\n        let options = [];\r\n\r\n        for(let control of this.controls){\r\n\r\n            if(!control.slider || !control.slider.handler1 || !control.slider.handler2) continue;\r\n\r\n            const controlOptions = control.getRangeFilterOptions();\r\n            controlOptions.from = control.slider.handler1.value;\r\n            controlOptions.to = control.slider.handler2.value;\r\n\r\n            options = options.concat(controlOptions);\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n\r\n        const arr = this.controls.map(control => {\r\n\r\n            if(!control.id || !control.slider || !control.slider.handler1 || !control.slider.handler2) return '';\r\n\r\n            return control.id + '=' + control.slider.handler1.value + '_' + control.slider.handler2.value;\r\n        }).filter(str => str !== '');\r\n\r\n        const unique = Array.from(new Set(arr));\r\n\r\n        return unique.join('&');\r\n\r\n    }\r\n}\r\n\r\nexport default SliderRangeFilter;","import './base-slider.control.css';\r\n\r\n/**\r\n * base slider control\r\n */\r\nclass BaseSliderControl{\r\n\r\n    /**\r\n     * control type defined in data-jplist-control attribute;\r\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\r\n     * @param {HTMLElement} element\r\n     * @param {boolean} isVertical\r\n     * @param {number} min\r\n     * @param {number} value1 - initial value 1\r\n     * @param {number} value2 - initial value2\r\n     * @param {number} max\r\n     * @param {Function} callback\r\n     */\r\n    constructor(element, isVertical = false, min = 0, value1 = 0, value2 = 0, max = 0, callback = (value1, value2) => {}){\r\n\r\n        if(element) {\r\n\r\n            this.element = element;\r\n            this.element.classList.add('jplist-slider');\r\n\r\n            if(!this.element) return;\r\n\r\n            this.isVertical = isVertical;\r\n            this.callback = callback;\r\n            this.min = min;\r\n            this.max = max;\r\n\r\n            if(isVertical){\r\n                this.element.classList.add('jplist-slider-vertical');\r\n            }\r\n\r\n            //create and append the first holder\r\n            this.handler1 = document.createElement('span');\r\n            this.handler1.classList.add('jplist-slider-holder-1');\r\n            this.element.appendChild(this.handler1);\r\n\r\n            //create and append the range element\r\n            this.range = document.createElement('span');\r\n            this.range.classList.add('jplist-slider-range');\r\n            this.element.appendChild(this.range);\r\n\r\n            //initial value\r\n            this.handler1.left = 0;\r\n            this.handler1.top = 0;\r\n            //this.handler1.value = this.getPreviewValue(0, min, max); //0\r\n\r\n            //create and append the second holder\r\n            this.handler2 = document.createElement('span');\r\n            this.handler2.classList.add('jplist-slider-holder-2');\r\n            this.element.appendChild(this.handler2);\r\n\r\n            //initial value\r\n            this.handler2.left = 0;\r\n            this.handler2.top = 0;\r\n            //this.handler2.value = this.getPreviewValue(0, min, max); //0\r\n\r\n            this.dragging = null;\r\n\r\n            this.handler1.addEventListener('mousedown', this.start.bind(this));\r\n            this.handler2.addEventListener('mousedown', this.start.bind(this));\r\n            this.handler1.addEventListener('touchstart', this.start.bind(this));\r\n            this.handler2.addEventListener('touchstart', this.start.bind(this));\r\n\r\n            document.addEventListener('mousemove', this.render.bind(this));\r\n            document.addEventListener('touchmove', this.render.bind(this));\r\n            window.addEventListener('resize', this.resize.bind(this));\r\n\r\n            document.addEventListener('mouseup', this.stop.bind(this));\r\n            document.addEventListener('touchend', this.stop.bind(this));\r\n            document.body.addEventListener('mouseleave', this.stop.bind(this));\r\n\r\n            this.element.addEventListener('mousedown', this.jump.bind(this));\r\n\r\n            //set initial values\r\n            this.setValues(value1, value2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set slider values from outside\r\n     * @param {number} value1\r\n     * @param {number} value2\r\n     * @param {boolean} sendCallback\r\n     */\r\n    setValues(value1, value2, sendCallback = true){\r\n\r\n        if(value2 < value1){\r\n            value2 = value1;\r\n        }\r\n\r\n        const pos1 = this.getInnerValue(value1, this.min, this.max);\r\n        const pos2 = this.getInnerValue(value2, this.min, this.max);\r\n\r\n        this.update({\r\n            x: pos2,\r\n            y: pos2\r\n        }, this.handler2, sendCallback);\r\n\r\n        this.update({\r\n            x: pos1,\r\n            y: pos1\r\n        }, this.handler1, sendCallback);\r\n    }\r\n\r\n    /**\r\n     * convert [0, slider-width] range to [min, max] range for the specified value\r\n     * @param {number} value\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @return {number} mappedValue\r\n     */\r\n    getPreviewValue(value, min, max){\r\n\r\n        const rect = this.element.getBoundingClientRect();\r\n        const size = this.isVertical? 'height': 'width';\r\n\r\n        const newStart = min;\r\n        const newEnd = max;\r\n        const originalStart = 0;\r\n        const originalEnd = rect[size];\r\n\r\n        //return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\r\n        return (newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart;\r\n    }\r\n\r\n    /**\r\n     * convert [min, max] range to [0, slider-width] range for the specified value\r\n     * @param {number} value\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @return {number} mappedValue\r\n     */\r\n    getInnerValue(value, min, max){\r\n\r\n        const rect = this.element.getBoundingClientRect();\r\n        const size = this.isVertical? 'height': 'width';\r\n\r\n        const newStart = 0;\r\n        const newEnd = rect[size];\r\n        const originalStart = min;\r\n        const originalEnd = max;\r\n\r\n        //return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\r\n        return (newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart;\r\n    }\r\n\r\n    /**\r\n     * jump to the specified point on the slider\r\n     * @param {Object} e\r\n     */\r\n    jump(e){\r\n        e.preventDefault();\r\n\r\n        let position = this.getHandlerPos(e);\r\n\r\n        if(this.isVertical){\r\n            this.dragging = Math.abs(position.y - this.handler1.top) < Math.abs(position.y - this.handler2.top) ? this.handler1 : this.handler2;\r\n        }\r\n        else{\r\n            this.dragging = Math.abs(position.x - this.handler1.left) < Math.abs(position.x - this.handler2.left) ? this.handler1 : this.handler2;\r\n        }\r\n\r\n        //render the updated state\r\n        this.render(e);\r\n    }\r\n\r\n    /**\r\n     * update z-index of the active handler\r\n     */\r\n    setZIndex(){\r\n\r\n        const handler1ZIndex = window.getComputedStyle ? Number(document.defaultView.getComputedStyle(this.handler1, null).getPropertyValue('z-index')) || 200 : 200;\r\n        const handler2ZIndex = window.getComputedStyle ? Number(document.defaultView.getComputedStyle(this.handler2, null).getPropertyValue('z-index')) || 200 : 200;\r\n\r\n        if(handler1ZIndex === handler2ZIndex){\r\n            this.dragging.style['z-index'] = handler1ZIndex + 1;\r\n        }\r\n        else{\r\n            const max = Math.max(handler1ZIndex, handler2ZIndex);\r\n            const min = Math.min(handler1ZIndex, handler2ZIndex);\r\n\r\n            this.handler1.style['z-index'] = min;\r\n            this.handler2.style['z-index'] = min;\r\n            this.dragging.style['z-index'] = max;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * start dragging\r\n     * @param {Object} e\r\n     */\r\n    start(e){\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        this.dragging = e.target;\r\n\r\n        //update z-index of the active handler\r\n        this.setZIndex();\r\n\r\n        //render the updated state\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * stop dragging\r\n     * @param {Object} e\r\n     */\r\n    stop(e){\r\n        //e.preventDefault();\r\n\r\n        this.dragging = null;\r\n    }\r\n\r\n    /**\r\n     * on window resize\r\n     * @param {Object} e\r\n     */\r\n    resize(e){\r\n\r\n        if(this.handler1 && this.handler2){\r\n\r\n            this.setValues(this.handler1.value, this.handler2.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * render the updated state\r\n     */\r\n    render(e){\r\n        if(e && this.dragging){\r\n\r\n            this.update(this.getHandlerPos(e), this.dragging);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update position and styles\r\n     * @param {object} position\r\n     * @param {element} handler\r\n     * @param {boolean} sendCallback\r\n     */\r\n    update(position, handler, sendCallback = true){\r\n\r\n        if(handler){\r\n\r\n            const rect = this.element.getBoundingClientRect();\r\n\r\n            const size = this.isVertical? 'height': 'width';\r\n            const xy = this.isVertical? 'y': 'x';\r\n            const lefttop = this.isVertical? 'top': 'left';\r\n\r\n            if(position[xy] < 0){\r\n                position[xy] = 0;\r\n            }\r\n\r\n            if(position[xy] > rect[size]){\r\n                position[xy] = rect[size];\r\n            }\r\n\r\n            if(handler === this.handler1 && position[xy] >= this.handler2[lefttop]){\r\n                position[xy] = this.handler2[lefttop];\r\n            }\r\n\r\n            if(handler === this.handler2 && position[xy] <= this.handler1[lefttop]){\r\n                position[xy] = this.handler1[lefttop];\r\n            }\r\n\r\n            //save current value\r\n            handler[lefttop] = position[xy];\r\n            //const value = Math.round(position[xy] * 100 / rect[size]); //value in %\r\n            handler.value = this.getPreviewValue(position[xy], this.min, this.max);\r\n\r\n            handler.style[lefttop] = (position[xy]) + 'px';\r\n\r\n            //update range element\r\n            this.range.style[lefttop] = this.handler1[lefttop] + 'px';\r\n\r\n            const rangeHeight = this.handler2[lefttop] - this.handler1[lefttop];\r\n            this.range.style[size] = (rangeHeight >= 0 ? rangeHeight : 0) + 'px';\r\n\r\n            //call callback function\r\n            if(this.callback && sendCallback){\r\n\r\n                this.callback(this.handler1.value, this.handler2.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * subtraction of 2 vectors\r\n     * @param {Object} v1 - vector #1\r\n     * @param {Object} v2 - vector #2\r\n     */\r\n    static sub(v1, v2){\r\n\r\n        return {\r\n            x: v1.x - v2.x,\r\n            y: v1.y - v2.y\r\n        };\r\n    }\r\n\r\n    /**\r\n     * get handler position from mouse / tap position\r\n     * @param {object} e\r\n     * @return {object} handler position\r\n     */\r\n    getHandlerPos(e){\r\n\r\n        const rect = this.element.getBoundingClientRect();\r\n\r\n        const point = {\r\n            x: e.touches && e.touches.length > 0 ? e.touches[0].pageX : e.clientX,\r\n            y: e.touches && e.touches.length > 0 ? e.touches[0].pageY : e.clientY\r\n        };\r\n\r\n        const vector = {\r\n            x: rect.left,\r\n            y: rect.top\r\n        };\r\n\r\n        return BaseSliderControl.sub(point, vector);\r\n    }\r\n\r\n}\r\n\r\nexport default BaseSliderControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\r\n\r\n/**\r\n * no results control\r\n * Example:\r\n * <div data-jplist-control=\"no-results\" data-group=\"group1\" name=\"no-results\">No Results Found</div>\r\n */\r\nclass NoResultsControl extends BaseControlsGroup{\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     * @return {BasePaginationControl|null}\r\n     */\r\n    addControl(control){\r\n\r\n        super.addControl(control);\r\n\r\n        control.element.addEventListener('jplist.state', (e) => {\r\n\r\n            if(!e.jplistState) return;\r\n\r\n            const itemsNumber = Number(e.jplistState.itemsNumber) || 0;\r\n            control.element.style.display = itemsNumber === 0 ? '' : 'none';\r\n\r\n        }, false);\r\n\r\n    }\r\n}\r\n\r\nexport default NoResultsControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\r\n\r\nconst SELECTED_CLASS = 'jplist-selected';\r\n\r\n/**\r\n * layout control\r\n */\r\nclass LayoutControl extends BaseControlsGroup{\r\n\r\n    /**\r\n     * constructor\r\n     * @param {string} group\r\n     * @param {string} name\r\n     * @param {Array.<BaseControl>=} controls\r\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\r\n     */\r\n    constructor(group, name, controls = [], deepLinkParams = null){\r\n        super(group, name, controls, deepLinkParams);\r\n\r\n        this.group = group;\r\n        this.name = name;\r\n\r\n        this.classNames = new Set();\r\n        this.selectedClassName = '';\r\n    }\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     * @return {BasePaginationControl|null}\r\n     */\r\n    addControl(control){\r\n\r\n        super.addControl(control);\r\n\r\n        control.groupClassName = control.element.getAttribute('data-class') || '';\r\n        control.selected = control.element.getAttribute('data-selected') === 'true';\r\n\r\n        //check if control contains a link and it is in the deep links parameters\r\n        if(control.id){\r\n\r\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === control.id);\r\n\r\n            if(deepLinkParam){\r\n                control.selected = deepLinkParam.value === '1';\r\n            }\r\n            //else{\r\n                //control.selected = false;\r\n            //}\r\n        }\r\n\r\n        this.classNames.add(control.groupClassName);\r\n\r\n        /**\r\n         * on button click\r\n         */\r\n         control.element.addEventListener('click', (e) => {\r\n\r\n             e.preventDefault();\r\n\r\n             this.handleSelectedControls(control.groupClassName);\r\n\r\n             this.handleClasses();\r\n\r\n             if(window.jplist) {\r\n\r\n                 window.jplist.refresh(this.group);\r\n             }\r\n\r\n         }, false);\r\n\r\n        this.handleClasses();\r\n    }\r\n\r\n    /**\r\n     * add / remove buttons classes\r\n     */\r\n     handleClasses(){\r\n\r\n        const groups = document.querySelectorAll('[data-jplist-group=\"' + this.group + '\"]');\r\n\r\n        //remove classes from all groups\r\n        this.resetAllGroups(groups);\r\n\r\n        let selected = this.getLatestSelectedControl();\r\n\r\n        if(!selected) return;\r\n\r\n        this.handleSelectedControls(selected.groupClassName);\r\n\r\n        //add specified class name to each group\r\n        LayoutControl.addClassToGroups(selected.groupClassName, groups);\r\n    }\r\n\r\n    /**\r\n     * get the latest selected control\r\n     * @return {BaseControl} selected control\r\n     */\r\n     getLatestSelectedControl(){\r\n\r\n        let selected = null;\r\n\r\n        for(let control of this.controls){\r\n\r\n            if(control.selected){\r\n                selected = control;\r\n            }\r\n        }\r\n\r\n        if(!selected && this.controls.length > 0){\r\n            selected = this.controls[0];\r\n        }\r\n\r\n        return selected;\r\n    }\r\n\r\n    /**\r\n     * remove classes from all groups\r\n     * @param {NodeList} groups\r\n     */\r\n     resetAllGroups(groups){\r\n\r\n        for(let group of groups){\r\n\r\n            //remove all classes\r\n            for(let cn of this.classNames){\r\n                group.classList.remove(cn);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handle selected controls\r\n     * @param {string} selectedGroupClassName\r\n     */\r\n     handleSelectedControls(selectedGroupClassName){\r\n\r\n        for(let control of this.controls){\r\n\r\n            if(control.groupClassName === selectedGroupClassName){\r\n                control.selected = true;\r\n                control.element.classList.add(SELECTED_CLASS);\r\n            }\r\n            else{\r\n                control.selected = false;\r\n                control.element.classList.remove(SELECTED_CLASS);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add specified class name to each group\r\n     * @param {string} groupClassName\r\n     * @param {NodeList} groups\r\n     */\r\n    static addClassToGroups(groupClassName, groups){\r\n\r\n        for(let group of groups){\r\n\r\n            //add class if needed\r\n            group.classList.add(groupClassName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get deep link according to the current control states\r\n     * @return {string}\r\n     */\r\n    getDeepLink(){\r\n        const arr = this.controls.map(control => {\r\n\r\n            if(control.id){\r\n                return control.selected ? control.id + '=1' : control.id + '=0';\r\n            }\r\n            else{\r\n                return '';\r\n            }\r\n\r\n        }).filter(str => str !== '');\r\n        const unique = Array.from(new Set(arr));\r\n        return unique.join('&');\r\n    }\r\n}\r\n\r\nexport default LayoutControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\r\n\r\n/**\r\n * reset control\r\n */\r\nclass ResetControl extends BaseControlsGroup{\r\n\r\n    /**\r\n     * add control to the group\r\n     * @param {BaseControl} control\r\n     * @return {BasePaginationControl|null}\r\n     */\r\n    addControl(control){\r\n\r\n        super.addControl(control);\r\n\r\n        /**\r\n         * on button click\r\n         */\r\n        control.element.addEventListener('click', (e) => {\r\n\r\n            e.preventDefault();\r\n\r\n            if(window.jplist) {\r\n\r\n                window.jplist.resetControls(this.group);\r\n            }\r\n\r\n        }, false);\r\n    }\r\n\r\n}\r\n\r\nexport default ResetControl;"],"sourceRoot":""}