{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/controls/base/groups/base-controls-group.js","webpack:///./src/controls/base/groups/sort/base-sort-controls-group.js","webpack:///./src/controls/base/controls/base.control.js","webpack:///./src/controls/base/groups/filter/base-path-filter-controls-group.js","webpack:///./src/controls/base/groups/filter/base-text-filter-controls-group.js","webpack:///./src/controls/base/controls/dropdown/base-dropdown.control.js","webpack:///./src/controls/base/controls/filter/base-path-filter.control.js","webpack:///./src/controls/base/groups/mixins/buttons.mixin.js","webpack:///./src/controls/base/controls/sort/base-sort.control.js","webpack:///./src/controls/base/groups/filter/base-range-filter-controls-group.js","webpack:///./src/controls/base/groups/mixins/radio-buttons.mixin.js","webpack:///./src/controls/base/groups/mixins/checkbox.mixin.js","webpack:///./src/controls/layout/layout.control.js","webpack:///./src/controls/no-results/no-results.control.js","webpack:///./src/controls/base/controls/slider/base-slider.control.js","webpack:///./src/controls/filter/range-filters/slider-range-filter/slider-range-filter.control.js","webpack:///./src/controls/base/controls/filter/base-range-filter.control.js","webpack:///./src/controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control.js","webpack:///./src/controls/filter/path-filters/dropdown-filter/dropdown-filter.control.js","webpack:///./src/controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control.js","webpack:///./src/controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control.js","webpack:///./src/controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control.js","webpack:///./src/controls/filter/path-filters/select-filter/select-filter.control.js","webpack:///./src/controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control.js","webpack:///./src/controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control.js","webpack:///./src/controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control.js","webpack:///./src/controls/base/controls/filter/base-text-filter.control.js","webpack:///./src/controls/filter/text-filters/textbox-filter/textbox-filter.control.js","webpack:///./src/controls/base/controls/pagination/base-pagination.control.js","webpack:///./src/controls/base/groups/pagination/base-pagination-controls-group.js","webpack:///./src/controls/pagination/pagination.control.js","webpack:///./src/controls/sort/dropdown-sort/dropdown-sort.control.js","webpack:///./src/controls/sort/select-sort/select-sort.control.js","webpack:///./src/controls/sort/checkbox-sort/checkbox-sort.control.js","webpack:///./src/controls/sort/radio-buttons-sort/radio-buttons-sort.control.js","webpack:///./src/controls/sort/buttons-sort/buttons-sort.control.js","webpack:///./src/controls/sort/hidden-sort/hidden-sort.control.js","webpack:///./src/actions/filter/filter.action.js","webpack:///./src/services/storage.service.js","webpack:///./src/services/deep-links.service.js","webpack:///./src/actions/pagination/pagination.action.js","webpack:///./src/actions/sort/sort.action.js","webpack:///./src/content/content-manager.js","webpack:///./src/jplist.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","BaseControlsGroup","group","controls","deepLinkParams","arguments","length","undefined","_classCallCheck","this","trim","toLowerCase","has","control","push","selectedJumpPath","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","jump","el","document","querySelector","elRect","getBoundingClientRect","width","height","getClientRects","prevEl","prevElRect","top","err","return","BaseSortControlsGroup","sortOptions","concat","getSortOptions","baseSortControl","_baseSort2","default","element","BaseControl","type","getAttribute","id","BasePathFilterControlsGroup","basePathFilterControl","_basePathFilter2","options","getPathFilterOptions","BaseTextFilterControlsGroup","getTextFilterOptions","baseTextFilterControl","_baseTextFilter2","dl","map","text","filter","str","Array","from","Set","join","BaseDropdownControl","panels","querySelectorAll","openedClass","panel","initialContent","innerHTML","contents","handlePanelsClick","_this","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","addEventListener","e","stopPropagation","atLeastOnePanelIsOpened","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","dropdownContent","classList","toggle","contains","add","remove","_iterator2","body","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","content","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_base","BasePathFilterControl","_possibleConstructorReturn","__proto__","getPrototypeOf","path","superclass","_superclass","_class","checkboxes","radios","_inherits","_createClass","key","_this2","baseButtonControl","selected","mode","deepLinkParam","find","param","handleRadios","handleCheckboxes","preventDefault","forEach","cb","isEqualTo","window","jplist","refresh","checked","latestSelectedRadio","radio","getLastSelectedRadio","cbArr","radioArr","combined","BaseSortControl","dataType","order","regex","dateTimeFormat","multipleSortsNumber","getMultipleSortsNumber","index","pathsNumber","attributes","attr","match","exec","nodeName","propIndex","Number","isInteger","ignoreRegex","isEqual","props","k","BaseRangeFilterControlsGroup","baseRangeFilterControl","_baseRangeFilter2","getRangeFilterOptions","baseControl","_baseControlsGroup","LayoutControl","classNames","selectedClassName","_get","groupClassName","handleSelectedControls","handleClasses","groups","resetAllGroups","getLatestSelectedControl","addClassToGroups","cn","selectedGroupClassName","arr","NoResultsControl","jplistState","itemsNumber","style","display","BaseSliderControl","isVertical","min","value1","value2","max","callback","handler1","createElement","appendChild","range","left","handler2","dragging","start","bind","render","stop","pos1","getInnerValue","pos2","update","x","y","newStart","newEnd","originalEnd","Math","round","originalStart","position","getHandlerPos","abs","target","handler","rect","size","xy","lefttop","getPreviewValue","rangeHeight","point","touches","pageX","clientX","pageY","clientY","vector","sub","v1","v2","SliderRangeFilter","rangeSliderFilterControl","sliderEl","val1Elements","val2Elements","minElements","maxElements","orientation","textContent","parts","split","to","slider","_baseSlider2","controlOptions","BaseRangeFilterControl","Infinity","ButtonsRangeFilter","_buttons2","_baseRangeFilterControlsGroup2","checkbox","DropdownFilterControl","dropdown","_baseDropdown2","buttons","button","setAttribute","btnPathFilterControl","setSelectedButton","getSelectedButton","deepLinkBtn","btn","btnValue","_this3","dropdownBtn","setPanelsContent","ButtonsPathFilterControl","_basePathFilterControlsGroup2","RadioButtonsPathFilterControl","_radioButtons2","CheckboxPathFilterControl","_checkbox2","SelectFilterControl","selectFilterControl","option","opt","_this4","ButtonsTextFilterControl","_baseTextFilterControlsGroup2","RadioButtonsTextFilterControl","CheckboxTextFilterControl","BaseTextFilterControl","_text","includeValue","_baseTextFilterControlsGroup","TextboxFilterControl","textChanged","clearButtonID","clearBtn","getElementById","BasePaginationControl","itemsPerPage","currentPage","disabledClass","selectedClass","BasePaginationControlsGroup","getPaginationOptions","paginationOptions","basePaginationControl","_basePagination2","PaginationControl","restoreFromDeepLink","pageButtonsHolder","btnTemplate","firstButtons","lastButtons","prevButtons","nextButtons","bindEventHandler","pageButtonClick","itemsPerPageSelects","updateItemsPerPageSelect","itemsPerPageDD","initCustomDropdowns","selectChange","labels","label","template","selects","select","toString","dd","selectedButton","_this5","firstChild","removeChild","_loop2","div","replace","RegExp","pageButton","rangeStart","rangeEnd","setPageAttr","pagesNumber","prevPage","nextPage","infos","end","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","html","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","info","pageNumber","isNaN","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","items","page","isEnabled","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","item","eventName","func","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_loop3","_iterator12","DropdownSortControl","btnSortControl","SelectSortControl","_baseSortControlsGroup","CheckboxSortControl","atLeastOneNotSelectedCheckbox","RadioButtonsSortControl","ButtonsSortControl","HiddenSortControl","FilterAction","filtered","formattedText","elements","shouldBeAdded","elText","startsWith","endsWith","indexOf","parseFloat","isFinite","itemElements","numbers","num","maxNumber","apply","minNumber","isNumeric","StorageService","storage","deepLink","expiration","cValue","encodeURIComponent","exdate","Date","cookie","setMinutes","getMinutes","toUTCString","isSupported","cookies","substr","decodeURIComponent","DeepLinksService","hash","hashStart","paramsMap","Map","formattedHash","params","currentGroupName","pair","getParam","set","groupValues","PaginationAction","ceil","halfRange","SortAction","sort","item1","item2","sortByIndex","sortHelper","optionsIndex","result","sortNumbers","sortDateTime","sortText","el1","el2","text1","text2","regexExpr","localeCompare","number1","number2","jplistIndex","datetime1","datetime2","date1","date2","getDateFromString","parse","getTime","dateTimeString","year","getDateWildcardValue","day","month","getMonthByWildcard","hour","minute","second","wildcard","datetimeString","regexValue","monthNumberOrName","monthIndex","months","findIndex","monthAliasesArray","monthAlias","ContentManager","settings","groupName","_step$value","_slicedToArray","cGroupName","groupValueArr","baseControlsGroups","collectControlsOptions","itemsBlock","fragment","getItemsFragment","_sort2","pathFilterOptions","pathFilterOption","_filter2","pathFilter","rangeFilterOptions","rangeFilterOption","rangeFilter","textFilterOptions","textFilterOption","textFilter","paginationAction","_pagination2","bcg","setPaginationOptions","paginatedItems","slice","root","sendStateEvent","deepLinking","updateDeepLink","getDeepLink","_storage2","storageName","cookiesExpiration","getJumpPath","groupJumpEl","groupJumpElRect","clientTop","pageYOffset","scroll","stateEvent","CustomEvent","baseControlsGroup","dispatchEvent","createDocumentFragment","hashStr","location","href","substring","history","replaceState","deeplink","keys","deepLinkParts","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","groupsMap","groupElements","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","groupElement","groupValue","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","controlInstance","_base2","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_deepLinks2","getUrlParams","deepLinkSavedInStorage","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","controlTypes","controlClass","controlGroup","addControl","res","findControls","controlsByGroupNames","findControlGroups","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_step18$value","groupControls","sameNameControls","findSameNameControls","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","values","_contentManager","jPList","assign","_contentManager2","splitByGroupAndName","findGroups","_hiddenSort2","_buttonsSort2","_radioButtonsSort2","_checkboxSort2","_selectSort2","_dropdownSort2","_textboxFilter2","_checkboxTextFilter2","_radioButtonsTextFilter2","_buttonsTextFilter2","_selectFilter2","_dropdownFilter2","_checkboxPathFilter2","_radioButtonsPathFilter2","_buttonsPathFilter2","_buttonsRangeFilter2","_sliderRangeFilter2","_noResults2","_layout2","_jplist2","init"],"mappings":"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","file":"jplist.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 44);\n","/**\n * represents a group of controls with the same data-name and data-group attributes\n */\nclass BaseControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls, deepLinkParams = null){\n\n        this.group = (group || '').trim().toLowerCase();\n        this.name = (name || 'default').trim();\n        this.controls = controls || [];\n\n        this.deepLinkParams = [];\n\n        if(deepLinkParams && deepLinkParams.has(this.group)){\n\n            this.deepLinkParams = deepLinkParams.get(this.group) || [];\n        }\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     */\n    addControl(control){\n        if(!control || control.name !== this.name || control.group !== this.group) return;\n\n        this.controls.push(control);\n    }\n\n    /**\n     * by default control's deep link is empty\n     * @returns {string}\n     */\n    getDeepLink(){\n        return '';\n    }\n\n    /**\n     * if multiple control in the group have data-jump attribute -> select the upper one\n     * @return {string}\n     */\n    getJumpPath(){\n\n        let selectedJumpPath = '';\n\n        for(let control of this.controls){\n\n            if(!control.jump) continue;\n\n            //top is always the upper ))\n            if(control.jump === 'top'){\n               return 'top';\n            }\n\n            const el = document.querySelector(control.jump);\n\n            if(!el) continue;\n\n            const elRect = el.getBoundingClientRect();\n\n            //make sure element is not hidden or disconnected\n            if (!elRect.width && !elRect.height && !elRect.getClientRects().length) continue;\n\n            if(!selectedJumpPath){\n\n                //select the first data-jump as the default value\n                selectedJumpPath = control.jump;\n            }\n            else{\n\n                const prevEl = document.querySelector(selectedJumpPath);\n\n                if(!prevEl) continue;\n\n                const prevElRect = prevEl.getBoundingClientRect();\n\n                //const elTop = elRect.top + window.pageYOffset - document.clientTop;\n                //const elLeft = elRect.left + window.pageXOffset - document.clientLeft;\n                //const prevElementTop = prevElRect.top + window.pageYOffset - document.clientTop;\n\n                if(elRect.top < prevElRect.top){\n                    selectedJumpPath = control.jump;\n                }\n\n            }\n        }\n\n        return selectedJumpPath;\n    }\n\n}\n\nexport default BaseControlsGroup;","import BaseControlsGroup from '../base-controls-group';\nimport BaseSortControl from '../../controls/sort/base-sort.control';\n\n/**\n * represents a group of sort controls with the same data-name and data-group attributes\n */\nclass BaseSortControlsGroup extends BaseControlsGroup{\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        for(let control of this.controls){\n            sortOptions = sortOptions.concat(control.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseSortControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseSortControl = new BaseSortControl(control.element);\n\n        this.controls.push(baseSortControl);\n\n        return baseSortControl;\n    }\n}\n\nexport default BaseSortControlsGroup;\n","/**\n * jPList Base Control\n * Each jPList control should extend this base control.\n */\nclass BaseControl{\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n\n        if(element) {\n\n            this.element = element;\n\n            /**\n             * used to define appropriate class for the control\n             * @type {string} required\n             */\n            this.type = (element.getAttribute('data-jplist-control') || '').trim().toLowerCase();\n\n            /**\n             * used to define the elements group that is influenced by this control\n             * @type {string=} optional\n             */\n            this.group = (element.getAttribute('data-group') || '').trim().toLowerCase();\n\n            /**\n             * control name\n             * @type {string} optional\n             */\n            this.name = (element.getAttribute('data-name') || element.getAttribute('name') || 'default').trim();\n\n            /**\n             * deep link parameter name\n             * @type {string} optional\n             */\n            this.id = (element.getAttribute('data-id') || '').trim().toLowerCase();\n\n            /**\n             * jump to an element after the action;\n             * and CSS selector or \"top\" keyword\n             * @type {string} optional\n             */\n            this.jump = (element.getAttribute('data-jump') || '').trim();\n        }\n    }\n}\n\nexport default BaseControl;","import BaseControlsGroup from '../base-controls-group';\nimport BasePathFilterControl from '../../controls/filter/base-path-filter.control';\n\n/**\n * represents a group of path filter controls with the same data-name and data-group attributes\n */\nclass BasePathFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePathFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const basePathFilterControl = new BasePathFilterControl(control.element);\n\n        this.controls.push(basePathFilterControl);\n\n        return basePathFilterControl;\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filer options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getPathFilterOptions());\n        }\n\n        return options;\n    }\n\n}\n\nexport default BasePathFilterControlsGroup;\n","import BaseControlsGroup from '../base-controls-group';\nimport BaseTextFilterControl from '../../controls/filter/base-text-filter.control';\n\n/**\n * represents a group of text filter controls with the same data-name and data-group attributes\n */\nclass BaseTextFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} text filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getTextFilterOptions());\n        }\n\n        return options;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseTextFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseTextFilterControl = new BaseTextFilterControl(control.element);\n\n        this.controls.push(baseTextFilterControl);\n\n        return baseTextFilterControl;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        const dl = this.controls.map(control => control.id && control.text.trim() !== '' ? (control.id + '=' + control.text.trim()) : '').filter(str => str !== '');\n\n        const unique = Array.from(new Set(dl));\n        return unique.join('&');\n    }\n}\n\nexport default BaseTextFilterControlsGroup;\n","import './base-dropdown.control.css';\n\n/**\n * base dropdown control\n */\nclass BaseDropdownControl{\n\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n\n        if(element) {\n\n            this.element = element;\n\n            if(!this.element) return;\n\n            //dropdown panel elements defined by data-type=\"panel\" data attribute; can be multiple;\n            this.panels = this.element.querySelectorAll('[data-type=\"panel\"]');\n            this.element.openedClass = (this.element.getAttribute('data-opened-class') || 'jplist-dd-opened').trim();\n\n            //keep panels initial html\n            for(let panel of this.panels){\n                panel.initialContent = panel.innerHTML;\n                panel.element = element;\n            }\n\n            //dropdown content elements defined by data-type=\"content\" data attribute; can be multiple;\n            this.contents = this.element.querySelectorAll('[data-type=\"content\"]');\n\n            //handle panels onclick event\n            this.handlePanelsClick();\n        }\n    }\n\n    /**\n     * handle panels onclick event\n     */\n    handlePanelsClick(){\n\n        if(!this.panels || this.panels.length <= 0) return;\n\n        for(let panel of this.panels){\n\n            /**\n             * on panel click\n             */\n            panel.addEventListener('click', e => {\n\n                e.stopPropagation();\n\n                let atLeastOnePanelIsOpened = false;\n\n                for(let dropdownContent of this.contents){\n\n                    dropdownContent.classList.toggle(panel.element.openedClass);\n\n                    if(dropdownContent.classList.contains(panel.element.openedClass)){\n                        atLeastOnePanelIsOpened = true;\n                    }\n                }\n\n                if(atLeastOnePanelIsOpened){\n                    panel.classList.add(panel.element.openedClass);\n                    panel.element.classList.add(panel.element.openedClass);\n                }\n                else{\n                    panel.classList.remove(panel.element.openedClass);\n                    panel.element.classList.remove(panel.element.openedClass);\n                }\n            });\n        }\n\n        /**\n         * close dropdowns on body click\n         */\n        document.body.addEventListener('click', e => {\n\n            for(let dropdownContent of this.contents){\n\n                dropdownContent.classList.remove(this.panels[0].element.openedClass);\n            }\n\n            for(let panel of this.panels){\n                panel.classList.remove(panel.element.openedClass);\n                panel.element.classList.remove(panel.element.openedClass);\n            }\n        });\n    }\n\n    /**\n     * set panels content\n     * @param {string} content\n     */\n    setPanelsContent(content){\n\n        for(let panel of this.panels){\n            panel.innerHTML = content;\n        }\n    }\n\n    /**\n     * restore panels content\n     */\n    restorePanelsContent(){\n\n        for(let panel of this.panels){\n\n            if(panel.initialContent) {\n                panel.innerHTML = panel.initialContent;\n            }\n        }\n    }\n}\n\nexport default BaseDropdownControl;","import BaseControl from '../base.control';\n\n/**\n * base path filter control\n */\nclass BasePathFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n        }\n    }\n\n    /**\n     * get path filter options used in FilterAction.pathFilter method\n     * @return {Array.<{object}>} options\n     */\n    getPathFilterOptions(){\n\n        return {\n            path: this.path\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control\n     * @param {BasePathFilterControl} control\n     * @return {boolean}\n     */\n    isEqualTo(control){\n        return this.path === control.path;\n    }\n}\n\nexport default BasePathFilterControl;","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * buttons mixin\n * used for multiple inheritance\n * usage example:\n * class ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst ButtonsMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseButtonControl = super.addControl(control);\n\n        //get additional control properties\n        baseButtonControl.selected = baseButtonControl.element.getAttribute('data-selected') === 'true';\n        baseButtonControl.mode = baseButtonControl.element.getAttribute('data-mode') || 'radio';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseButtonControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseButtonControl.id);\n\n            if(deepLinkParam){\n                baseButtonControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        if(baseButtonControl.mode === 'radio'){\n\n            this.radios.push(baseButtonControl);\n            this.handleRadios();\n        }\n\n        if(baseButtonControl.mode === 'checkbox'){\n\n            this.checkboxes.push(baseButtonControl);\n            this.handleCheckboxes();\n        }\n\n        /**\n         * on control click -> change the selected control\n         */\n        baseButtonControl.element.addEventListener('click', e => {\n\n            e.preventDefault();\n\n            if(baseButtonControl.mode === 'checkbox'){\n\n                baseButtonControl.selected = !baseButtonControl.selected;\n\n                this.checkboxes.forEach(cb => {\n\n                    if(cb.isEqualTo(baseButtonControl)){\n                        cb.selected = baseButtonControl.selected;\n                    }\n                });\n\n                this.handleCheckboxes();\n            }\n\n            if(baseButtonControl.mode === 'radio'){\n\n                for (let radio of this.radios) {\n                    radio.selected = false;\n                }\n\n                baseButtonControl.selected = true;\n\n                this.handleRadios();\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BasePathFilterControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio buttons\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n\n        const combined = cbArr.concat(radioArr);\n        const unique = Array.from(new Set(combined));\n        return unique.join('&');\n    }\n};\n\nexport default ButtonsMixin;","import BaseControl from '../base.control';\n\n/**\n * base sort control\n */\nclass BaseSortControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * optional text (default), number or datetime\n             * @type {string}\n             */\n            this.dataType = (element.getAttribute('data-type') || 'text').trim().toLowerCase();\n\n            /**\n             * optional sort order: asc (default) or desc\n             * @type {string}\n             */\n            this.order = (element.getAttribute('data-order') || 'asc').trim().toLowerCase();\n\n            /**\n             * optional ignore regex - used to ignore characters before sort\n             * @type {string}\n             */\n            this.regex = element.getAttribute('data-regex') || '';\n\n            /**\n             * optional datetime format - datetime structure using wilcards {year}|{month}|{day}|{hour}|{min}|{sec}, for example: {month}/{day}/{year}\n             * @type {string}\n             */\n            this.dateTimeFormat = (element.getAttribute('data-date-format') || '').trim().toLowerCase();\n\n            /**\n             * this property indicates the number of data attribute groups [{data-path, data-order, ...}, {data-path-1, data-order-1,...}, ...]\n             * only data-path attribute is required;\n             * if multipleSortsNum > 0 => multiple sort\n             * @type {number}\n             */\n            this.multipleSortsNumber = this.getMultipleSortsNumber(element);\n\n            for(let index=1; index <= this.multipleSortsNumber; index++){\n                this['path' + index] = (element.getAttribute('data-path-' + index) || '').trim();\n                this['dataType' + index] = (element.getAttribute('data-type-' + index) || 'text').trim().toLowerCase();\n                this['order' + index] = (element.getAttribute('data-order-' + index) || 'asc').trim().toLowerCase();\n                this['regex' + index] = element.getAttribute('data-regex-' + index) || '';\n                this['dateTimeFormat' + index] = (element.getAttribute('data-date-format-' + index) || '').trim().toLowerCase();\n            }\n\n        }\n    }\n\n    /**\n     * multiple sort is defined by another sets of data attributes like {data-path-1, data-order-1,...}, {data-path-2, data-order-2,...} etc\n     * this method counts the number of such sets (= the number of attributes data-path-1, data-path-2, ...)\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    getMultipleSortsNumber(element){\n\n        let pathsNumber = 0;\n\n        for(let attr of element.attributes){\n\n            let match = null;\n            const regex = /^data-path-([0-9]+)$/g;\n\n            while (match = regex.exec(attr.nodeName)) {\n\n                const propIndex = Number(match[1]);\n\n                if(!Number.isInteger(propIndex)) continue;\n                pathsNumber++;\n            }\n        }\n\n        return pathsNumber;\n    }\n\n    /**\n     * get sort options used in SortAction.sort method\n     * @return {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\n     */\n    getSortOptions(){\n\n        const options = [];\n\n        //initial path is required\n        if(this.path){\n\n            options.push({\n                path: this.path,\n                dataType: this.dataType,\n                order: this.order,\n                ignoreRegex: this.ignoreRegex,\n                dateTimeFormat: this.dateTimeFormat\n            });\n\n            for(let index = 1; index <= this.multipleSortsNumber; index++){\n\n                options.push({\n                    path: this['path' + index],\n                    dataType: this['dataType' + index],\n                    order: this['order' + index],\n                    ignoreRegex: this['ignoreRegex' + index],\n                    dateTimeFormat: this['dateTimeFormat' + index]\n                });\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * check if current base sort control has the same properties like the specified base sort control\n     * @param {BaseSortControl} baseSortControl\n     * @return {boolean}\n     */\n    isEqualTo(baseSortControl){\n\n        let isEqual = true;\n\n        const props = ['path', 'dataType', 'order', 'regex', 'dateTimeFormat'];\n\n        for(let i=0; i<props.length; i++){\n\n            isEqual = isEqual && this[props[i]] === baseSortControl[props[i]];\n        }\n\n        isEqual = isEqual && this.multipleSortsNumber === baseSortControl.multipleSortsNumber;\n\n        for(let i=1; i <= this.multipleSortsNumber; i++){\n\n            for(let k=0; k<props.length; k++){\n\n                isEqual = isEqual && this[props[k] + i] === baseSortControl[props[k] + i];\n            }\n        }\n\n        return isEqual;\n    }\n}\n\nexport default BaseSortControl;\n","import BaseControlsGroup from '../base-controls-group';\nimport BaseRangeFilterControl from '../../controls/filter/base-range-filter.control';\n\n/**\n * represents a group of range filter controls with the same data-name and data-group attributes\n */\nclass BaseRangeFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseRangeFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseRangeFilterControl = new BaseRangeFilterControl(control.element);\n\n        this.controls.push(baseRangeFilterControl);\n\n        return baseRangeFilterControl;\n    }\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} range filer options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getRangeFilterOptions());\n        }\n\n        return options;\n    }\n\n}\n\nexport default BaseRangeFilterControlsGroup;\n","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * radio buttons mixin\n * used for multiple inheritance\n * usage example:\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst RadioButtonsMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseControl = super.addControl(control);\n\n        //get additional control properties\n        baseControl.selected = baseControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\n\n            if(deepLinkParam){\n                baseControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.radios.push(baseControl);\n        this.handleRadios();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            for (let radio of this.radios) {\n                radio.selected = false;\n            }\n\n            baseControl.selected = true;\n\n            this.handleRadios();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group);\n            }\n        });\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BasePathFilterControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio buttons\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const unique = Array.from(new Set(radioArr));\n        return unique.join('&');\n    }\n};\n\nexport default RadioButtonsMixin;","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * checkbox mixin\n * used for multiple inheritance\n * usage example:\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst CheckboxMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseControl = super.addControl(control);\n\n        //get additional control properties\n        baseControl.selected = baseControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\n\n            if(deepLinkParam){\n                baseControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.checkboxes.push(baseControl);\n        this.handleCheckboxes();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            baseControl.selected = !baseControl.selected;\n\n            this.checkboxes.forEach(cb => {\n\n                if(cb.isEqualTo(baseControl)){\n                    cb.selected = baseControl.selected;\n                }\n            });\n\n            this.handleCheckboxes();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n        const unique = Array.from(new Set(cbArr));\n        return unique.join('&');\n    }\n};\n\nexport default CheckboxMixin;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * layout control\n */\nclass LayoutControl extends BaseControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.classNames = new Set();\n        this.selectedClassName = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePaginationControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.groupClassName = control.element.getAttribute('data-class') || '';\n        control.selected = control.element.getAttribute('data-selected') === 'true';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(control.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === control.id);\n\n            if(deepLinkParam){\n                control.selected = deepLinkParam.value === '1';\n            }\n            //else{\n                //control.selected = false;\n            //}\n        }\n\n        this.classNames.add(control.groupClassName);\n\n        /**\n         * on button click\n         */\n         control.element.addEventListener('click', (e) => {\n\n             e.preventDefault();\n\n             this.handleSelectedControls(control.groupClassName);\n\n             this.handleClasses();\n\n             if(window.jplist) {\n\n                 window.jplist.refresh(this.group);\n             }\n\n         }, false);\n\n        this.handleClasses();\n    }\n\n    /**\n     * add / remove buttons classes\n     */\n     handleClasses(){\n\n        const groups = document.querySelectorAll('[data-jplist-group=\"' + this.group + '\"]');\n\n        //remove classes from all groups\n        this.resetAllGroups(groups);\n\n        let selected = this.getLatestSelectedControl();\n\n        if(!selected) return;\n\n        this.handleSelectedControls(selected.groupClassName);\n\n        //add specified class name to each group\n        LayoutControl.addClassToGroups(selected.groupClassName, groups);\n    }\n\n    /**\n     * get the latest selected control\n     * @return {BaseControl} selected control\n     */\n     getLatestSelectedControl(){\n\n        let selected = null;\n\n        for(let control of this.controls){\n\n            if(control.selected){\n                selected = control;\n            }\n        }\n\n        if(!selected && this.controls.length > 0){\n            selected = this.controls[0];\n        }\n\n        return selected;\n    }\n\n    /**\n     * remove classes from all groups\n     * @param {NodeList} groups\n     */\n     resetAllGroups(groups){\n\n        for(let group of groups){\n\n            //remove all classes\n            for(let cn of this.classNames){\n                group.classList.remove(cn);\n            }\n        }\n    }\n\n    /**\n     * handle selected controls\n     * @param {string} selectedGroupClassName\n     */\n     handleSelectedControls(selectedGroupClassName){\n\n        for(let control of this.controls){\n\n            if(control.groupClassName === selectedGroupClassName){\n                control.selected = true;\n                control.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                control.selected = false;\n                control.element.classList.remove(SELECTED_CLASS);\n            }\n        }\n    }\n\n    /**\n     * add specified class name to each group\n     * @param {string} groupClassName\n     * @param {NodeList} groups\n     */\n    static addClassToGroups(groupClassName, groups){\n\n        for(let group of groups){\n\n            //add class if needed\n            group.classList.add(groupClassName);\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const arr = this.controls.map(control => {\n\n            if(control.id){\n                return control.selected ? control.id + '=1' : control.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n        const unique = Array.from(new Set(arr));\n        return unique.join('&');\n    }\n}\n\nexport default LayoutControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\n/**\n * no results control\n * Example:\n * <div data-jplist-control=\"no-results\" data-group=\"group1\" name=\"no-results\">No Results Found</div>\n */\nclass NoResultsControl extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePaginationControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.element.addEventListener('jplist.state', (e) => {\n\n            if(!e.jplistState) return;\n\n            const itemsNumber = Number(e.jplistState.itemsNumber) || 0;\n            control.element.style.display = itemsNumber === 0 ? '' : 'none';\n\n        }, false);\n\n    }\n}\n\nexport default NoResultsControl;","import './base-slider.control.css';\n\n/**\n * base slider control\n */\nclass BaseSliderControl{\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     * @param {boolean} isVertical\n     * @param {number} min\n     * @param {number} value1 - initial value 1\n     * @param {number} value2 - initial value2\n     * @param {number} max\n     * @param {Function} callback\n     */\n    constructor(element, isVertical = false, min = 0, value1 = 0, value2 = 0, max = 0, callback = (value1, value2) => {}){\n\n        if(element) {\n\n            this.element = element;\n            this.element.classList.add('jplist-slider');\n\n            if(!this.element) return;\n\n            this.isVertical = isVertical;\n            this.callback = callback;\n            this.min = min;\n            this.max = max;\n\n            if(isVertical){\n                this.element.classList.add('jplist-slider-vertical');\n            }\n\n            //create and append the first holder\n            this.handler1 = document.createElement('span');\n            this.handler1.classList.add('jplist-slider-holder-1');\n            this.element.appendChild(this.handler1);\n\n            //create and append the range element\n            this.range = document.createElement('span');\n            this.range.classList.add('jplist-slider-range');\n            this.element.appendChild(this.range);\n\n            //initial value\n            this.handler1.left = 0;\n            this.handler1.top = 0;\n            //this.handler1.value = this.getPreviewValue(0, min, max); //0\n\n            //create and append the second holder\n            this.handler2 = document.createElement('span');\n            this.handler2.classList.add('jplist-slider-holder-2');\n            this.element.appendChild(this.handler2);\n\n            //initial value\n            this.handler2.left = 0;\n            this.handler2.top = 0;\n            //this.handler2.value = this.getPreviewValue(0, min, max); //0\n\n            this.dragging = null;\n\n            this.handler1.addEventListener('mousedown', this.start.bind(this));\n            this.handler2.addEventListener('mousedown', this.start.bind(this));\n            this.handler1.addEventListener('touchstart', this.start.bind(this));\n            this.handler2.addEventListener('touchstart', this.start.bind(this));\n\n            document.addEventListener('mousemove', this.render.bind(this));\n            document.addEventListener('touchmove', this.render.bind(this));\n            document.addEventListener('resize', this.render.bind(this));\n\n            document.addEventListener('mouseup', this.stop.bind(this));\n            document.addEventListener('touchend', this.stop.bind(this));\n\n            this.element.addEventListener('mousedown', this.jump.bind(this));\n\n            if(value2 < value1){\n                value2 = value1;\n            }\n\n            const pos1 = this.getInnerValue(value1, min, max);\n            const pos2 = this.getInnerValue(value2, min, max);\n\n            this.update({\n                x: pos2,\n                y: pos2\n            }, this.handler2);\n\n            this.update({\n                x: pos1,\n                y: pos1\n            }, this.handler1);\n\n        }\n    }\n\n    /**\n     * convert [0, slider-width] range to [min, max] range for the specified value\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} mappedValue\n     */\n    getPreviewValue(value, min, max){\n\n        const rect = this.element.getBoundingClientRect();\n        const size = this.isVertical? 'height': 'width';\n\n        const newStart = min;\n        const newEnd = max;\n        const originalStart = 0;\n        const originalEnd = rect[size];\n\n        return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\n    }\n\n    /**\n     * convert [min, max] range to [0, slider-width] range for the specified value\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} mappedValue\n     */\n    getInnerValue(value, min, max){\n\n        const rect = this.element.getBoundingClientRect();\n        const size = this.isVertical? 'height': 'width';\n\n        const newStart = 0;\n        const newEnd = rect[size];\n        const originalStart = min;\n        const originalEnd = max;\n\n        return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\n    }\n\n    /**\n     * jump to the specified point on the slider\n     * @param {Object} e\n     */\n    jump(e){\n        e.preventDefault();\n\n        let position = this.getHandlerPos(e);\n\n        if(this.isVertical){\n            this.dragging = Math.abs(position.y - this.handler1.top) < Math.abs(position.y - this.handler2.top) ? this.handler1 : this.handler2;\n        }\n        else{\n            this.dragging = Math.abs(position.x - this.handler1.left) < Math.abs(position.x - this.handler2.left) ? this.handler1 : this.handler2;\n        }\n\n        //render the updated state\n        this.render(e);\n    }\n\n    /**\n     * start dragging\n     * @param {Object} e\n     */\n    start(e){\n        e.preventDefault();\n\n        this.dragging = e.target;\n\n        //render the updated state\n        this.render();\n    }\n\n    /**\n     * stop dragging\n     * @param {Object} e\n     */\n    stop(e){\n        e.preventDefault();\n\n        this.dragging = null;\n    }\n\n    /**\n     * render the updated state\n     */\n    render(e){\n\n        if(e && this.dragging){\n\n            this.update(this.getHandlerPos(e), this.dragging);\n        }\n    }\n\n    /**\n     * update position and styles\n     * @param {object} position\n     * @param {element} handler\n     */\n    update(position, handler){\n\n        if(handler){\n\n            const rect = this.element.getBoundingClientRect();\n\n            const size = this.isVertical? 'height': 'width';\n            const xy = this.isVertical? 'y': 'x';\n            const lefttop = this.isVertical? 'top': 'left';\n\n            if(position[xy] < 0){\n                position[xy] = 0;\n            }\n\n            if(position[xy] > rect[size]){\n                position[xy] = rect[size];\n            }\n\n            if(handler === this.handler1 && position[xy] > this.handler2[lefttop]){\n                position[xy] = this.handler2[lefttop];\n            }\n\n            if(handler === this.handler2 && position[xy] < this.handler1[lefttop]){\n                position[xy] = this.handler1[lefttop];\n            }\n\n            //save current value\n            handler[lefttop] = position[xy];\n            //const value = Math.round(position[xy] * 100 / rect[size]); //value in %\n            handler.value = this.getPreviewValue(position[xy], this.min, this.max);\n\n            handler.style[lefttop] = (position[xy]) + 'px';\n\n            //update range element\n            this.range.style[lefttop] = this.handler1[lefttop] + 'px';\n\n            const rangeHeight = this.handler2[lefttop] - this.handler1[lefttop];\n            this.range.style[size] = (rangeHeight >= 0 ? rangeHeight : 0) + 'px';\n\n            //call callback function\n            if(this.callback){\n                this.callback(this.handler1.value, this.handler2.value);\n            }\n        }\n    }\n\n    /**\n     * subtraction of 2 vectors\n     * @param {Object} v1 - vector #1\n     * @param {Object} v2 - vector #2\n     */\n    static sub(v1, v2){\n\n        return {\n            x: v1.x - v2.x,\n            y: v1.y - v2.y\n        };\n    }\n\n    /**\n     * get handler position from mouse / tap position\n     * @param {object} e\n     * @return {object} handler position\n     */\n    getHandlerPos(e){\n\n        const rect = this.element.getBoundingClientRect();\n\n        const point = {\n            x: e.touches && e.touches.length > 0 ? e.touches[0].pageX : e.clientX,\n            y: e.touches && e.touches.length > 0 ? e.touches[0].pageY : e.clientY\n        };\n\n        const vector = {\n            x: rect.left,\n            y: rect.top\n        };\n\n        return BaseSliderControl.sub(point, vector);\n    }\n\n}\n\nexport default BaseSliderControl;","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\nimport BaseSliderControl from '../../../base/controls/slider/base-slider.control';\n\n/**\n * range slider filter\n */\nclass SliderRangeFilter extends BaseRangeFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     */\n    addControl(control){\n\n        const rangeSliderFilterControl = super.addControl(control);\n\n        const sliderEl = control.element.querySelector('[data-type=\"slider\"]');\n        rangeSliderFilterControl.val1Elements = control.element.querySelectorAll('[data-type=\"value-1\"]');\n        rangeSliderFilterControl.val2Elements = control.element.querySelectorAll('[data-type=\"value-2\"]');\n        rangeSliderFilterControl.minElements = control.element.querySelectorAll('[data-type=\"min\"]');\n        rangeSliderFilterControl.maxElements = control.element.querySelectorAll('[data-type=\"max\"]');\n\n        if(!sliderEl) return;\n\n        //control properties\n        const orientation = control.element.getAttribute('data-orientation') || 'horizontal'; //'vertical'\n\n        for(let el of rangeSliderFilterControl.minElements){\n            el.textContent = rangeSliderFilterControl.min;\n        }\n\n        for(let el of rangeSliderFilterControl.maxElements){\n            el.textContent = rangeSliderFilterControl.max;\n        }\n\n        //check if control contains a link and it is in the deep links parameters\n        if(rangeSliderFilterControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === rangeSliderFilterControl.id);\n\n            if(deepLinkParam && deepLinkParam.value){\n                const parts = deepLinkParam.value.split('_');\n\n                if(parts.length === 2){\n\n                    rangeSliderFilterControl.from = Number(parts[0]) || 0;\n                    rangeSliderFilterControl.to = Number(parts[1]) || 0;\n                }\n            }\n        }\n\n        rangeSliderFilterControl.slider = new BaseSliderControl(\n            sliderEl,\n            orientation === 'vertical',\n            rangeSliderFilterControl.min,\n            rangeSliderFilterControl.from,\n            rangeSliderFilterControl.to,\n            rangeSliderFilterControl.max,\n            (value1, value2) => {\n\n                for(let el of rangeSliderFilterControl.val1Elements){\n                    el.textContent = value1;\n                }\n\n                for(let el of rangeSliderFilterControl.val2Elements){\n                    el.textContent = value2;\n                }\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group);\n                }\n        });\n    }\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n\n            if(!control.slider || !control.slider.handler1 || !control.slider.handler2) continue;\n\n            const controlOptions = control.getRangeFilterOptions();\n            controlOptions.from = control.slider.handler1.value;\n            controlOptions.to = control.slider.handler2.value;\n\n            options = options.concat(controlOptions);\n        }\n\n        return options;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        const arr = this.controls.map(control => {\n\n            if(!control.id || !control.slider || !control.slider.handler1 || !control.slider.handler2) return '';\n\n            return control.id + '=' + control.slider.handler1.value + '_' + control.slider.handler2.value;\n        }).filter(str => str !== '');\n\n        const unique = Array.from(new Set(arr));\n        return unique.join('&');\n\n    }\n}\n\nexport default SliderRangeFilter;","import BaseControl from '../base.control';\n\n/**\n * base range filter control\n */\nclass BaseRangeFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser initial list; if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.from = Number(element.getAttribute('data-from')) || -Infinity;\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.to = Number(element.getAttribute('data-to')) || Infinity;\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.min = Number(element.getAttribute('data-min')) || this.from;\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.max = Number(element.getAttribute('data-max')) || this.to;\n        }\n    }\n\n    /**\n     * get range filter options used in FilterAction.rangeFilter method\n     * @return {Array.<{object}>} options\n     */\n    getRangeFilterOptions(){\n\n        return {\n            path: this.path,\n            min: this.min,\n            from: this.from,\n            to: this.to,\n            max: this.max\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control\n     * @param {BaseRangeFilterControl} control\n     * @return {boolean}\n     */\n    isEqualTo(control){\n        return this.path === control.path &&\n                this.from === control.from &&\n                this.to === control.to &&\n                this.min === control.min &&\n                this.max === control.max;\n    }\n}\n\nexport default BaseRangeFilterControl;","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons range filter\n */\nclass ButtonsRangeFilter extends ButtonsMixin(BaseRangeFilterControlsGroup){\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getRangeFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getRangeFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default ButtonsRangeFilter;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\nimport BaseDropdownControl from '../../../base/controls/dropdown/base-dropdown.control';\n\n/**\n * dropdown filter control\n */\nclass DropdownFilterControl extends BasePathFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        //a dropdown has the following custom properties:\n        //  -- dropdown - custom dropdown behaviour, styles, classes\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\n        const basePathFilterControl = super.addControl(control);\n\n        //generate dropdown instance for the given control;\n        //this instance adds dropdown classes, styles and behaviour\n        basePathFilterControl.dropdown = new BaseDropdownControl(control.element);\n        basePathFilterControl.buttons = [];\n\n        //each button inside dropdown is a separate path filter control that defined by data-path attribute;\n        //they are stored in basePathFilterControl.buttons array\n        let buttons = basePathFilterControl.element.querySelectorAll('[data-path]');\n\n        for(let button of buttons){\n\n            button.setAttribute('data-name', this.name);\n            button.setAttribute('data-group', this.group);\n\n            let btnPathFilterControl = new BasePathFilterControl(button);\n\n            //save newly created button in the basePathFilterControl.buttons array\n            basePathFilterControl.buttons.push(btnPathFilterControl);\n\n            /**\n             * on control button click -> update the selected control\n             */\n            btnPathFilterControl.element.addEventListener('click', e => {\n\n                e.preventDefault();\n\n                //clicked button should be the selected one\n                this.selected = btnPathFilterControl;\n\n                this.setSelectedButton(basePathFilterControl);\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group);\n                }\n            });\n        }\n\n        this.selected = DropdownFilterControl.getSelectedButton(basePathFilterControl.buttons);\n        this.setSelectedButton(basePathFilterControl);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(basePathFilterControl.id){\n\n            this.id = basePathFilterControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePathFilterControl.id);\n\n            if(deepLinkParam){\n\n                const deepLinkBtn = basePathFilterControl.buttons.find(btn => {\n\n                    const btnValue = btn.element.getAttribute('data-value');\n                    return (deepLinkParam.value === btnValue) ? btn : null;\n                });\n\n                if(deepLinkBtn) {\n                    this.selected = deepLinkBtn;\n                    this.setSelectedButton(basePathFilterControl);\n                }\n            }\n        }\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} pathFilterOptions\n     */\n    getPathFilterOptions(){\n\n        if(this.selected){\n            return [this.selected.getPathFilterOptions()];\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        if(this.id && this.selected){\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\n        }\n\n        return '';\n    }\n\n    /**\n     * get selected button that has data-selected=\"true\" data attribute;\n     * if there is no data-selected attribute -> take the first button\n     * @param {Array.<BasePathFilterControl>} buttons\n     * @return {BasePathFilterControl|null}\n     */\n    static getSelectedButton(buttons){\n\n        if(buttons.length <= 0) return null;\n\n        for(let button of buttons){\n            if(button.element.getAttribute('data-selected') === 'true'){\n                return button;\n            }\n        }\n\n        return buttons[0];\n    }\n\n    /**\n     * set selected button\n     * @param {BasePathFilterControl} basePathFilterControl\n     */\n    setSelectedButton(basePathFilterControl){\n\n        for(let control of this.controls){\n\n            if(!control.dropdown) continue;\n\n            //verify that dropdown has such button\n            const dropdownBtn = basePathFilterControl.buttons.find(btn => this.selected.isEqualTo(btn));\n\n            if(dropdownBtn){\n\n                //update dropdown panels value\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\n            }\n        }\n    }\n\n}\n\nexport default DropdownFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons path filter control\n */\nclass ButtonsPathFilterControl extends ButtonsMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getPathFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default ButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\n\n/**\n * radio buttons path filter control\n */\nclass RadioButtonsPathFilterControl extends RadioButtonsMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\n        }\n\n        return options;\n    }\n}\n\nexport default RadioButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\n\n/**\n * checkbox path filter control\n */\nclass CheckboxPathFilterControl extends CheckboxMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getPathFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default CheckboxPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\n\n/**\n * select filter control\n */\nclass SelectFilterControl extends BasePathFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.options = [];\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const selectFilterControl = super.addControl(control);\n\n        let options = selectFilterControl.element.querySelectorAll('option');\n\n        for(let option of options){\n\n            option.setAttribute('data-name', this.name);\n            option.setAttribute('data-group', this.group);\n\n            if(!this.options.find(opt => opt.element.value === option.value)){\n                this.options.push(new BasePathFilterControl(option));\n            }\n        }\n\n        this.selected = selectFilterControl.element.value;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(selectFilterControl.id){\n\n            this.id = selectFilterControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === selectFilterControl.id);\n\n            if(deepLinkParam){\n                selectFilterControl.element.value = deepLinkParam.value;\n                this.selected = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control event\n         */\n        selectFilterControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            this.selected = e.target.value;\n\n            for(let select of this.controls){\n                select.element.value = this.selected;\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group);\n            }\n        });\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getPathFilterOptions(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(selected){\n            return [selected.getPathFilterOptions()];\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(this.id){\n            return this.id + '=' + selected.element.value;\n        }\n\n        return '';\n    }\n\n}\n\nexport default SelectFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons text filter control\n */\nclass ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} text filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getTextFilterOptions());\n            }\n        }\n\n        return options;\n    }\n\n}\n\nexport default ButtonsTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\n\n/**\n * radio buttons text filter control\n */\nclass RadioButtonsTextFilterControl extends RadioButtonsMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\n        }\n\n        return options;\n    }\n}\n\nexport default RadioButtonsTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\n\n/**\n * checkbox text filter control\n */\nclass CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getTextFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default CheckboxTextFilterControl;","import BaseControl from '../base.control';\n\n/**\n * base text filter control\n */\nclass BaseTextFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * text value items filter by\n             * @type {string}\n             */\n            this._text = (element.getAttribute('data-text') || element.value || '').trim();\n\n            /**\n             * filter mode - contains (default), startsWith, endsWith, equal\n             * @type {string}\n             */\n            this.mode = (element.getAttribute('data-mode') || 'contains').trim();\n\n            /**\n             * optional ignore regex - used to ignore characters before sort\n             * @type {string}\n             */\n            this.regex = element.getAttribute('data-regex') || '';\n        }\n    }\n\n    /**\n     * text setter\n     * @param {string} value\n     */\n    set text(value){\n\n        this._text = (value || '').trim();\n    }\n\n    /**\n     * text getter\n     * @return {string}\n     */\n    get text(){\n\n        return this._text;\n    }\n\n\n    /**\n     * get text filter options used in FilterAction.textFilter method\n     * @return {Array.<{object}>} options\n     */\n    getTextFilterOptions(){\n\n        return {\n            path: this.path,\n            text: this.text,\n            mode: this.mode,\n            ignoreRegex: this.regex\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control;\n     * the values could be different\n     * @param {BaseTextFilterControl} control\n     * @param {boolean} includeValue\n     * @return {boolean}\n     */\n    isEqualTo(control, includeValue = true){\n\n        let isEqual = this.path === control.path &&\n            this.mode === control.mode &&\n            this.regex === control.regex;\n\n        if(includeValue){\n            isEqual = isEqual && this.text === control.text;\n        }\n\n        return isEqual;\n    }\n}\n\nexport default BaseTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\n\n/**\n * text box filter control\n */\nclass TextboxFilterControl extends BaseTextFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseTextFilterControl} control\n     */\n    addControl(control){\n\n        const baseTextFilterControl = super.addControl(control);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseTextFilterControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseTextFilterControl.id);\n\n            if(deepLinkParam){\n                baseTextFilterControl.text = deepLinkParam.value;\n                baseTextFilterControl.element.value = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control event\n         */\n        baseTextFilterControl.element.addEventListener('keyup', e => {\n\n            e.preventDefault();\n\n            baseTextFilterControl.text = e.target.value;\n\n            this.textChanged(baseTextFilterControl);\n        });\n\n        //handle clear button\n        baseTextFilterControl.clearButtonID = (baseTextFilterControl.element.getAttribute('data-clear-btn-id') || '').trim();\n\n        if(baseTextFilterControl.clearButtonID){\n\n            const clearBtn = document.getElementById(baseTextFilterControl.clearButtonID);\n\n            if(clearBtn){\n\n                /**\n                 * on clear button click\n                 */\n                clearBtn.addEventListener('click', e => {\n\n                    e.preventDefault();\n\n                    baseTextFilterControl.text = '';\n\n                    this.textChanged(baseTextFilterControl);\n                });\n            }\n        }\n    }\n\n    /**\n     * on text change\n     */\n    textChanged(baseTextFilterControl){\n\n        this.controls.forEach(control => {\n\n            if(control.isEqualTo(baseTextFilterControl, false)){\n\n                control.element.value = baseTextFilterControl.text;\n                control.text = baseTextFilterControl.text;\n            }\n        });\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group);\n        }\n    }\n\n}\n\nexport default TextboxFilterControl;","import BaseControl from '../base.control';\n\n/**\n * base pagination control\n */\nclass BasePaginationControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * optional, 10 by default\n             * the max number of items per page\n             */\n            this.itemsPerPage = Number(element.getAttribute('data-items-per-page')) || 10;\n\n            /**\n             * optional, 0 by default\n             * the initial page\n             */\n            this.currentPage = Number(element.getAttribute('data-current-page')) || 0;\n\n            /**\n             * optional, 10 by default\n             * max number of visible pagination button\n             */\n            this.range = Number(element.getAttribute('data-range')) || 10;\n\n            /**\n             * CSS class that is used on disabled pagination buttons\n             * @type {string|string}\n             */\n            this.disabledClass = (element.getAttribute('data-disabled-class') || 'jplist-disabled').trim();\n\n            /**\n             * CSS class that is used on selected pagination buttons\n             * @type {string|string}\n             */\n            this.selectedClass = (element.getAttribute('data-selected-class') || 'jplist-selected').trim();\n        }\n    }\n\n    /**\n     * get pagination options\n     * @return {object} options\n     */\n    getPaginationOptions(){\n\n        return {\n            itemsPerPage: this.itemsPerPage,\n            currentPage: this.currentPage,\n            range: this.range\n        };\n    }\n}\n\nexport default BasePaginationControl;\n","import BaseControlsGroup from '../base-controls-group';\nimport BasePaginationControl from '../../controls/pagination/base-pagination.control';\n\n/**\n * represents a group of pagination controls with the same data-name and data-group attributes\n */\nclass BasePaginationControlsGroup extends BaseControlsGroup{\n\n    /**\n     * there can be only 1 pagination options object;\n     * in case of multiple -> get the latest\n     * @return {object|null} pagination options\n     */\n    getPaginationOptions(){\n\n        if(this.controls.length > 0){\n            return this.controls[this.controls.length - 1].getPaginationOptions();\n        }\n\n        return null;\n    }\n\n    /**\n     * update controls according to the pagination options calculated using PaginationAction class;\n     * @param {PaginationAction} paginationOptions\n     */\n    setPaginationOptions(paginationOptions){}\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePaginationControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const basePaginationControl = new BasePaginationControl(control.element);\n\n        this.controls.push(basePaginationControl);\n\n        return basePaginationControl;\n    }\n}\n\nexport default BasePaginationControlsGroup;\n","import BasePaginationControlsGroup from '../base/groups/pagination/base-pagination-controls-group';\nimport BaseDropdownControl from '../base/controls/dropdown/base-dropdown.control';\n\n/**\n * pagination control\n */\nclass PaginationControl extends BasePaginationControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.currentPage = 0;\n        this.itemsPerPage = 0;\n        this.range = 0;\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePaginationControl} control\n     */\n    addControl(control){\n\n        const basePaginationControl = super.addControl(control);\n\n        //update properties - we take them from the latest pagination control in the group\n        this.currentPage = basePaginationControl.currentPage;\n        this.itemsPerPage = Number(basePaginationControl.itemsPerPage) || 0;\n        this.range = basePaginationControl.range;\n\n        //restore control state from the deep link value if needed\n        this.restoreFromDeepLink(basePaginationControl);\n\n        //this template is used for generating pagination buttons\n        basePaginationControl.pageButtonsHolder = basePaginationControl.element.querySelector('[data-type=\"pages\"]');\n\n        if(basePaginationControl.pageButtonsHolder){\n            basePaginationControl.btnTemplate = basePaginationControl.pageButtonsHolder.innerHTML;\n        }\n\n        //first, last, next and prev button\n        basePaginationControl.firstButtons = basePaginationControl.element.querySelectorAll('[data-type=\"first\"]');\n        basePaginationControl.lastButtons = basePaginationControl.element.querySelectorAll('[data-type=\"last\"]');\n        basePaginationControl.prevButtons = basePaginationControl.element.querySelectorAll('[data-type=\"prev\"]');\n        basePaginationControl.nextButtons = basePaginationControl.element.querySelectorAll('[data-type=\"next\"]');\n\n        //event handlers\n        PaginationControl.bindEventHandler(basePaginationControl.firstButtons, 'click', this.pageButtonClick.bind(this));\n        PaginationControl.bindEventHandler(basePaginationControl.lastButtons, 'click', this.pageButtonClick.bind(this));\n        PaginationControl.bindEventHandler(basePaginationControl.prevButtons, 'click', this.pageButtonClick.bind(this));\n        PaginationControl.bindEventHandler(basePaginationControl.nextButtons, 'click', this.pageButtonClick.bind(this));\n\n        //items per page select\n        basePaginationControl.itemsPerPageSelects = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page\"]'));\n        this.updateItemsPerPageSelect(basePaginationControl.itemsPerPageSelects);\n\n        //items per page custom dropdowns\n        basePaginationControl.itemsPerPageDD = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page-dd\"]'));\n        this.initCustomDropdowns(basePaginationControl.itemsPerPageDD);\n\n        PaginationControl.bindEventHandler(basePaginationControl.itemsPerPageSelects, 'change', this.selectChange.bind(this));\n\n        //information labels\n        basePaginationControl.labels = basePaginationControl.element.querySelectorAll('[data-type=\"info\"]');\n\n        if(basePaginationControl.labels) {\n            for (let label of basePaginationControl.labels) {\n                label.template = label.innerHTML;\n            }\n        }\n    }\n\n    /**\n     * update items per page value of select group\n     * @param {Array.<HTMLElement>} selects\n     */\n    updateItemsPerPageSelect(selects){\n\n        for(let select of selects){\n\n            const option = Array.from(select.options).find(option => option.value === this.itemsPerPage.toString());\n\n            if(option) {\n                select.value = Number(this.itemsPerPage) || 0;\n            }\n            else{\n                select.value = 0;\n            }\n        }\n    }\n\n    /**\n     * init custom dropdowns\n     * @param {HTMLCollection} itemsPerPageDD\n     */\n    initCustomDropdowns(itemsPerPageDD){\n\n        if(!itemsPerPageDD || itemsPerPageDD.length <=0) return;\n\n        for(let dd of itemsPerPageDD){\n\n            //create dropdown instance for each dd HTML structure;\n            //this instance adds dropdown classes, styles and behaviour\n            dd.dropdown = new BaseDropdownControl(dd);\n\n            //all dropdown buttons are keeps as buttons property\n            dd.buttons = Array.from(dd.querySelectorAll('[data-value]'));\n\n            for(let button of dd.buttons){\n\n                button.addEventListener('click', (e) => {\n\n                    e.preventDefault();\n\n                    this.itemsPerPage = Number(button.getAttribute('data-value')) || 0;\n\n                    //set selected button in all dropdowns for the current this.itemsPerPage value\n                    this.setSelectedButton();\n\n                    if(window.jplist) {\n\n                        window.jplist.refresh(this.group);\n                    }\n                });\n            }\n        }\n\n        //set selected button in all dropdowns for the current this.itemsPerPage value\n        this.setSelectedButton();\n    }\n\n    // --------------------- BUTTONS ---------------------\n\n    /**\n     * set selected button in all dropdowns for the current this.itemsPerPage value\n     */\n    setSelectedButton(){\n\n        for(let control of this.controls){\n\n            if(!control.itemsPerPageDD) continue;\n\n            for(let dd of control.itemsPerPageDD){\n\n                if(!dd.buttons) continue;\n\n                let selectedButton = dd.buttons.find(button => {\n\n                    const btnValue = Number(button.getAttribute('data-value')) || 0;\n                    return btnValue === this.itemsPerPage;\n                });\n\n                if(!selectedButton){\n\n                    selectedButton = dd.buttons.find(button => {\n                        const btnValue = Number(button.getAttribute('data-value')) || 0;\n                        return btnValue === 0;\n                    });\n                }\n\n                if(selectedButton){\n\n                    dd.dropdown.setPanelsContent(selectedButton.textContent);\n                }\n            }\n        }\n    }\n\n    // --------------------- OPTIONS ---------------------\n\n    /**\n     * there can be only 1 pagination options object;\n     * in case of multiple -> get the latest\n     * @return {object} pagination options\n     */\n    getPaginationOptions(){\n\n        return {\n            itemsPerPage: this.itemsPerPage,\n            currentPage: this.currentPage,\n            range: this.range\n        };\n    }\n\n    /**\n     * update controls according to the pagination options calculated using PaginationAction class;\n     * @param {PaginationAction} paginationOptions\n     */\n    setPaginationOptions(paginationOptions){\n\n        if(!paginationOptions) return;\n\n        //update properties\n        this.currentPage = paginationOptions.currentPage;\n        this.itemsPerPage = paginationOptions.itemsPerPage;\n\n        for(let control of this.controls){\n\n            if(!control.btnTemplate || !control.pageButtonsHolder) continue;\n\n            //remove all old buttons\n            while (control.pageButtonsHolder.firstChild) {\n                control.pageButtonsHolder.removeChild(control.pageButtonsHolder.firstChild);\n            }\n\n            //generate new buttons\n            for (let i = paginationOptions.rangeStart; i <= paginationOptions.rangeEnd; i++) {\n\n                //update button text macros and button attributes\n                const div = document.createElement('div');\n                div.innerHTML = control.btnTemplate.replace(new RegExp('{pageNumber}', 'g'), (i+1)).trim();\n                const pageButton = div.firstChild;\n\n                let btn = pageButton.querySelector('[data-type=\"page\"]');\n                if(!btn){\n                    btn = pageButton;\n                }\n\n                btn.setAttribute('data-page', i.toString());\n\n                if(i === this.currentPage){\n\n                    btn.classList.add(control.selectedClass);\n                    btn.setAttribute('data-selected', 'true');\n                }\n\n                //on page button click event handler\n                btn.addEventListener('click', (e) => { this.pageButtonClick(e, btn); });\n\n                //add button to the buttons holder\n                control.pageButtonsHolder.appendChild(pageButton);\n            }\n\n            //update data-page attribute of first, last, prev and next buttons\n            PaginationControl.setPageAttr(control.firstButtons, 0, this.currentPage !== 0, control.disabledClass);\n\n            PaginationControl.setPageAttr(control.lastButtons,\n                paginationOptions.pagesNumber - 1,\n                this.currentPage !== paginationOptions.pagesNumber - 1,\n                control.disabledClass);\n\n            PaginationControl.setPageAttr(control.prevButtons,\n                paginationOptions.prevPage,\n                this.currentPage !== 0,\n                control.disabledClass);\n\n            PaginationControl.setPageAttr(control.nextButtons,\n                paginationOptions.nextPage,\n                this.currentPage !== paginationOptions.pagesNumber - 1,\n                control.disabledClass);\n\n            const infos = [\n                {key: '{pageNumber}', value: paginationOptions.currentPage + 1},\n                {key: '{pagesNumber}', value: paginationOptions.pagesNumber},\n                {key: '{startItem}', value: paginationOptions.start + 1},\n                {key: '{endItem}', value: paginationOptions.end},\n                {key: '{itemsNumber}', value: paginationOptions.itemsNumber}\n            ];\n\n            //update information labels\n            if(control.labels) {\n                for (let label of control.labels) {\n\n                    if(!label.template) continue;\n\n                    let html = label.template;\n\n                    for(let info of infos){\n                        html = html.replace(new RegExp(info.key, 'g'), info.value);\n                    }\n\n                    label.innerHTML = html;\n                }\n            }\n        }\n    }\n\n    // --------------------- EVENT HANDLERS ---------------------\n\n    /**\n     * page, first, last, prev and next button onclick handler\n     * @param {HTMLElement} btn\n     */\n    pageButtonClick(e, btn){\n\n        if(e) {\n            e.preventDefault();\n        }\n\n        const pageNumber = btn ? btn.getAttribute('data-page') : e.target.getAttribute('data-page');\n        this.currentPage = Number(pageNumber) || 0;\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group);\n        }\n    }\n\n    /**\n     * on items per page select change\n     */\n    selectChange(e){\n\n        e.preventDefault();\n\n        const itemsPerPage = Number(e.target.value);\n\n        if(!isNaN(itemsPerPage)){\n\n            this.itemsPerPage = itemsPerPage;\n\n            //update the selected values of all controls\n            for(let control of this.controls){\n                this.updateItemsPerPageSelect(control.itemsPerPageSelects);\n            }\n        }\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group);\n        }\n    }\n\n    // --------------------- DEEP LINK ---------------------\n\n    /**\n     * restore control state from the deep link value\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    restoreFromDeepLink(basePaginationControl){\n\n        if(basePaginationControl.id){\n\n            this.id = basePaginationControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePaginationControl.id);\n\n            if(deepLinkParam){\n\n                const parts = deepLinkParam.value.split('-');\n\n                if(parts.length !== 2) return;\n\n                const currentPage = Number(parts[0]);\n                const itemsPerPage = Number(parts[1]);\n\n                if(isNaN(currentPage) || isNaN(itemsPerPage)) return;\n\n                this.currentPage = currentPage;\n                this.itemsPerPage = itemsPerPage;\n            }\n        }\n    }\n\n    /**\n     * by default control's deep link is empty\n     * @returns {string}\n     */\n    getDeepLink(){\n\n        if(this.id){\n            return this.id + '=' + this.currentPage + '-' + this.itemsPerPage;\n        }\n\n        return '';\n    }\n\n    // --------------------- HELPERS ---------------------\n\n    /**\n     * update page button attributes and styles of the elements collection\n     * @param {HTMLCollection} items\n     * @param {number} page\n     * @param {boolean} isEnabled\n     * @param {string} disabledClass\n     */\n    static setPageAttr(items, page, isEnabled, disabledClass){\n\n        if(!items) return;\n\n        for(let item of items){\n            item.setAttribute('data-page', page);\n\n            if(isEnabled){\n                item.classList.remove(disabledClass);\n            }\n            else{\n                item.classList.add(disabledClass);\n            }\n        }\n    }\n\n    /**\n     * bind event handler to the items collection\n     * @param {HTMLCollection} items\n     * @param {string} eventName\n     * @param {Function} func\n     */\n    static bindEventHandler(items, eventName, func){\n\n        if(!items) return;\n\n        for(let item of items){\n            item.addEventListener(eventName, (e) => {func(e, item); });\n        }\n    }\n}\n\nexport default PaginationControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\nimport BaseDropdownControl from '../../base/controls/dropdown/base-dropdown.control';\n\n/**\n * dropdown sort control\n */\nclass DropdownSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.selected = null;\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        //a dropdown has the following custom properties:\n        //  -- dropdown - custom dropdown behaviour, styles, classes\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\n        const baseSortControl = super.addControl(control);\n\n        //generate dropdown instance for the given control;\n        //this instance adds dropdown classes, styles and behaviour\n        baseSortControl.dropdown = new BaseDropdownControl(control.element);\n        baseSortControl.buttons = [];\n\n        //each button inside dropdown is a separate sort control that defined by data-path attribute;\n        //they are stored in baseSortControl.buttons array\n        let buttons = baseSortControl.element.querySelectorAll('[data-path]');\n\n        for(let button of buttons){\n\n            //all buttons inherits data-name and data-group attributes of the root dropdown\n            button.setAttribute('data-name', this.name);\n            button.setAttribute('data-group', this.group);\n\n            let btnSortControl = new BaseSortControl(button);\n\n            //save newly created button in the baseSortControl.buttons array\n            baseSortControl.buttons.push(btnSortControl);\n\n            /**\n             * on control button click -> update the selected control\n             */\n            btnSortControl.element.addEventListener('click', e => {\n\n                e.preventDefault();\n\n                //clicked button should be the selected one\n                this.selected = btnSortControl;\n\n                this.setSelectedButton(baseSortControl);\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group);\n                }\n            });\n        }\n\n        this.selected = DropdownSortControl.getSelectedButton(baseSortControl.buttons);\n        this.setSelectedButton(baseSortControl);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            this.id = baseSortControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n\n                const deepLinkBtn = baseSortControl.buttons.find(btn => {\n\n                    const btnValue = btn.element.getAttribute('data-value');\n                    return (deepLinkParam.value === btnValue) ? btn : null;\n                });\n\n                if(deepLinkBtn) {\n                    this.selected = deepLinkBtn;\n                    this.setSelectedButton(baseSortControl);\n                }\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        if(this.selected){\n            return this.selected.getSortOptions();\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        if(this.id && this.selected){\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\n        }\n\n        return '';\n    }\n\n    /**\n     * get selected button that has data-selected=\"true\" data attribute;\n     * if there is no data-selected attribute -> take the first button\n     * @param {Array.<BaseSortControl>} buttons\n     * @return {BaseSortControl|null}\n     */\n    static getSelectedButton(buttons){\n\n        if(buttons.length <= 0) return null;\n\n        for(let button of buttons){\n            if(button.element.getAttribute('data-selected') === 'true'){\n                return button;\n            }\n        }\n\n        return buttons[0];\n    }\n\n    /**\n     * set selected button\n     * @param {BaseSortControl} baseSortControl\n     */\n    setSelectedButton(baseSortControl){\n\n        for(let control of this.controls){\n\n            if(!control.dropdown) continue;\n\n            //verify that dropdown has such button\n            const dropdownBtn = baseSortControl.buttons.find(btn => this.selected.isEqualTo(btn));\n\n            if(dropdownBtn){\n\n                //update dropdown panels value\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\n            }\n        }\n    }\n}\n\nexport default DropdownSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\n\n/**\n * select sort control\n *  <select\n *        data-jplist-control=\"select-sort\"\n *        data-group=\"group1\"\n *        data-name=\"name1\"\n *        data-id=\"deep-link-name1\">  <!-- optional, used as deep link url and storage parameter -->\n *\n *        <option\n *          data-path=\"default\"\n *          value=\"0\"\n *          selected>Sort by</option>\n *\n *        <option\n *          value=\"1\"\n *          data-path=\".title\"\n *          data-order=\"asc\"\n *          data-type=\"text\">Title A-Z</option>\n *\n *        <option\n *          value=\"2\"\n *          data-path=\".title\"\n *          data-order=\"desc\"\n *          data-type=\"text\">Title Z-A</option>\n *    </select>\n *\n *    option may have the following attributes:\n *    ------------------------------------------\n *    data-path - required CSS path selector\n *    data-order - optional, asc (default) / desc\n *    data-type=\"text\" - optional, text (default) / number / datetime\n *    data-datetime-format=\"{month}/{day}/{year}\" - optional datetime format\n *    data-regex -  optional ignore regex\n */\nclass SelectSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.options = [];\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        let options = baseSortControl.element.querySelectorAll('option');\n\n        for(let option of options){\n\n            option.setAttribute('data-name', this.name);\n            option.setAttribute('data-group', this.group);\n\n            if(!this.options.find(opt => opt.element.value === option.value)){\n                this.options.push(new BaseSortControl(option));\n            }\n        }\n\n        this.selected = baseSortControl.element.value;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            this.id = baseSortControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.element.value = deepLinkParam.value;\n                this.selected = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            this.selected = e.target.value;\n\n            for(let select of this.controls){\n                select.element.value = this.selected;\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group);\n            }\n        });\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(selected){\n            return selected.getSortOptions();\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(this.id){\n            return this.id + '=' + selected.element.value;\n        }\n\n        return '';\n    }\n}\n\nexport default SelectSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * checkbox sort control\n *\n * Usage:\n * <label>\n *  <input\n *      type=\"checkbox\"\n *      data-jplist-control=\"checkbox-sort\"\n *      data-path=\".title\"           <!-- required -->\n *      data-group=\"group1\"          <!-- required -->\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *      data-regex=\"\"                <!-- optional -->\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\n *      checked>\n *          Sort by title asc\n *  </input>\n * </label>\n * Optional deep link: #deepLinkName1=1\n * selected value - 1\n * non selected - 0\n */\nclass CheckboxSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.checkboxes.push(baseSortControl);\n        this.handleCheckboxes();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            baseSortControl.selected = !baseSortControl.selected;\n\n            this.checkboxes.forEach(cb => {\n\n                if(cb.isEqualTo(baseSortControl)){\n                    cb.selected = baseSortControl.selected;\n                }\n            });\n\n            this.handleCheckboxes();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        let atLeastOneNotSelectedCheckbox = false;\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\n            }\n            else{\n                atLeastOneNotSelectedCheckbox = true;\n            }\n        }\n\n        //any number of non selected checkboxes -> 1 default option\n        if(atLeastOneNotSelectedCheckbox){\n            sortOptions = sortOptions.concat([\n                {\n                    path: 'default'\n                }\n            ]);\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n\n        const unique = Array.from(new Set(cbArr));\n        return unique.join('&');\n    }\n}\n\nexport default CheckboxSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * radio buttons sort control\n *\n * Usage:\n * <label>\n *  <input\n *      type=\"radio\"\n *      data-jplist-control=\"radio-buttons-sort\"\n *      data-path=\".title\"           <!-- required -->\n *      data-group=\"group1\"          <!-- required -->\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *      data-regex=\"\"                <!-- optional -->\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\n *      name=\"sort1\"\n *      checked>\n *          Sort by title asc\n *  </input>\n * </label>\n *\n * Optional deep link: #deepLinkName1=1\n * selected value - 1\n * non selected - should not appear in deep link\n */\nclass RadioButtonsSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.radios.push(baseSortControl);\n        this.handleRadios();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            for (let radio of this.radios) {\n                radio.selected = false;\n            }\n\n            baseSortControl.selected = true;\n\n            this.handleRadios();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group);\n            }\n        });\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BaseSortControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio mode controls\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const unique = Array.from(new Set(radioArr));\n        return unique.join('&');\n    }\n}\n\nexport default RadioButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * sort buttons jPList control\n *\n * Usage:\n * <button\n *  data-jplist-control=\"sort-buttons\"\n *  data-path=\".title\"          <!-- required -->\n *  data-group=\"group1\"         <!-- required -->\n *  data-order=\"asc\"            <!-- optional, asc (default) / desc -->\n *  data-type=\"text\"            <!-- optional, text (default) / number / datetime -->\n *  data-name=\"sort1\"           <!-- required for radio mode -->\n *  data-selected=\"true\"        <!-- optional, true / false (default) -->\n *  data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *  data-regex=\"\"               <!-- optional -->\n *  data-id=\"deep-link-name1\"   <!-- optional, used as deep link url and storage parameter -->\n *  data-mode=\"radio\">          <!-- optional, radio (default) / checkbox -->\n *  Sort by title asc\n * </button>\n *\n * Optional deep link: #deepLinkName1=1&deepLinkName2=1\n * selected value - 1\n * non selected - should not appear in deep link or any value !== 1\n */\nclass ButtonsSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.getAttribute('data-selected') === 'true';\n        baseSortControl.mode = baseSortControl.element.getAttribute('data-mode') || 'radio';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        if(baseSortControl.mode === 'radio'){\n\n            this.radios.push(baseSortControl);\n            this.handleRadios();\n        }\n\n        if(baseSortControl.mode === 'checkbox'){\n\n            this.checkboxes.push(baseSortControl);\n            this.handleCheckboxes();\n        }\n\n        /**\n         * on control click -> change the selected control\n         */\n        baseSortControl.element.addEventListener('click', e => {\n\n            e.preventDefault();\n\n            if(baseSortControl.mode === 'checkbox'){\n\n                baseSortControl.selected = !baseSortControl.selected;\n\n                this.checkboxes.forEach(cb => {\n\n                    if(cb.isEqualTo(baseSortControl)){\n                        cb.selected = baseSortControl.selected;\n                    }\n                });\n\n                this.handleCheckboxes();\n            }\n\n            if(baseSortControl.mode === 'radio'){\n\n                for (let radio of this.radios) {\n                    radio.selected = false;\n                }\n\n                baseSortControl.selected = true;\n\n                this.handleRadios();\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n        }\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BaseSortControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio mode controls\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        let atLeastOneNotSelectedCheckbox = false;\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\n            }\n            else{\n                atLeastOneNotSelectedCheckbox = true;\n            }\n        }\n\n        if(atLeastOneNotSelectedCheckbox){\n            sortOptions = sortOptions.concat([\n                {\n                    path: 'default'\n                }\n            ]);\n        }\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => cb.id && cb.selected ? cb.id + '=1' : '').filter(str => str !== '');\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const combined = cbArr.concat(radioArr);\n        const unique = Array.from(new Set(combined));\n        return unique.join('&');\n    }\n}\n\nexport default ButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\n/**\n * hidden sort jPList control\n *\n * HTML structure:\n * ----------------\n * <div\n *      style=\"display: none\"\n *      data-jplist-control=\"hidden-sort\"\n *      data-group=\"group1\"\n *      data-path=\".title\"\n *      data-type=\"number\"> <!-- possible values: text, number, datetime -->\n * </div>\n *\n * Usage in JS:\n * -------------\n * import HiddenSort from './controls/sort/hidden-sort.control';\n * let control = document.getElementById('my-hidden-sort-control');\n * const hiddenSort = new HiddenSort(control);\n * console.log(hiddenSort.type);\n */\nclass HiddenSortControl extends BaseSortControlsGroup{}\n\nexport default HiddenSortControl;\n","/**\n * filter action\n */\nclass FilterAction{\n\n    /**\n     * text filter\n     * this filter returns all items that contains the specified text in the given path\n     * @param {Array.<HTMLElement>} items\n     * @param {string} text\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {string=} mode - contains (default), startsWith, endsWith, equal\n     * @param {string=} ignoreRegex - optional regex that defines what characters should be ignored\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static textFilter(items, text, path='', mode = 'contains', ignoreRegex = ''){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default') return items;\n\n        const formattedText = text.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\n\n        for(let item of items){\n\n            const elements = path ? item.querySelectorAll(path) : [item];\n\n            if(!elements) continue;\n\n            let shouldBeAdded = false;\n\n            for(let el of elements){\n\n                const elText = el.textContent.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\n\n                switch(mode){\n\n                    case 'startsWith':{\n\n                        if(elText.startsWith(formattedText)){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n\n                    case 'endsWith':{\n\n                        if(elText.endsWith(formattedText)){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n\n                    case 'equal':{\n\n                        if(elText === formattedText){\n                            shouldBeAdded = true;\n                        }\n                        break;\n                    }\n\n                    default:{\n\n                        //contains\n                        if(elText.indexOf(formattedText) !== -1){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n                }\n\n                if(shouldBeAdded) break;\n            }\n\n            if(shouldBeAdded){\n                filtered.push(item);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * path filter\n     * only items with the given path are returned\n     * @param {Array.<HTMLElement>} items\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static pathFilter(items, path=''){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default' || !path) return items;\n\n        for(let item of items){\n\n            const el = item.querySelector(path);\n\n            if(el){\n                filtered.push(item);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * check if n is a number\n     * @param {*} n\n     * @returns {boolean}\n     */\n    static isNumeric(n)\n    {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    /**\n     * range filter\n     * return only elements that satisfy the following condition:\n     * all numbers in the element's content are in the following range: min <= from <= (all numbers in the element) <= to <= max\n     * @param {Array.<HTMLElement>} items\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {number} from\n     * @param {number} to\n     * @param {number=} min\n     * @param {number=} max\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static rangeFilter(items, path='', from, to, min = from, max = to){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default') return items;\n\n        from = Math.max(from, min);\n        to = Math.min(to, max);\n\n        for(let item of items){\n\n            const itemElements = path ? item.querySelectorAll(path) : [item];\n\n            if(!itemElements) continue;\n\n            //find all numbers within the element\n            const numbers = [];\n\n            for(let el of itemElements){\n\n                const num = Number(el.textContent.trim().replace(/[^-0-9.]+/g,''));\n\n                if(!isNaN(num)){\n                    numbers.push(num);\n                }\n            }\n\n            if(numbers.length > 0){\n\n                //find max and min number of all found within the element numbers\n                const maxNumber = Math.max.apply(Math, numbers);\n                const minNumber = Math.min.apply(Math, numbers);\n\n                let shouldBeAdded = true;\n\n                if(FilterAction.isNumeric(from) && from > minNumber){\n                    shouldBeAdded = false;\n                }\n\n                if(FilterAction.isNumeric(to) && maxNumber > to){\n                    shouldBeAdded = false;\n                }\n\n                if(shouldBeAdded){\n                    filtered.push(item);\n                }\n            }\n        }\n\n        return filtered;\n    }\n}\n\nexport default FilterAction;","/**\n * local storage, session storage, cookies\n */\nclass StorageService{\n\n    /**\n     * is storage supported?\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @return {boolean}\n     */\n    static isSupported(storage){\n\n        if(storage === 'cookies') return true;\n\n        try{\n            return storage in window && window[storage] !== null;\n        }\n        catch(e){\n            return false;\n        }\n    }\n\n    /**\n     * save to the storage\n     * @param {string} deepLink\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @param {string} key - storage key\n     * @param {number} expiration - cookie expiration in minutes (-1 = cookies expire when browser is closed)\n     */\n    static set(deepLink, storage, key, expiration = -1){\n\n        if(storage === 'cookies'){\n\n            const cValue = encodeURIComponent(deepLink);\n            const exdate = new Date();\n\n            expiration = Number(expiration) || -1;\n\n            if(expiration === -1){\n                document.cookie = name + '=' + cValue + ';path=/;';\n            }\n            else{\n                exdate.setMinutes(exdate.getMinutes() + expiration);\n                document.cookie = name + '=' + cValue + ';path=/; expires=' + exdate.toUTCString();\n            }\n        }\n        else{\n            if(StorageService.isSupported(storage)) {\n\n                //save json in storage\n                window[storage][key] = deepLink;\n            }\n        }\n    }\n\n    /**\n     * get from storage\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @param {string} key - storage key\n     * @return {string} deepLink\n     */\n    static get(storage, key){\n\n        let deepLink = '';\n\n        if(storage === 'cookies'){\n\n            //get document cookie\n            const cookies = document.cookie.split(';');\n\n            for (let i=0; i<cookies.length; i++){\n\n                let x = cookies[i].substr(0,cookies[i].indexOf('='));\n                let y = cookies[i].substr(cookies[i].indexOf('=') + 1);\n                x = x.replace(/^\\s+|\\s+$/g, '');\n\n                if(x === key){\n                    deepLink = decodeURIComponent(y);\n                    break;\n                }\n            }\n        }\n        else{\n            if(StorageService.isSupported(storage)) {\n                deepLink = window[storage][key] || '';\n            }\n        }\n\n        return deepLink;\n    }\n\n}\n\nexport default StorageService;","class DeepLinksService{\n\n    /**\n     * take param1=val1 and return an object of the structure { key: param1, value: val1 }\n     * @param param {string}\n     * @return {object|null}\n     */\n    static getParam(param){\n\n        if(!param) return null;\n\n        const parts = param.split('=');\n\n        if(parts.length < 2) return null;\n\n        return {\n            key: parts[0].trim().toLowerCase(),\n            value: parts[1].trim().toLowerCase()\n        };\n    }\n\n    /**\n     * get deep link parameters from URL\n     * @param {string} hash - window.location.hash value\n     * @param {string=} hashStart - optional value of hash start; by default it's '#', but can be changed for example to be '#!'\n     * @return {Map} params - structure: [groupName, [{key, value}, ...]], ...\n     *\n     * URL structure example:\n     * https://www.example.com?param1=val1&param2=val2#group=gr1&param1=val1&param2=val2&group=gr2&param1=val1&param2=val2...\n     */\n    static getUrlParams(hash, hashStart = '#'){\n\n        const paramsMap = new Map();\n\n        if(!hash) return paramsMap;\n\n        const formattedHash = window.decodeURIComponent(hash.replace(hashStart, '')).trim().toLowerCase();\n\n        if(!formattedHash) return paramsMap;\n\n        const params = formattedHash.split('&');\n\n        let currentGroupName = '';\n\n        for(let pair of params){\n\n            const param = DeepLinksService.getParam(pair);\n\n            if(!param) continue;\n\n            if(param.key === 'group'){\n\n                currentGroupName = param.value;\n\n                //insert group name if doesn't exist\n                if(!paramsMap.has(param.value)){\n\n                    paramsMap.set(param.value, []);\n                }\n            }\n            else{\n                const groupValues = paramsMap.get(currentGroupName);\n\n                if(groupValues){\n                    groupValues.push(param);\n                }\n\n                paramsMap.set(currentGroupName, groupValues);\n            }\n        }\n\n        return paramsMap;\n    }\n}\n\nexport default DeepLinksService;","/**\n * pagination\n */\nclass PaginationAction{\n\n    /**\n     * Pagination\n     * @constructor\n     * @param {number} currentPage\n     * @param {number} itemsPerPage\n     * @param {number} itemsNumber\n     * @param {number} range\n     */\n    constructor(currentPage, itemsPerPage, itemsNumber, range){\n\n        this.itemsNumber = Number(itemsNumber) || 0;\n        this.itemsPerPage = Number.isInteger(itemsPerPage) ? Number(itemsPerPage) : this.itemsNumber;\n\n        if(this.itemsPerPage === 0){\n            this.itemsPerPage = itemsNumber;\n        }\n\n        this.pagesNumber = this.itemsPerPage === 0 ? 0 : Math.ceil(this.itemsNumber/this.itemsPerPage);\n\n        //validate current page\n        this.currentPage = Number(currentPage) || 0;\n\n        if(this.currentPage > this.pagesNumber - 1){\n            this.currentPage = 0;\n        }\n\n        this.start = this.currentPage * this.itemsPerPage;\n        this.end = this.start + this.itemsPerPage;\n\n        //validate the end\n        if(this.end > this.itemsNumber){\n            this.end = this.itemsNumber;\n        }\n\n        this.prevPage = this.currentPage <= 0 ? 0 : this.currentPage - 1;\n        this.nextPage = this.pagesNumber === 0 ? 0 : (this.currentPage >= this.pagesNumber - 1 ? this.pagesNumber - 1 : this.currentPage + 1);\n\n        this.range = Number(range) || 10;\n\n        const halfRange = Math.ceil((this.range - 1) / 2);\n        this.rangeStart = this.currentPage - halfRange;\n        this.rangeEnd = Math.min(this.rangeStart + this.range - 1, this.pagesNumber - 1);\n\n        if(this.rangeStart <= 0){\n            this.rangeStart = 0;\n            this.rangeEnd = Math.min(this.range - 1, this.pagesNumber - 1);\n        }\n\n        if(this.rangeEnd >= this.pagesNumber - 1){\n            this.rangeStart = Math.max(this.pagesNumber - this.range, 0);\n            this.rangeEnd = this.pagesNumber - 1;\n        }\n    }\n}\n\nexport default PaginationAction;","/**\n * sort action\n */\nclass SortAction{\n\n    /**\n     * general multiple sort\n     * @param {Array.<HTMLElement>} items\n     * @param {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\n     * if path = 'default' - the original sort should be kept\n     * @return {Array.<HTMLElement>} sorted items\n     */\n    static sort(items, options){\n\n        if(!options || options.length <= 0){\n\n            /**\n             * if no options - return to the default browser sort order\n             */\n            items.sort((item1, item2) => {\n                return SortAction.sortByIndex(item1, item2);\n            });\n\n            return items;\n        }\n\n        items.sort((item1, item2) => {\n\n            /**\n             * start recursive helper\n             */\n            return SortAction.sortHelper(item1, item2, options, 0);\n        });\n\n        return items;\n    }\n\n    /**\n     * recursive sort helper\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {Array.<Object>} options - structure: {path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}\n     * @param {number} optionsIndex\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortHelper(item1, item2, options, optionsIndex){\n\n        if(!options || options.length <= 0 || optionsIndex >= options.length){\n            return 0;\n        }\n\n        let result = 0;\n\n        const option = options[optionsIndex];\n\n        if(option.path !== 'default'){\n\n            switch(option.dataType){\n\n                case 'number': {\n                    result = SortAction.sortNumbers(item1, item2, option.path, option.order);\n                    break;\n                }\n\n                case 'datetime': {\n                    result = SortAction.sortDateTime(item1, item2, option.path, option.order, option.dateTimeFormat);\n                    break;\n                }\n\n                default: {\n                    result = SortAction.sortText(item1, item2, option.path, option.order, option.ignoreRegex);\n                    break;\n                }\n            }\n        }\n        else{\n            result = SortAction.sortByIndex(item1, item2);\n        }\n\n        if(result === 0 && optionsIndex + 1 < options.length){\n\n            //get next result recursive\n            result = SortAction.sortHelper(item1, item2, options, optionsIndex + 1);\n        }\n\n        return result;\n    }\n\n    /**\n     * sort texts\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value\n     * @param {string=} order - asc or desc\n     * @param {string=} ignoreRegex - optional regex that defines charaters that should be ignored before the sorting\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortText(item1, item2, path = '', order = 'asc', ignoreRegex = ''){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let text1 = el1.textContent.trim().toLowerCase();\n        let text2 = el2.textContent.trim().toLowerCase();\n\n        if(ignoreRegex){\n\n            //regex expression that is used to remove irrelevant characters\n            const regexExpr = new RegExp(ignoreRegex, 'ig');\n            text1 = text1.replace(regexExpr, '').trim();\n            text2 = text2.replace(regexExpr, '').trim();\n        }\n\n        if(text1 === text2){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        //compare languages other than English\n        if(''.localeCompare){\n\n            if (order === 'asc') {\n                return text1.localeCompare(text2);\n            }\n            else {\n                return text2.localeCompare(text1);\n            }\n        }\n        else{\n            if (order === 'asc') {\n                return text1 > text2 ? 1 : -1;\n            }\n            else {\n                return text1 < text2 ? 1 : -1;\n            }\n        }\n    }\n\n    /**\n     * sort numbers\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value\n     * @param {string=} order - asc or desc\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortNumbers(item1, item2, path = '', order = 'asc'){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let number1 = el1.textContent.trim().toLowerCase();\n        let number2 = el2.textContent.trim().toLowerCase();\n\n        //remove other characters\n        number1 = parseFloat(number1.replace(/[^-0-9.]+/g,''));\n        number2 = parseFloat(number2.replace(/[^-0-9.]+/g,''));\n\n        if(isNaN(number1) || isNaN(number2)){\n\n            if(isNaN(number1) && isNaN(number2)){\n                return 0;\n            }\n            else {\n                return isNaN(number1) ? 1 : -1;\n            }\n        }\n\n        if(number1 === number2){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        if(order === 'asc'){\n            return number1 - number2;\n        }\n        else{\n            return number2 - number1;\n        }\n    }\n\n\n    /**\n     * sort by initial element index\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortByIndex(item1, item2){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        let number1 = Number(item1.jplistIndex);\n        let number2 = Number(item2.jplistIndex);\n\n        if(isNaN(number1) || isNaN(number2)){\n            return 0;\n        }\n\n        return number1 - number2;\n    }\n\n    // ---------------- DATE TIME ------------------------\n\n    /**\n     * month name that can be used in date time strings\n     * from 0 for January to 11 for December\n     * @returns {Array.<Array.<string>>}\n     */\n    static get months() {\n\n        return [\n            ['january', 'jan', 'jan.'],\n            ['february', 'feb', 'feb.'],\n            ['march', 'mar', 'mar.'],\n            ['april', 'apr', 'apr.'],\n            ['may'],\n            ['june', 'jun.'],\n            ['july', 'jul', 'jul.'],\n            ['august', 'aug', 'aug.'],\n            ['september', 'sep', 'sep.'],\n            ['october', 'oct', 'oct.'],\n            ['november', 'nov', 'nov.'],\n            ['december', 'dec', 'dec.']\n        ];\n    }\n\n    /**\n     * sort datetime\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value;\n     * @param {string=} order - asc or desc\n     * @param {string=} dateTimeFormat - for example, {month}/{day}/{year}\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortDateTime(item1, item2, path = '', order = 'asc', dateTimeFormat = ''){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let datetime1 = el1.textContent.trim().toLowerCase();\n        let datetime2 = el2.textContent.trim().toLowerCase();\n\n        let date1;\n        let date2;\n\n        dateTimeFormat = dateTimeFormat.trim();\n\n        if(!dateTimeFormat){\n\n            date1 = new Date(Date.parse(datetime1));\n            date2 = new Date(Date.parse(datetime2));\n        }\n        else{\n            date1 = SortAction.getDateFromString(datetime1, dateTimeFormat);\n            date2 = SortAction.getDateFromString(datetime2, dateTimeFormat);\n        }\n\n        if(date1.getTime() === date2.getTime()){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        if(order === 'asc'){\n            return date1.getTime() > date2.getTime() ? 1 : -1;\n        }\n        else{\n            return date1.getTime() < date2.getTime() ? 1 : -1;\n        }\n    }\n\n    /**\n     * get date time from string that contains wildcards like {year}, {month}, {day}, {hour}, {min}, {sec}\n     * @param {string} dateTimeString - for example, 01/12/2017\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year}\n     * @return {Date}\n     */\n    static getDateFromString(dateTimeString, dateTimeFormat){\n\n        //remove special characters\n        dateTimeFormat = dateTimeFormat.replace(/\\./g, '\\\\.');\n        dateTimeFormat = dateTimeFormat.replace(/\\(/g, '\\\\(');\n        dateTimeFormat = dateTimeFormat.replace(/\\)/g, '\\\\)');\n        dateTimeFormat = dateTimeFormat.replace(/\\[/g, '\\\\[');\n        dateTimeFormat = dateTimeFormat.replace(/\\]/g, '\\\\]');\n\n        //get year\n        let year = SortAction.getDateWildcardValue(dateTimeFormat, '{year}', dateTimeString);\n        year = Number(year) || 1900;\n\n        //get day\n        let day = SortAction.getDateWildcardValue(dateTimeFormat, '{day}', dateTimeString);\n        day = Number(day) || 1;\n\n        //get month: integer value representing the month, beginning with 0 for January to 11 for December\n        let month = SortAction.getDateWildcardValue(dateTimeFormat, '{month}', dateTimeString);\n        month = SortAction.getMonthByWildcard(month);\n        if(month === -1){\n            month = 0;\n        }\n\n        //get hour: (0-23)\n        let hour = SortAction.getDateWildcardValue(dateTimeFormat, '{hour}', dateTimeString);\n        hour = Number(hour) || 0;\n\n        //get minute: (0-59)\n        let minute = SortAction.getDateWildcardValue(dateTimeFormat, '{min}', dateTimeString);\n        minute = Number(minute) || 0;\n\n        //get second: (0-59)\n        let second = SortAction.getDateWildcardValue(dateTimeFormat, '{sec}', dateTimeString);\n        second = Number(second) || 0;\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    /**\n     * get datetime format section/item\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year} or any other string with wildcards; dateTimeFormat should not contain special characters like . ( ) [ ]\n     * @param {string} wildcard - {year}|{month}|{day}|{hour}|{min}|{sec}\n     * @param {string} datetimeString - for example, 01/15/2017\n     * @return {string|null} - returns the specified wildcard value, for example 2017 for {year} wildcard\n     */\n    static getDateWildcardValue(dateTimeFormat, wildcard, datetimeString){\n\n        let result = null;\n\n        //replace the specified wildcard with the (.*)\n        //for example, for wildcard=year the string can be: '{month}/{day}/{year}' => '{month}/{day}/(.*)'\n        let replacedFormat = dateTimeFormat.replace(wildcard, '(.*)');\n\n        //replace all other wildcard with .*\n        //for example above it will be: '.*/.*/(.*)'\n        const regexValue = replacedFormat.replace(/{year}|{month}|{day}|{hour}|{min}|{sec}/g, '.*');\n\n        //for example, run '.*/.*/(.*)' regex on 01/15/2017\n        const regex = new RegExp(regexValue, 'g');\n        const match = regex.exec(datetimeString);\n\n        //we get the wildcard value from the given string: 2017 in the example above\n        if(match && match.length > 1){\n            result = match[1];\n        }\n\n        return result;\n    }\n\n    /**\n     * get month number by string\n     * @param {string} monthNumberOrName - month number or name from date time string\n     * @return {number} from 0 for January to 11 for December; -1 if not found;\n     */\n    static getMonthByWildcard(monthNumberOrName){\n\n        monthNumberOrName = monthNumberOrName ? monthNumberOrName.trim().toLowerCase() : '';\n\n        let monthIndex = Number(monthNumberOrName);\n\n        if(!isNaN(monthIndex)){\n\n            if(monthIndex - 1 < 0){\n                return -1;\n            }\n            else {\n                return monthIndex - 1;\n            }\n        }\n\n        //find month index by value\n        return SortAction.months.findIndex((monthAliasesArray) => {\n\n            return monthAliasesArray.find(monthAlias => {\n                return monthAlias.trim() === monthNumberOrName;\n            });\n        });\n    }\n}\n\nexport default SortAction;","import SortAction from '../actions/sort/sort.action';\nimport PaginationAction from '../actions/pagination/pagination.action';\nimport BaseControl from '../controls/base/controls/base.control';\nimport DeepLinksService from '../services/deep-links.service';\nimport StorageService from '../services/storage.service';\nimport FilterAction from '../actions/filter/filter.action';\n\n/**\n * content manager\n */\nclass ContentManager{\n\n    /**\n     * apply controls on the content groups\n     * @param {Object} settings\n     * @param {Map} controls - controls split by data-group and data-name: [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n     * @param {Map} groups - [groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     * @param {string=} groupName - optional group name; if group name is empty or not provided -> refresh all groups\n     */\n    static apply(settings, controls, groups, groupName = ''){\n\n        if(!controls || !groups) return;\n\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\n        for(let [cGroupName, groupValueArr] of groups){\n\n            if((groupName && groupName === cGroupName) || !groupName){\n\n                //get controls of this group;\n                //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\n                const baseControlsGroups = controls.get(cGroupName);\n\n                //collect sort, pagination and filter options from all controls with the same group name\n                const options = ContentManager.collectControlsOptions(baseControlsGroups);\n\n                //there can be more than one block of items with the same group name\n                //each itemsBlock has structure: {root: HTMLElement, items: Array.<HTMLElement>}\n                for(let itemsBlock of groupValueArr){\n\n                    let itemsNumber = itemsBlock.items.length;\n\n                    //hide all elements moving them to the document fragment\n                    let fragment = ContentManager.getItemsFragment(itemsBlock.items);\n\n                    if(options.sortOptions && options.sortOptions.length > 0) {\n\n                        //sort the items of the group using sort options of all controls\n                        SortAction.sort(itemsBlock.items, options.sortOptions);\n                        fragment = ContentManager.getItemsFragment(itemsBlock.items);\n                    }\n\n                    let filtered = itemsBlock.items;\n\n                    if(options.pathFilterOptions){\n\n                        for(let pathFilterOption of options.pathFilterOptions){\n\n                            filtered = FilterAction.pathFilter(filtered, pathFilterOption.path);\n                            itemsNumber = filtered.length;\n                            fragment = ContentManager.getItemsFragment(filtered);\n                        }\n                    }\n\n                    if(options.rangeFilterOptions){\n\n                        for(let rangeFilterOption of options.rangeFilterOptions){\n\n                            filtered = FilterAction.rangeFilter(filtered,\n                                rangeFilterOption.path,\n                                rangeFilterOption.from,\n                                rangeFilterOption.to,\n                                rangeFilterOption.min,\n                                rangeFilterOption.max);\n\n                            itemsNumber = filtered.length;\n                            fragment = ContentManager.getItemsFragment(filtered);\n                        }\n                    }\n\n                    if(options.textFilterOptions){\n\n                        for(let textFilterOption of options.textFilterOptions){\n\n                            filtered = FilterAction.textFilter(\n                                filtered,\n                                textFilterOption.text,\n                                textFilterOption.path,\n                                textFilterOption.mode,\n                                textFilterOption.ignoreRegex);\n\n                            itemsNumber = filtered.length;\n                            fragment = ContentManager.getItemsFragment(filtered);\n                        }\n                    }\n\n                    if(options.paginationOptions){\n\n                        const paginationAction = new PaginationAction(\n                            options.paginationOptions.currentPage,\n                            options.paginationOptions.itemsPerPage,\n                            filtered.length,\n                            options.paginationOptions.range\n                        );\n\n                        //setPaginationOptions applies all computed properties of PaginationAction class to the latest pagination control\n                        if(baseControlsGroups.length > 0){\n\n                            for(let bcg of baseControlsGroups){\n                                if(bcg.setPaginationOptions){\n                                    bcg.setPaginationOptions(paginationAction);\n                                }\n                            }\n                        }\n\n                        const paginatedItems = filtered.slice(paginationAction.start, paginationAction.end);\n                        itemsNumber = paginatedItems.length;\n                        fragment = ContentManager.getItemsFragment(paginatedItems);\n                    }\n\n                    //return to HTML only relevant items\n                    itemsBlock.root.appendChild(fragment);\n\n                    //dispatch the event with different data about state of controls and items\n                    ContentManager.sendStateEvent(options, itemsNumber, baseControlsGroups);\n                }\n\n                //if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\n                ContentManager.jump(baseControlsGroups);\n            }\n\n        }\n\n        if(settings.deepLinking) {\n\n            //update deep link if it's enabled\n            ContentManager.updateDeepLink(ContentManager.getDeepLink(controls, groups), settings.hashStart);\n        }\n        else{\n            if(settings.storage){\n\n                //update storage if it's enabled\n                StorageService.set(ContentManager.getDeepLink(controls, groups), settings.storage, settings.storageName, settings.cookiesExpiration);\n            }\n        }\n    }\n\n    /**\n     * if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\n     * data-jump=\"any CSS selector or 'top' keyword\"\n     * examples: data-jump=\"header\"\n     *           data-jump=\".top-bar\"\n     *           data-jump=\"#main\"\n     *           data-jump=\"top\"\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups - [BaseControlsGroup1, BaseControlsGroup2, ...]\n     */\n    static jump(baseControlsGroups){\n\n        if(!baseControlsGroups || baseControlsGroups.length <= 0) return;\n\n        //-1 means no scroll\n        let top = -1;\n\n        //if multiple control in the group have data-jump attribute -> select the upper one\n        for(let group of baseControlsGroups) {\n\n            const path = group.getJumpPath();\n\n            if(!path) continue;\n\n            //top is always the upper ))\n            if(path === 'top'){\n                top = 0;\n                break;\n            }\n\n            const groupJumpEl = document.querySelector(path);\n\n            if(!groupJumpEl) continue;\n\n            const groupJumpElRect = groupJumpEl.getBoundingClientRect();\n\n            //make sure element is not hidden or disconnected\n            if (!groupJumpEl.width && !groupJumpEl.height && !groupJumpEl.getClientRects().length) continue;\n\n            const clientTop = document.clientTop || document.body.clientTop || 0;\n\n            if(top < 0){\n\n                //select the first jump path as the default value\n                top = groupJumpElRect.top + window.pageYOffset - clientTop;\n            }\n            else{\n                if(groupJumpElRect.top + window.pageYOffset - clientTop < top){\n                    top = groupJumpElRect.top + window.pageYOffset - clientTop;\n                }\n            }\n        }\n\n        if(top >= 0){\n            window.scroll(0, top);\n        }\n    }\n\n    /**\n     * send jPList general event with different data about state of controls and items\n     * @param {object} options\n     * @param {number} itemsNumber\n     * @param {BaseControlsGroup} baseControlsGroups\n     */\n    static sendStateEvent(options, itemsNumber, baseControlsGroups){\n\n        if(!baseControlsGroups) return;\n\n        const stateEvent = new CustomEvent('jplist.state');\n\n        stateEvent.jplistState = {\n            options: options,\n            itemsNumber: itemsNumber\n        };\n\n        for(let baseControlsGroup of baseControlsGroups){\n\n            for(let control of baseControlsGroup.controls){\n\n                control.element.dispatchEvent(stateEvent);\n            }\n        }\n    }\n\n    /**\n     * collect sort, pagination and filter options from all controls with the same group name\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups\n     * @return {object} sort, pagination and filter objects\n     */\n    static collectControlsOptions(baseControlsGroups){\n\n        const options = {\n\n            //there can be multiple sort options\n            sortOptions: [],\n\n            //there should be only one pagination options object;\n            //in case of multiple -> get the latest\n            paginationOptions: null,\n\n            //there can be multiple filter options\n            textFilterOptions: [],\n            pathFilterOptions: [],\n            rangeFilterOptions: []\n        };\n\n        if(!baseControlsGroups) return options;\n\n        for(let baseControlsGroup of baseControlsGroups){\n\n            //get sort options only from sort controls\n            if(baseControlsGroup.getSortOptions) {\n\n                //add base control group sort options\n                options.sortOptions = options.sortOptions.concat(baseControlsGroup.getSortOptions());\n            }\n\n            //get text filter options only from text filter controls\n            if(baseControlsGroup.getTextFilterOptions) {\n\n                //add base control group sort options\n                options.textFilterOptions = options.textFilterOptions.concat(baseControlsGroup.getTextFilterOptions());\n            }\n\n            //get path filter options only from text filter controls\n            if(baseControlsGroup.getPathFilterOptions) {\n\n                //add base control group sort options\n                options.pathFilterOptions = options.pathFilterOptions.concat(baseControlsGroup.getPathFilterOptions());\n            }\n\n            //get range filter options only from range filter controls\n            if(baseControlsGroup.getRangeFilterOptions) {\n\n                //add base control group sort options\n                options.rangeFilterOptions = options.rangeFilterOptions.concat(baseControlsGroup.getRangeFilterOptions());\n            }\n\n            if(baseControlsGroup.getPaginationOptions) {\n                options.paginationOptions = baseControlsGroup.getPaginationOptions();\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * get document fragment with the specified items\n     * @param {Array.<HTMLElement>} items\n     * @return {DocumentFragment}\n     */\n    static getItemsFragment(items){\n\n        const fragment = document.createDocumentFragment();\n\n        for(let item of items){\n            fragment.appendChild(item);\n        }\n\n        return fragment;\n    }\n\n    /**\n     * update deep link -> replace it in URL\n     * @param {string} deepLink\n     * @param {string} hashStart\n     */\n    static updateDeepLink(deepLink, hashStart = '#'){\n\n        let hashStr = deepLink.replace(hashStart, '').trim();\n\n        if(hashStr === ''){\n            hashStr = hashStart;\n        }\n        else{\n            hashStr = hashStart + hashStr;\n        }\n\n        if(window.location.hash !== hashStr){\n\n            const index = window.location.href.indexOf(hashStart);\n            let href;\n\n            if(index === -1){\n                href = window.location.href + hashStr;\n            }\n            else{\n                href = window.location.href.substring(0, index) + hashStr;\n            }\n\n            if('replaceState' in window.history){\n                window.history.replaceState('', '', href);\n            }\n            else{\n                window.location.replace(href);\n            }\n        }\n    }\n\n    /**\n     * update deep link URL according to the current controls states\n     * @return {string} deep link\n     */\n    static getDeepLink(controls, groups){\n\n        let deeplink = [];\n\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\n        for(let cGroupName of groups.keys()){\n\n            //get controls of this group;\n            //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\n            const baseControlsGroups = controls.get(cGroupName);\n\n            const deepLinkParts = [];\n            for(let baseControlsGroup of baseControlsGroups){\n\n                const dl = baseControlsGroup.getDeepLink();\n\n                if(dl){\n                    deepLinkParts.push(dl);\n                }\n            }\n\n            if(deepLinkParts.length > 0){\n                deeplink.push('group=' + cGroupName);\n                deeplink = deeplink.concat(deepLinkParts);\n            }\n        }\n\n        return deeplink.join('&');\n    }\n\n    /**\n     * find all groups of elements that should be sorted, filtered, etc.\n     * each group defined by data-jplist-group attribute;\n     * each element in the group defined by data-jplist-item attribute;\n     * @param {HTMLCollection} groups\n     * @return {Map} Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     */\n    static findGroups(groups){\n\n        const groupsMap = new Map();\n\n        if(!groups){\n            return groupsMap;\n        }\n\n        //get all items with data attribute data-jplist-group\n        const groupElements = [...groups];\n\n        for(let groupElement of groupElements){\n\n            const groupName = groupElement.getAttribute('data-jplist-group');\n\n            let groupValue = [];\n\n            if(groupsMap.has(groupName)){\n                groupValue = groupsMap.get(groupName);\n            }\n\n            groupValue.push({\n\n                /**\n                 * the root element of the group\n                 */\n                root: groupElement,\n\n                /**\n                 * all group elements\n                 */\n                items: [...groupElement.querySelectorAll('[data-jplist-item]')],\n\n                /**\n                 * this fragment used as a container for invisible items\n                 */\n                fragment: document.createDocumentFragment()\n            });\n\n            groupsMap.set(groupName, groupValue);\n        }\n\n        return groupsMap;\n    }\n\n    /**\n     * find all controls defined on page by data-jplist-control attribute;\n     * control classes should be registered in window.jplist.controlTypes before using this method:\n     * window.jplist.controlTypes = new Map([\n     *      ['hidden-sort', HiddenSortControl],\n     *      ...\n     * ]);\n     * @param {HTMLElement} root\n     * @return {Array.<BaseControl>}\n     */\n    static findControls(root){\n\n        if(!root) return [];\n\n        const controls = [];\n\n        //find all control\n        const elements = root.querySelectorAll('[data-jplist-control]');\n\n        if(elements) {\n\n            for(let element of elements){\n\n                const controlType = element.getAttribute('data-jplist-control');\n\n                if(!controlType) continue;\n\n                const controlInstance = new BaseControl(element);\n                controls.push(controlInstance);\n            }\n        }\n\n        return controls;\n    }\n\n    /**\n     * split control by their data-group property\n     * @param {Array.<BaseControl>} controls\n     * @return {Map} [[groupName, controls array], [...], ...]\n     */\n    static findControlGroups(controls){\n\n        const map = new Map();\n\n        if(controls) {\n\n            for (let control of controls) {\n\n                let arr = [];\n\n                if (map.has(control.group)) {\n                    arr = map.get(control.group);\n                }\n\n                arr.push(control);\n\n                map.set(control.group, arr);\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * find controls with the same name\n     * @param {object} settings\n     * @param {Array.<BaseControl>} controls\n     * @return {Map} [[name, BaseControlsGroup], [...]]\n     */\n    static findSameNameControls(settings, controls){\n\n        const map = new Map();\n\n        if(controls){\n\n            let deepLinkParams = null;\n\n            if(settings.deepLinking){\n                deepLinkParams = DeepLinksService.getUrlParams(window.location.hash, settings.hashStart);\n            }\n            else{\n                if(settings.storage){\n\n                    const deepLinkSavedInStorage = StorageService.get(settings.storage, settings.storageName);\n                    deepLinkParams = DeepLinksService.getUrlParams(deepLinkSavedInStorage, '');\n                }\n            }\n\n            for(let control of controls){\n\n                //control with not defined type should be ignored\n                if(!control.type || !window.jplist.controlTypes.has(control.type)) continue;\n\n                //check if data-type class defined in window.jplist.controlTypes;\n                //it should be defined like this:\n                //window.jplist.controlTypes = window.jplist.controlTypes || new Map([\n                //    ['hidden-sort', HiddenSortControl],\n                //    ...\n                //]);\n                const controlClass = window.jplist.controlTypes.get(control.type);\n\n                if(controlClass){\n\n                    let controlGroup = null;\n\n                    if (map.has(control.name)) {\n                        controlGroup = map.get(control.name);\n                    }\n                    else{\n                        controlGroup = new controlClass(control.group, control.name, [], deepLinkParams);\n                    }\n\n                    controlGroup.addControl(control);\n\n                    map.set(control.name, controlGroup);\n                }\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * initialize controls and split them by group and name\n     * @param {object} settings\n     * @param {HTMLElement} root\n     * @return {Map} [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n     */\n    static splitByGroupAndName(settings, root){\n\n        const res = new Map();\n\n        if(!root) return res;\n\n        //find all controls: received {Array.<BaseControl>}\n        const controls = ContentManager.findControls(root);\n\n        //split controls by their data-group attributes;\n        //the received structure is map: [[groupName, controls array], [...], ...]\n        const controlsByGroupNames = ContentManager.findControlGroups(controls);\n\n        for(let [groupName, groupControls] of controlsByGroupNames){\n\n            //received {Map} - [[name, BaseControlsGroup], [...]]\n            const sameNameControls = ContentManager.findSameNameControls(settings, groupControls);\n\n            let arr = [];\n\n            for(let baseControlsGroup of sameNameControls.values()){\n                arr.push(baseControlsGroup);\n            }\n\n            res.set(groupName, arr);\n        }\n\n        return res;\n    }\n}\n\nexport default ContentManager;","import ContentManager from './content/content-manager';\n\n/**\n * the main jPList class\n */\nexport default class jPList{\n\n    /**\n     * API: initialize jPList controls + elements from outside\n     * @param {Object} options\n     */\n    init(options){\n\n        this.settings = Object.assign({}, {\n\n            //storage\n            storage: '', //'', 'localStorage', 'sessionStorage', 'cookies'\n            storageName: 'jplist',\n            cookiesExpiration: -1, //cookies expiration in minutes (-1 = cookie expires when browser is closed)\n\n            //deep links\n            deepLinking: false,\n            hashStart: '#' //the start of the hash part, for example it may be '#!key='\n\n        }, options);\n\n        //find all controls split by data-group and data-name\n        this.controls = ContentManager.splitByGroupAndName(this.settings, document.body);\n\n        //find all jplist groups\n        this.elements = document.querySelectorAll('[data-jplist-group]');\n\n        //get from each group the data about its root and items;\n        //the received structure is: Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>}>]\n        this.groups = ContentManager.findGroups(this.elements);\n\n        let items = [...document.querySelectorAll('[data-jplist-item]')];\n\n        //set jPList index for every element\n        //it's used to return to the default browser sorting if needed\n        for(let jplistIndex = 0; jplistIndex < items.length; jplistIndex++){\n\n            items[jplistIndex].jplistIndex = jplistIndex;\n        }\n\n        //first refresh\n        this.refresh('');\n    }\n\n    /**\n     * API: apply controls on content\n     * @param {string=} groupName - optional group name\n     */\n    refresh(groupName = ''){\n        ContentManager.apply(this.settings, this.controls, this.groups, groupName);\n    }\n\n}","/*\n\n           |----\n           |  /\n           |  \\\n           |----\n           |\n          /*\\\n         // \\\\\n        //   \\\\\n       //=====\\\\\n      //       \\\\\n----| |=========| |----\n \\  | |         | |  /\n /  | |    []   | |  \\\n----| |         | |----\n    | |    []   | |\n   /=\\|         |/=\\\n  //=\\\\    []   //=\\\\\n //===\\\\       //===\\\\\n//=====\\\\     //=====\\\\\n||=====||=====||=====||\n-----------------------\n|||||||||||||||||||||||\n-----------------------\n||       *****       ||\n||      |||||||      ||\n||     ||  |  ||     ||\n||    ||   |   ||    ||\n||    ||  (|)  ||    ||\n||   ||    |    ||   ||\n||   ||    |    ||   ||\n**===================**/\n\nimport jPList from './jplist';\n\n//sort\nimport HiddenSortControl from './controls/sort/hidden-sort/hidden-sort.control';\nimport ButtonsSortControl from './controls/sort/buttons-sort/buttons-sort.control';\nimport RadioButtonsSortControl from './controls/sort/radio-buttons-sort/radio-buttons-sort.control';\nimport CheckboxSortControl from './controls/sort/checkbox-sort/checkbox-sort.control';\nimport SelectSortControl from './controls/sort/select-sort/select-sort.control';\nimport DropdownSortControl from './controls/sort/dropdown-sort/dropdown-sort.control';\n\n//pagination\nimport PaginationControl from './controls/pagination/pagination.control';\n\n//text filter\nimport TextboxFilterControl from './controls/filter/text-filters/textbox-filter/textbox-filter.control';\nimport CheckboxTextFilterControl from './controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control';\nimport RadioButtonsTextFilterControl from './controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control';\nimport ButtonsTextFilterControl from './controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control';\n\n//path filter\nimport SelectFilterControl from './controls/filter/path-filters/select-filter/select-filter.control';\nimport CheckboxPathFilterControl from './controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control';\nimport RadioButtonsPathFilterControl from './controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control';\nimport ButtonsPathFilterControl from './controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control';\nimport DropdownFilterControl from './controls/filter/path-filters/dropdown-filter/dropdown-filter.control';\n\n//range filter\nimport ButtonsRangeFilter from './controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control';\nimport RangeSliderFilter from './controls/filter/range-filters/slider-range-filter/slider-range-filter.control';\n\n//other\nimport NoResultsControl from './controls/no-results/no-results.control';\nimport DropdownControl from './controls/base/controls/dropdown/base-dropdown.control';\nimport LayoutControl from './controls/layout/layout.control';\n\n(() => {\n    'use strict';\n\n    /**\n     * global jplist function, one per page\n     */\n    window.jplist = window.jplist || {};\n\n    /**\n     * registered control types\n     * @type {Map}\n     */\n    window.jplist.controlTypes = window.jplist.controlTypes || new Map([\n        ['hidden-sort', HiddenSortControl],\n        ['sort-buttons', ButtonsSortControl],\n        ['radio-buttons-sort', RadioButtonsSortControl],\n        ['checkbox-sort', CheckboxSortControl],\n        ['select-sort', SelectSortControl],\n        ['dropdown-sort', DropdownSortControl],\n\n        ['pagination', PaginationControl],\n\n        ['textbox-filter', TextboxFilterControl],\n        ['checkbox-text-filter', CheckboxTextFilterControl],\n        ['radio-buttons-text-filter', RadioButtonsTextFilterControl],\n        ['buttons-text-filter', ButtonsTextFilterControl],\n\n        ['select-filter', SelectFilterControl],\n        ['dropdown-filter', DropdownFilterControl],\n        ['checkbox-path-filter', CheckboxPathFilterControl],\n        ['radio-buttons-path-filter', RadioButtonsPathFilterControl],\n        ['buttons-path-filter', ButtonsPathFilterControl],\n\n        ['buttons-range-filter', ButtonsRangeFilter],\n        ['slider-range-filter', RangeSliderFilter],\n\n        ['no-results', NoResultsControl],\n        ['dropdown', DropdownControl],\n        ['layout', LayoutControl]\n    ]);\n\n    let jplist = new jPList();\n\n    /**\n     * external api\n     */\n    window.jplist.init = jplist.init.bind(jplist);\n    window.jplist.refresh = jplist.refresh.bind(jplist);\n\n})();"],"sourceRoot":""}